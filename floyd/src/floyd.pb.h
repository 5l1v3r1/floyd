// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#ifndef PROTOBUF_floyd_2eproto__INCLUDED
#define PROTOBUF_floyd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace floyd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_floyd_2eproto();
void protobuf_AssignDesc_floyd_2eproto();
void protobuf_ShutdownFile_floyd_2eproto();

class Entry;
class CmdRequest;
class CmdRequest_Kv;
class CmdRequest_User;
class CmdRequest_RequestVote;
class CmdRequest_AppendEntries;
class CmdRequest_ServerStatus;
class CmdResponse;
class CmdResponse_Kv;
class CmdResponse_Kvs;
class CmdResponse_ServerStatus;
class CmdResponse_RequestVote;
class CmdResponse_AppendEntries;

enum Type {
  Read = 0,
  ReadAll = 1,
  DirtyWrite = 2,
  Write = 3,
  Delete = 4,
  TryLock = 5,
  UnLock = 6,
  DeleteUser = 7,
  RequestVote = 8,
  AppendEntries = 9,
  ServerStatus = 10
};
bool Type_IsValid(int value);
const Type Type_MIN = Read;
const Type Type_MAX = ServerStatus;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kError;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  void Swap(Entry* other);

  // implements Message ----------------------------------------------

  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional bytes cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const void* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:floyd.Entry)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::std::string* cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Kv : public ::google::protobuf::Message {
 public:
  CmdRequest_Kv();
  virtual ~CmdRequest_Kv();

  CmdRequest_Kv(const CmdRequest_Kv& from);

  inline CmdRequest_Kv& operator=(const CmdRequest_Kv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Kv& default_instance();

  void Swap(CmdRequest_Kv* other);

  // implements Message ----------------------------------------------

  CmdRequest_Kv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Kv& from);
  void MergeFrom(const CmdRequest_Kv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.Kv)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Kv* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_User : public ::google::protobuf::Message {
 public:
  CmdRequest_User();
  virtual ~CmdRequest_User();

  CmdRequest_User(const CmdRequest_User& from);

  inline CmdRequest_User& operator=(const CmdRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_User& default_instance();

  void Swap(CmdRequest_User* other);

  // implements Message ----------------------------------------------

  CmdRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_User& from);
  void MergeFrom(const CmdRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.User)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_RequestVote : public ::google::protobuf::Message {
 public:
  CmdRequest_RequestVote();
  virtual ~CmdRequest_RequestVote();

  CmdRequest_RequestVote(const CmdRequest_RequestVote& from);

  inline CmdRequest_RequestVote& operator=(const CmdRequest_RequestVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_RequestVote& default_instance();

  void Swap(CmdRequest_RequestVote* other);

  // implements Message ----------------------------------------------

  CmdRequest_RequestVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_RequestVote& from);
  void MergeFrom(const CmdRequest_RequestVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required uint64 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 last_log_term = 4;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // required uint64 last_log_index = 5;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 5;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.RequestVote)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_RequestVote* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_AppendEntries : public ::google::protobuf::Message {
 public:
  CmdRequest_AppendEntries();
  virtual ~CmdRequest_AppendEntries();

  CmdRequest_AppendEntries(const CmdRequest_AppendEntries& from);

  inline CmdRequest_AppendEntries& operator=(const CmdRequest_AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_AppendEntries& default_instance();

  void Swap(CmdRequest_AppendEntries* other);

  // implements Message ----------------------------------------------

  CmdRequest_AppendEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_AppendEntries& from);
  void MergeFrom(const CmdRequest_AppendEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required uint64 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 prev_log_index = 4;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::uint64 value);

  // required uint64 prev_log_term = 5;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  inline ::google::protobuf::uint64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 6;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 6;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // repeated .floyd.Entry entries = 7;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 7;
  inline const ::floyd::Entry& entries(int index) const;
  inline ::floyd::Entry* mutable_entries(int index);
  inline ::floyd::Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.AppendEntries)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prev_log_index_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::uint64 commit_index_;
  ::google::protobuf::RepeatedPtrField< ::floyd::Entry > entries_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_AppendEntries* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_ServerStatus : public ::google::protobuf::Message {
 public:
  CmdRequest_ServerStatus();
  virtual ~CmdRequest_ServerStatus();

  CmdRequest_ServerStatus(const CmdRequest_ServerStatus& from);

  inline CmdRequest_ServerStatus& operator=(const CmdRequest_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_ServerStatus& default_instance();

  void Swap(CmdRequest_ServerStatus* other);

  // implements Message ----------------------------------------------

  CmdRequest_ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_ServerStatus& from);
  void MergeFrom(const CmdRequest_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // required int64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 commit_index() const;
  inline void set_commit_index(::google::protobuf::int64 value);

  // optional bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.ServerStatus)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 commit_index_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  void Swap(CmdRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdRequest_Kv Kv;
  typedef CmdRequest_User User;
  typedef CmdRequest_RequestVote RequestVote;
  typedef CmdRequest_AppendEntries AppendEntries;
  typedef CmdRequest_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // required .floyd.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::Type type() const;
  inline void set_type(::floyd::Type value);

  // optional .floyd.CmdRequest.Kv kv = 2;
  inline bool has_kv() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 2;
  inline const ::floyd::CmdRequest_Kv& kv() const;
  inline ::floyd::CmdRequest_Kv* mutable_kv();
  inline ::floyd::CmdRequest_Kv* release_kv();
  inline void set_allocated_kv(::floyd::CmdRequest_Kv* kv);

  // optional .floyd.CmdRequest.User user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::floyd::CmdRequest_User& user() const;
  inline ::floyd::CmdRequest_User* mutable_user();
  inline ::floyd::CmdRequest_User* release_user();
  inline void set_allocated_user(::floyd::CmdRequest_User* user);

  // optional .floyd.CmdRequest.RequestVote request_vote = 4;
  inline bool has_request_vote() const;
  inline void clear_request_vote();
  static const int kRequestVoteFieldNumber = 4;
  inline const ::floyd::CmdRequest_RequestVote& request_vote() const;
  inline ::floyd::CmdRequest_RequestVote* mutable_request_vote();
  inline ::floyd::CmdRequest_RequestVote* release_request_vote();
  inline void set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote);

  // optional .floyd.CmdRequest.AppendEntries append_entries = 5;
  inline bool has_append_entries() const;
  inline void clear_append_entries();
  static const int kAppendEntriesFieldNumber = 5;
  inline const ::floyd::CmdRequest_AppendEntries& append_entries() const;
  inline ::floyd::CmdRequest_AppendEntries* mutable_append_entries();
  inline ::floyd::CmdRequest_AppendEntries* release_append_entries();
  inline void set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries);

  // optional .floyd.CmdRequest.ServerStatus server_status = 6;
  inline bool has_server_status() const;
  inline void clear_server_status();
  static const int kServerStatusFieldNumber = 6;
  inline const ::floyd::CmdRequest_ServerStatus& server_status() const;
  inline ::floyd::CmdRequest_ServerStatus* mutable_server_status();
  inline ::floyd::CmdRequest_ServerStatus* release_server_status();
  inline void set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_kv();
  inline void clear_has_kv();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_request_vote();
  inline void clear_has_request_vote();
  inline void set_has_append_entries();
  inline void clear_has_append_entries();
  inline void set_has_server_status();
  inline void clear_has_server_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::floyd::CmdRequest_Kv* kv_;
  ::floyd::CmdRequest_User* user_;
  ::floyd::CmdRequest_RequestVote* request_vote_;
  ::floyd::CmdRequest_AppendEntries* append_entries_;
  ::floyd::CmdRequest_ServerStatus* server_status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Kv : public ::google::protobuf::Message {
 public:
  CmdResponse_Kv();
  virtual ~CmdResponse_Kv();

  CmdResponse_Kv(const CmdResponse_Kv& from);

  inline CmdResponse_Kv& operator=(const CmdResponse_Kv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Kv& default_instance();

  void Swap(CmdResponse_Kv* other);

  // implements Message ----------------------------------------------

  CmdResponse_Kv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Kv& from);
  void MergeFrom(const CmdResponse_Kv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.Kv)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Kv* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Kvs : public ::google::protobuf::Message {
 public:
  CmdResponse_Kvs();
  virtual ~CmdResponse_Kvs();

  CmdResponse_Kvs(const CmdResponse_Kvs& from);

  inline CmdResponse_Kvs& operator=(const CmdResponse_Kvs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Kvs& default_instance();

  void Swap(CmdResponse_Kvs* other);

  // implements Message ----------------------------------------------

  CmdResponse_Kvs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Kvs& from);
  void MergeFrom(const CmdResponse_Kvs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .floyd.CmdResponse.Kv kv = 1;
  inline int kv_size() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 1;
  inline const ::floyd::CmdResponse_Kv& kv(int index) const;
  inline ::floyd::CmdResponse_Kv* mutable_kv(int index);
  inline ::floyd::CmdResponse_Kv* add_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::floyd::CmdResponse_Kv >&
      kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::floyd::CmdResponse_Kv >*
      mutable_kv();

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.Kvs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::floyd::CmdResponse_Kv > kv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Kvs* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_ServerStatus : public ::google::protobuf::Message {
 public:
  CmdResponse_ServerStatus();
  virtual ~CmdResponse_ServerStatus();

  CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from);

  inline CmdResponse_ServerStatus& operator=(const CmdResponse_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_ServerStatus& default_instance();

  void Swap(CmdResponse_ServerStatus* other);

  // implements Message ----------------------------------------------

  CmdResponse_ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_ServerStatus& from);
  void MergeFrom(const CmdResponse_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // required bytes role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const void* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // optional bytes leader_ip = 4;
  inline bool has_leader_ip() const;
  inline void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 4;
  inline const ::std::string& leader_ip() const;
  inline void set_leader_ip(const ::std::string& value);
  inline void set_leader_ip(const char* value);
  inline void set_leader_ip(const void* value, size_t size);
  inline ::std::string* mutable_leader_ip();
  inline ::std::string* release_leader_ip();
  inline void set_allocated_leader_ip(::std::string* leader_ip);

  // optional int32 leader_port = 5;
  inline bool has_leader_port() const;
  inline void clear_leader_port();
  static const int kLeaderPortFieldNumber = 5;
  inline ::google::protobuf::int32 leader_port() const;
  inline void set_leader_port(::google::protobuf::int32 value);

  // optional bytes voted_for_ip = 6;
  inline bool has_voted_for_ip() const;
  inline void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 6;
  inline const ::std::string& voted_for_ip() const;
  inline void set_voted_for_ip(const ::std::string& value);
  inline void set_voted_for_ip(const char* value);
  inline void set_voted_for_ip(const void* value, size_t size);
  inline ::std::string* mutable_voted_for_ip();
  inline ::std::string* release_voted_for_ip();
  inline void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // optional int32 voted_for_port = 7;
  inline bool has_voted_for_port() const;
  inline void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 7;
  inline ::google::protobuf::int32 voted_for_port() const;
  inline void set_voted_for_port(::google::protobuf::int32 value);

  // optional uint64 last_log_term = 8;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 8;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // optional uint64 last_log_index = 9;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 9;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // optional uint64 last_apply_index = 10;
  inline bool has_last_apply_index() const;
  inline void clear_last_apply_index();
  static const int kLastApplyIndexFieldNumber = 10;
  inline ::google::protobuf::uint64 last_apply_index() const;
  inline void set_last_apply_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.ServerStatus)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_leader_ip();
  inline void clear_has_leader_ip();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_voted_for_ip();
  inline void clear_has_voted_for_ip();
  inline void set_has_voted_for_port();
  inline void clear_has_voted_for_port();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_apply_index();
  inline void clear_has_last_apply_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_index_;
  ::std::string* role_;
  ::std::string* leader_ip_;
  ::std::string* voted_for_ip_;
  ::google::protobuf::int32 leader_port_;
  ::google::protobuf::int32 voted_for_port_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_apply_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_RequestVote : public ::google::protobuf::Message {
 public:
  CmdResponse_RequestVote();
  virtual ~CmdResponse_RequestVote();

  CmdResponse_RequestVote(const CmdResponse_RequestVote& from);

  inline CmdResponse_RequestVote& operator=(const CmdResponse_RequestVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_RequestVote& default_instance();

  void Swap(CmdResponse_RequestVote* other);

  // implements Message ----------------------------------------------

  CmdResponse_RequestVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_RequestVote& from);
  void MergeFrom(const CmdResponse_RequestVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.RequestVote)
 private:
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_RequestVote* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_AppendEntries : public ::google::protobuf::Message {
 public:
  CmdResponse_AppendEntries();
  virtual ~CmdResponse_AppendEntries();

  CmdResponse_AppendEntries(const CmdResponse_AppendEntries& from);

  inline CmdResponse_AppendEntries& operator=(const CmdResponse_AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_AppendEntries& default_instance();

  void Swap(CmdResponse_AppendEntries* other);

  // implements Message ----------------------------------------------

  CmdResponse_AppendEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_AppendEntries& from);
  void MergeFrom(const CmdResponse_AppendEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.AppendEntries)
 private:
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_AppendEntries* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_Kv Kv;
  typedef CmdResponse_Kvs Kvs;
  typedef CmdResponse_ServerStatus ServerStatus;
  typedef CmdResponse_RequestVote RequestVote;
  typedef CmdResponse_AppendEntries AppendEntries;

  // accessors -------------------------------------------------------

  // required .floyd.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::Type type() const;
  inline void set_type(::floyd::Type value);

  // required .floyd.StatusCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::floyd::StatusCode code() const;
  inline void set_code(::floyd::StatusCode value);

  // optional bytes msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .floyd.CmdResponse.Kv kv = 4;
  inline bool has_kv() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 4;
  inline const ::floyd::CmdResponse_Kv& kv() const;
  inline ::floyd::CmdResponse_Kv* mutable_kv();
  inline ::floyd::CmdResponse_Kv* release_kv();
  inline void set_allocated_kv(::floyd::CmdResponse_Kv* kv);

  // optional .floyd.CmdResponse.Kvs kvs = 5;
  inline bool has_kvs() const;
  inline void clear_kvs();
  static const int kKvsFieldNumber = 5;
  inline const ::floyd::CmdResponse_Kvs& kvs() const;
  inline ::floyd::CmdResponse_Kvs* mutable_kvs();
  inline ::floyd::CmdResponse_Kvs* release_kvs();
  inline void set_allocated_kvs(::floyd::CmdResponse_Kvs* kvs);

  // optional .floyd.CmdResponse.ServerStatus server_status = 6;
  inline bool has_server_status() const;
  inline void clear_server_status();
  static const int kServerStatusFieldNumber = 6;
  inline const ::floyd::CmdResponse_ServerStatus& server_status() const;
  inline ::floyd::CmdResponse_ServerStatus* mutable_server_status();
  inline ::floyd::CmdResponse_ServerStatus* release_server_status();
  inline void set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status);

  // optional .floyd.CmdResponse.RequestVote request_vote = 7;
  inline bool has_request_vote() const;
  inline void clear_request_vote();
  static const int kRequestVoteFieldNumber = 7;
  inline const ::floyd::CmdResponse_RequestVote& request_vote() const;
  inline ::floyd::CmdResponse_RequestVote* mutable_request_vote();
  inline ::floyd::CmdResponse_RequestVote* release_request_vote();
  inline void set_allocated_request_vote(::floyd::CmdResponse_RequestVote* request_vote);

  // optional .floyd.CmdResponse.AppendEntries append_entries = 8;
  inline bool has_append_entries() const;
  inline void clear_append_entries();
  static const int kAppendEntriesFieldNumber = 8;
  inline const ::floyd::CmdResponse_AppendEntries& append_entries() const;
  inline ::floyd::CmdResponse_AppendEntries* mutable_append_entries();
  inline ::floyd::CmdResponse_AppendEntries* release_append_entries();
  inline void set_allocated_append_entries(::floyd::CmdResponse_AppendEntries* append_entries);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_kv();
  inline void clear_has_kv();
  inline void set_has_kvs();
  inline void clear_has_kvs();
  inline void set_has_server_status();
  inline void clear_has_server_status();
  inline void set_has_request_vote();
  inline void clear_has_request_vote();
  inline void set_has_append_entries();
  inline void clear_has_append_entries();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* msg_;
  ::floyd::CmdResponse_Kv* kv_;
  ::floyd::CmdResponse_Kvs* kvs_;
  ::floyd::CmdResponse_ServerStatus* server_status_;
  ::floyd::CmdResponse_RequestVote* request_vote_;
  ::floyd::CmdResponse_AppendEntries* append_entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Entry

// required uint64 term = 2;
inline bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Entry::term() const {
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// optional bytes cmd = 3;
inline bool Entry::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& Entry::cmd() const {
  return *cmd_;
}
inline void Entry::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Entry::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Entry::set_cmd(const void* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* Entry::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Kv

// required bytes key = 1;
inline bool CmdRequest_Kv::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Kv::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Kv::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Kv::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Kv::key() const {
  return *key_;
}
inline void CmdRequest_Kv::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Kv::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Kv::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Kv::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Kv::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Kv::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 2;
inline bool CmdRequest_Kv::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Kv::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Kv::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Kv::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdRequest_Kv::value() const {
  return *value_;
}
inline void CmdRequest_Kv::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Kv::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Kv::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Kv::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdRequest_Kv::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Kv::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_User

// required bytes ip = 1;
inline bool CmdRequest_User::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_User::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_User::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_User::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_User::ip() const {
  return *ip_;
}
inline void CmdRequest_User::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_User::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_User::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_User::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_User::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_User::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool CmdRequest_User::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_User::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_User::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_User::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_User::port() const {
  return port_;
}
inline void CmdRequest_User::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_RequestVote

// required bytes ip = 1;
inline bool CmdRequest_RequestVote::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_RequestVote::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_RequestVote::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_RequestVote::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_RequestVote::ip() const {
  return *ip_;
}
inline void CmdRequest_RequestVote::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_RequestVote::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_RequestVote::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_RequestVote::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_RequestVote::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_RequestVote::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool CmdRequest_RequestVote::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_RequestVote::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_RequestVote::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_RequestVote::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_RequestVote::port() const {
  return port_;
}
inline void CmdRequest_RequestVote::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 term = 3;
inline bool CmdRequest_RequestVote::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_RequestVote::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_RequestVote::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_RequestVote::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::term() const {
  return term_;
}
inline void CmdRequest_RequestVote::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 last_log_term = 4;
inline bool CmdRequest_RequestVote::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_RequestVote::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_term() const {
  return last_log_term_;
}
inline void CmdRequest_RequestVote::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// required uint64 last_log_index = 5;
inline bool CmdRequest_RequestVote::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_RequestVote::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_index() const {
  return last_log_index_;
}
inline void CmdRequest_RequestVote::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_AppendEntries

// required bytes ip = 1;
inline bool CmdRequest_AppendEntries::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_AppendEntries::ip() const {
  return *ip_;
}
inline void CmdRequest_AppendEntries::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_AppendEntries::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_AppendEntries::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_AppendEntries::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_AppendEntries::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_AppendEntries::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool CmdRequest_AppendEntries::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_AppendEntries::port() const {
  return port_;
}
inline void CmdRequest_AppendEntries::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 term = 3;
inline bool CmdRequest_AppendEntries::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::term() const {
  return term_;
}
inline void CmdRequest_AppendEntries::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 prev_log_index = 4;
inline bool CmdRequest_AppendEntries::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_index() const {
  return prev_log_index_;
}
inline void CmdRequest_AppendEntries::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// required uint64 prev_log_term = 5;
inline bool CmdRequest_AppendEntries::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_term() const {
  return prev_log_term_;
}
inline void CmdRequest_AppendEntries::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// required uint64 commit_index = 6;
inline bool CmdRequest_AppendEntries::has_commit_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_commit_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::commit_index() const {
  return commit_index_;
}
inline void CmdRequest_AppendEntries::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// repeated .floyd.Entry entries = 7;
inline int CmdRequest_AppendEntries::entries_size() const {
  return entries_.size();
}
inline void CmdRequest_AppendEntries::clear_entries() {
  entries_.Clear();
}
inline const ::floyd::Entry& CmdRequest_AppendEntries::entries(int index) const {
  return entries_.Get(index);
}
inline ::floyd::Entry* CmdRequest_AppendEntries::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::floyd::Entry* CmdRequest_AppendEntries::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
CmdRequest_AppendEntries::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
CmdRequest_AppendEntries::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// CmdRequest_ServerStatus

// required int64 term = 1;
inline bool CmdRequest_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::term() const {
  return term_;
}
inline void CmdRequest_ServerStatus::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required int64 commit_index = 2;
inline bool CmdRequest_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::commit_index() const {
  return commit_index_;
}
inline void CmdRequest_ServerStatus::set_commit_index(::google::protobuf::int64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// optional bytes ip = 3;
inline bool CmdRequest_ServerStatus::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_ServerStatus::ip() const {
  return *ip_;
}
inline void CmdRequest_ServerStatus::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_ServerStatus::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_ServerStatus::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_ServerStatus::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_ServerStatus::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_ServerStatus::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool CmdRequest_ServerStatus::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_ServerStatus::port() const {
  return port_;
}
inline void CmdRequest_ServerStatus::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// CmdRequest

// required .floyd.Type type = 1;
inline bool CmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdRequest::type() const {
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdRequest::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .floyd.CmdRequest.Kv kv = 2;
inline bool CmdRequest::has_kv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest::set_has_kv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest::clear_has_kv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest::clear_kv() {
  if (kv_ != NULL) kv_->::floyd::CmdRequest_Kv::Clear();
  clear_has_kv();
}
inline const ::floyd::CmdRequest_Kv& CmdRequest::kv() const {
  return kv_ != NULL ? *kv_ : *default_instance_->kv_;
}
inline ::floyd::CmdRequest_Kv* CmdRequest::mutable_kv() {
  set_has_kv();
  if (kv_ == NULL) kv_ = new ::floyd::CmdRequest_Kv;
  return kv_;
}
inline ::floyd::CmdRequest_Kv* CmdRequest::release_kv() {
  clear_has_kv();
  ::floyd::CmdRequest_Kv* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_kv(::floyd::CmdRequest_Kv* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    set_has_kv();
  } else {
    clear_has_kv();
  }
}

// optional .floyd.CmdRequest.User user = 3;
inline bool CmdRequest::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest::clear_user() {
  if (user_ != NULL) user_->::floyd::CmdRequest_User::Clear();
  clear_has_user();
}
inline const ::floyd::CmdRequest_User& CmdRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::floyd::CmdRequest_User* CmdRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::floyd::CmdRequest_User;
  return user_;
}
inline ::floyd::CmdRequest_User* CmdRequest::release_user() {
  clear_has_user();
  ::floyd::CmdRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_user(::floyd::CmdRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .floyd.CmdRequest.RequestVote request_vote = 4;
inline bool CmdRequest::has_request_vote() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest::set_has_request_vote() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest::clear_has_request_vote() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest::clear_request_vote() {
  if (request_vote_ != NULL) request_vote_->::floyd::CmdRequest_RequestVote::Clear();
  clear_has_request_vote();
}
inline const ::floyd::CmdRequest_RequestVote& CmdRequest::request_vote() const {
  return request_vote_ != NULL ? *request_vote_ : *default_instance_->request_vote_;
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::mutable_request_vote() {
  set_has_request_vote();
  if (request_vote_ == NULL) request_vote_ = new ::floyd::CmdRequest_RequestVote;
  return request_vote_;
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::release_request_vote() {
  clear_has_request_vote();
  ::floyd::CmdRequest_RequestVote* temp = request_vote_;
  request_vote_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote) {
  delete request_vote_;
  request_vote_ = request_vote;
  if (request_vote) {
    set_has_request_vote();
  } else {
    clear_has_request_vote();
  }
}

// optional .floyd.CmdRequest.AppendEntries append_entries = 5;
inline bool CmdRequest::has_append_entries() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest::set_has_append_entries() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest::clear_has_append_entries() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest::clear_append_entries() {
  if (append_entries_ != NULL) append_entries_->::floyd::CmdRequest_AppendEntries::Clear();
  clear_has_append_entries();
}
inline const ::floyd::CmdRequest_AppendEntries& CmdRequest::append_entries() const {
  return append_entries_ != NULL ? *append_entries_ : *default_instance_->append_entries_;
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::mutable_append_entries() {
  set_has_append_entries();
  if (append_entries_ == NULL) append_entries_ = new ::floyd::CmdRequest_AppendEntries;
  return append_entries_;
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::release_append_entries() {
  clear_has_append_entries();
  ::floyd::CmdRequest_AppendEntries* temp = append_entries_;
  append_entries_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries) {
  delete append_entries_;
  append_entries_ = append_entries;
  if (append_entries) {
    set_has_append_entries();
  } else {
    clear_has_append_entries();
  }
}

// optional .floyd.CmdRequest.ServerStatus server_status = 6;
inline bool CmdRequest::has_server_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest::set_has_server_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdRequest_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdRequest_ServerStatus& CmdRequest::server_status() const {
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) server_status_ = new ::floyd::CmdRequest_ServerStatus;
  return server_status_;
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::release_server_status() {
  clear_has_server_status();
  ::floyd::CmdRequest_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
}

// -------------------------------------------------------------------

// CmdResponse_Kv

// optional bytes value = 1;
inline bool CmdResponse_Kv::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_Kv::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_Kv::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_Kv::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdResponse_Kv::value() const {
  return *value_;
}
inline void CmdResponse_Kv::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Kv::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Kv::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Kv::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdResponse_Kv::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Kv::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdResponse_Kvs

// repeated .floyd.CmdResponse.Kv kv = 1;
inline int CmdResponse_Kvs::kv_size() const {
  return kv_.size();
}
inline void CmdResponse_Kvs::clear_kv() {
  kv_.Clear();
}
inline const ::floyd::CmdResponse_Kv& CmdResponse_Kvs::kv(int index) const {
  return kv_.Get(index);
}
inline ::floyd::CmdResponse_Kv* CmdResponse_Kvs::mutable_kv(int index) {
  return kv_.Mutable(index);
}
inline ::floyd::CmdResponse_Kv* CmdResponse_Kvs::add_kv() {
  return kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::floyd::CmdResponse_Kv >&
CmdResponse_Kvs::kv() const {
  return kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::floyd::CmdResponse_Kv >*
CmdResponse_Kvs::mutable_kv() {
  return &kv_;
}

// -------------------------------------------------------------------

// CmdResponse_ServerStatus

// required uint64 term = 1;
inline bool CmdResponse_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::term() const {
  return term_;
}
inline void CmdResponse_ServerStatus::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 commit_index = 2;
inline bool CmdResponse_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::commit_index() const {
  return commit_index_;
}
inline void CmdResponse_ServerStatus::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// required bytes role = 3;
inline bool CmdResponse_ServerStatus::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& CmdResponse_ServerStatus::role() const {
  return *role_;
}
inline void CmdResponse_ServerStatus::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CmdResponse_ServerStatus::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CmdResponse_ServerStatus::set_role(const void* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* CmdResponse_ServerStatus::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes leader_ip = 4;
inline bool CmdResponse_ServerStatus::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_leader_ip() {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    leader_ip_->clear();
  }
  clear_has_leader_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::leader_ip() const {
  return *leader_ip_;
}
inline void CmdResponse_ServerStatus::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_leader_ip(const char* value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_leader_ip() {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  return leader_ip_;
}
inline ::std::string* CmdResponse_ServerStatus::release_leader_ip() {
  clear_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_ip_;
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_ip_;
  }
  if (leader_ip) {
    set_has_leader_ip();
    leader_ip_ = leader_ip;
  } else {
    clear_has_leader_ip();
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leader_port = 5;
inline bool CmdResponse_ServerStatus::has_leader_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::leader_port() const {
  return leader_port_;
}
inline void CmdResponse_ServerStatus::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
}

// optional bytes voted_for_ip = 6;
inline bool CmdResponse_ServerStatus::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_ip() {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_->clear();
  }
  clear_has_voted_for_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::voted_for_ip() const {
  return *voted_for_ip_;
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  return voted_for_ip_;
}
inline ::std::string* CmdResponse_ServerStatus::release_voted_for_ip() {
  clear_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_ip_;
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_ip_;
  }
  if (voted_for_ip) {
    set_has_voted_for_ip();
    voted_for_ip_ = voted_for_ip;
  } else {
    clear_has_voted_for_ip();
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 voted_for_port = 7;
inline bool CmdResponse_ServerStatus::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::voted_for_port() const {
  return voted_for_port_;
}
inline void CmdResponse_ServerStatus::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
}

// optional uint64 last_log_term = 8;
inline bool CmdResponse_ServerStatus::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_term() const {
  return last_log_term_;
}
inline void CmdResponse_ServerStatus::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// optional uint64 last_log_index = 9;
inline bool CmdResponse_ServerStatus::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_index() const {
  return last_log_index_;
}
inline void CmdResponse_ServerStatus::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// optional uint64 last_apply_index = 10;
inline bool CmdResponse_ServerStatus::has_last_apply_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_apply_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_has_last_apply_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_last_apply_index() {
  last_apply_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_apply_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_apply_index() const {
  return last_apply_index_;
}
inline void CmdResponse_ServerStatus::set_last_apply_index(::google::protobuf::uint64 value) {
  set_has_last_apply_index();
  last_apply_index_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_RequestVote

// required uint64 term = 1;
inline bool CmdResponse_RequestVote::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_RequestVote::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_RequestVote::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_RequestVote::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_RequestVote::term() const {
  return term_;
}
inline void CmdResponse_RequestVote::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_AppendEntries

// required uint64 term = 1;
inline bool CmdResponse_AppendEntries::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_AppendEntries::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_AppendEntries::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_AppendEntries::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntries::term() const {
  return term_;
}
inline void CmdResponse_AppendEntries::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// -------------------------------------------------------------------

// CmdResponse

// required .floyd.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdResponse::type() const {
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdResponse::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .floyd.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::floyd::StatusCode CmdResponse::code() const {
  return static_cast< ::floyd::StatusCode >(code_);
}
inline void CmdResponse::set_code(::floyd::StatusCode value) {
  assert(::floyd::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional bytes msg = 3;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  return *msg_;
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CmdResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .floyd.CmdResponse.Kv kv = 4;
inline bool CmdResponse::has_kv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_kv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_kv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_kv() {
  if (kv_ != NULL) kv_->::floyd::CmdResponse_Kv::Clear();
  clear_has_kv();
}
inline const ::floyd::CmdResponse_Kv& CmdResponse::kv() const {
  return kv_ != NULL ? *kv_ : *default_instance_->kv_;
}
inline ::floyd::CmdResponse_Kv* CmdResponse::mutable_kv() {
  set_has_kv();
  if (kv_ == NULL) kv_ = new ::floyd::CmdResponse_Kv;
  return kv_;
}
inline ::floyd::CmdResponse_Kv* CmdResponse::release_kv() {
  clear_has_kv();
  ::floyd::CmdResponse_Kv* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_kv(::floyd::CmdResponse_Kv* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    set_has_kv();
  } else {
    clear_has_kv();
  }
}

// optional .floyd.CmdResponse.Kvs kvs = 5;
inline bool CmdResponse::has_kvs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_kvs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_kvs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_kvs() {
  if (kvs_ != NULL) kvs_->::floyd::CmdResponse_Kvs::Clear();
  clear_has_kvs();
}
inline const ::floyd::CmdResponse_Kvs& CmdResponse::kvs() const {
  return kvs_ != NULL ? *kvs_ : *default_instance_->kvs_;
}
inline ::floyd::CmdResponse_Kvs* CmdResponse::mutable_kvs() {
  set_has_kvs();
  if (kvs_ == NULL) kvs_ = new ::floyd::CmdResponse_Kvs;
  return kvs_;
}
inline ::floyd::CmdResponse_Kvs* CmdResponse::release_kvs() {
  clear_has_kvs();
  ::floyd::CmdResponse_Kvs* temp = kvs_;
  kvs_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_kvs(::floyd::CmdResponse_Kvs* kvs) {
  delete kvs_;
  kvs_ = kvs;
  if (kvs) {
    set_has_kvs();
  } else {
    clear_has_kvs();
  }
}

// optional .floyd.CmdResponse.ServerStatus server_status = 6;
inline bool CmdResponse::has_server_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse::set_has_server_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdResponse_ServerStatus& CmdResponse::server_status() const {
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) server_status_ = new ::floyd::CmdResponse_ServerStatus;
  return server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::release_server_status() {
  clear_has_server_status();
  ::floyd::CmdResponse_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
}

// optional .floyd.CmdResponse.RequestVote request_vote = 7;
inline bool CmdResponse::has_request_vote() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse::set_has_request_vote() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse::clear_has_request_vote() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse::clear_request_vote() {
  if (request_vote_ != NULL) request_vote_->::floyd::CmdResponse_RequestVote::Clear();
  clear_has_request_vote();
}
inline const ::floyd::CmdResponse_RequestVote& CmdResponse::request_vote() const {
  return request_vote_ != NULL ? *request_vote_ : *default_instance_->request_vote_;
}
inline ::floyd::CmdResponse_RequestVote* CmdResponse::mutable_request_vote() {
  set_has_request_vote();
  if (request_vote_ == NULL) request_vote_ = new ::floyd::CmdResponse_RequestVote;
  return request_vote_;
}
inline ::floyd::CmdResponse_RequestVote* CmdResponse::release_request_vote() {
  clear_has_request_vote();
  ::floyd::CmdResponse_RequestVote* temp = request_vote_;
  request_vote_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_request_vote(::floyd::CmdResponse_RequestVote* request_vote) {
  delete request_vote_;
  request_vote_ = request_vote;
  if (request_vote) {
    set_has_request_vote();
  } else {
    clear_has_request_vote();
  }
}

// optional .floyd.CmdResponse.AppendEntries append_entries = 8;
inline bool CmdResponse::has_append_entries() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse::set_has_append_entries() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse::clear_has_append_entries() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse::clear_append_entries() {
  if (append_entries_ != NULL) append_entries_->::floyd::CmdResponse_AppendEntries::Clear();
  clear_has_append_entries();
}
inline const ::floyd::CmdResponse_AppendEntries& CmdResponse::append_entries() const {
  return append_entries_ != NULL ? *append_entries_ : *default_instance_->append_entries_;
}
inline ::floyd::CmdResponse_AppendEntries* CmdResponse::mutable_append_entries() {
  set_has_append_entries();
  if (append_entries_ == NULL) append_entries_ = new ::floyd::CmdResponse_AppendEntries;
  return append_entries_;
}
inline ::floyd::CmdResponse_AppendEntries* CmdResponse::release_append_entries() {
  clear_has_append_entries();
  ::floyd::CmdResponse_AppendEntries* temp = append_entries_;
  append_entries_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_append_entries(::floyd::CmdResponse_AppendEntries* append_entries) {
  delete append_entries_;
  append_entries_ = append_entries;
  if (append_entries) {
    set_has_append_entries();
  } else {
    clear_has_append_entries();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Type>() {
  return ::floyd::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::StatusCode>() {
  return ::floyd::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_floyd_2eproto__INCLUDED
