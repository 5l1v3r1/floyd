// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "floyd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace floyd {

namespace {

const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Entry_OpType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_Kv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_Kv_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_RequestVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_RequestVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_AppendEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_AppendEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRequest_ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRequest_ServerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_Kv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_Kv_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_Kvs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_Kvs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_RequestVoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_RequestVoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_AppendEntriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_AppendEntriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_ServerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_floyd_2eproto() {
  protobuf_AddDesc_floyd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "floyd.proto");
  GOOGLE_CHECK(file != NULL);
  Entry_descriptor_ = file->message_type(0);
  static const int Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, optype_),
  };
  Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entry));
  Entry_OpType_descriptor_ = Entry_descriptor_->enum_type(0);
  CmdRequest_descriptor_ = file->message_type(1);
  static const int CmdRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, request_vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, append_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, server_status_),
  };
  CmdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_descriptor_,
      CmdRequest::default_instance_,
      CmdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest));
  CmdRequest_Kv_descriptor_ = CmdRequest_descriptor_->nested_type(0);
  static const int CmdRequest_Kv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_Kv, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_Kv, value_),
  };
  CmdRequest_Kv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_Kv_descriptor_,
      CmdRequest_Kv::default_instance_,
      CmdRequest_Kv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_Kv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_Kv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest_Kv));
  CmdRequest_User_descriptor_ = CmdRequest_descriptor_->nested_type(1);
  static const int CmdRequest_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_User, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_User, port_),
  };
  CmdRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_User_descriptor_,
      CmdRequest_User::default_instance_,
      CmdRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest_User));
  CmdRequest_RequestVote_descriptor_ = CmdRequest_descriptor_->nested_type(2);
  static const int CmdRequest_RequestVote_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, last_log_term_),
  };
  CmdRequest_RequestVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_RequestVote_descriptor_,
      CmdRequest_RequestVote::default_instance_,
      CmdRequest_RequestVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_RequestVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest_RequestVote));
  CmdRequest_AppendEntries_descriptor_ = CmdRequest_descriptor_->nested_type(3);
  static const int CmdRequest_AppendEntries_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, prev_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, leader_commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, entries_),
  };
  CmdRequest_AppendEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_AppendEntries_descriptor_,
      CmdRequest_AppendEntries::default_instance_,
      CmdRequest_AppendEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_AppendEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest_AppendEntries));
  CmdRequest_ServerStatus_descriptor_ = CmdRequest_descriptor_->nested_type(4);
  static const int CmdRequest_ServerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, port_),
  };
  CmdRequest_ServerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRequest_ServerStatus_descriptor_,
      CmdRequest_ServerStatus::default_instance_,
      CmdRequest_ServerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRequest_ServerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRequest_ServerStatus));
  CmdResponse_descriptor_ = file->message_type(2);
  static const int CmdResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, request_vote_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, append_entries_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, server_status_),
  };
  CmdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_descriptor_,
      CmdResponse::default_instance_,
      CmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse));
  CmdResponse_Kv_descriptor_ = CmdResponse_descriptor_->nested_type(0);
  static const int CmdResponse_Kv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kv, value_),
  };
  CmdResponse_Kv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_Kv_descriptor_,
      CmdResponse_Kv::default_instance_,
      CmdResponse_Kv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse_Kv));
  CmdResponse_Kvs_descriptor_ = CmdResponse_descriptor_->nested_type(1);
  static const int CmdResponse_Kvs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kvs, kv_),
  };
  CmdResponse_Kvs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_Kvs_descriptor_,
      CmdResponse_Kvs::default_instance_,
      CmdResponse_Kvs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kvs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_Kvs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse_Kvs));
  CmdResponse_RequestVoteResponse_descriptor_ = CmdResponse_descriptor_->nested_type(2);
  static const int CmdResponse_RequestVoteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, vote_granted_),
  };
  CmdResponse_RequestVoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_RequestVoteResponse_descriptor_,
      CmdResponse_RequestVoteResponse::default_instance_,
      CmdResponse_RequestVoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse_RequestVoteResponse));
  CmdResponse_AppendEntriesResponse_descriptor_ = CmdResponse_descriptor_->nested_type(3);
  static const int CmdResponse_AppendEntriesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, last_log_index_),
  };
  CmdResponse_AppendEntriesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_AppendEntriesResponse_descriptor_,
      CmdResponse_AppendEntriesResponse::default_instance_,
      CmdResponse_AppendEntriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse_AppendEntriesResponse));
  CmdResponse_ServerStatus_descriptor_ = CmdResponse_descriptor_->nested_type(4);
  static const int CmdResponse_ServerStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, leader_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, leader_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, voted_for_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, voted_for_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_applied_),
  };
  CmdResponse_ServerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResponse_ServerStatus_descriptor_,
      CmdResponse_ServerStatus::default_instance_,
      CmdResponse_ServerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResponse_ServerStatus));
  Type_descriptor_ = file->enum_type(0);
  StatusCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_floyd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_descriptor_, &CmdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_Kv_descriptor_, &CmdRequest_Kv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_User_descriptor_, &CmdRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_RequestVote_descriptor_, &CmdRequest_RequestVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_AppendEntries_descriptor_, &CmdRequest_AppendEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRequest_ServerStatus_descriptor_, &CmdRequest_ServerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_descriptor_, &CmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_Kv_descriptor_, &CmdResponse_Kv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_Kvs_descriptor_, &CmdResponse_Kvs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_RequestVoteResponse_descriptor_, &CmdResponse_RequestVoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_AppendEntriesResponse_descriptor_, &CmdResponse_AppendEntriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResponse_ServerStatus_descriptor_, &CmdResponse_ServerStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_floyd_2eproto() {
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete CmdRequest::default_instance_;
  delete CmdRequest_reflection_;
  delete CmdRequest_Kv::default_instance_;
  delete CmdRequest_Kv_reflection_;
  delete CmdRequest_User::default_instance_;
  delete CmdRequest_User_reflection_;
  delete CmdRequest_RequestVote::default_instance_;
  delete CmdRequest_RequestVote_reflection_;
  delete CmdRequest_AppendEntries::default_instance_;
  delete CmdRequest_AppendEntries_reflection_;
  delete CmdRequest_ServerStatus::default_instance_;
  delete CmdRequest_ServerStatus_reflection_;
  delete CmdResponse::default_instance_;
  delete CmdResponse_reflection_;
  delete CmdResponse_Kv::default_instance_;
  delete CmdResponse_Kv_reflection_;
  delete CmdResponse_Kvs::default_instance_;
  delete CmdResponse_Kvs_reflection_;
  delete CmdResponse_RequestVoteResponse::default_instance_;
  delete CmdResponse_RequestVoteResponse_reflection_;
  delete CmdResponse_AppendEntriesResponse::default_instance_;
  delete CmdResponse_AppendEntriesResponse_reflection_;
  delete CmdResponse_ServerStatus::default_instance_;
  delete CmdResponse_ServerStatus_reflection_;
}

void protobuf_AddDesc_floyd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013floyd.proto\022\005floyd\"\204\001\n\005Entry\022\014\n\004term\030\001"
    " \002(\004\022\013\n\003key\030\002 \002(\t\022\r\n\005value\030\003 \001(\014\022#\n\006opty"
    "pe\030\004 \002(\0162\023.floyd.Entry.OpType\",\n\006OpType\022"
    "\t\n\005kRead\020\000\022\n\n\006kWrite\020\001\022\013\n\007kDelete\020\002\"\253\005\n\n"
    "CmdRequest\022\031\n\004type\030\001 \002(\0162\013.floyd.Type\022 \n"
    "\002kv\030\002 \001(\0132\024.floyd.CmdRequest.Kv\022$\n\004user\030"
    "\003 \001(\0132\026.floyd.CmdRequest.User\0223\n\014request"
    "_vote\030\004 \001(\0132\035.floyd.CmdRequest.RequestVo"
    "te\0227\n\016append_entries\030\005 \001(\0132\037.floyd.CmdRe"
    "quest.AppendEntries\0225\n\rserver_status\030\006 \001"
    "(\0132\036.floyd.CmdRequest.ServerStatus\032 \n\002Kv"
    "\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \001(\014\032 \n\004User\022\n\n\002"
    "ip\030\001 \002(\014\022\014\n\004port\030\002 \002(\005\032d\n\013RequestVote\022\014\n"
    "\004term\030\001 \002(\004\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002(\005\022\026\n"
    "\016last_log_index\030\004 \002(\004\022\025\n\rlast_log_term\030\005"
    " \002(\004\032\234\001\n\rAppendEntries\022\n\n\002ip\030\001 \002(\014\022\014\n\004po"
    "rt\030\002 \002(\005\022\014\n\004term\030\003 \002(\004\022\026\n\016prev_log_index"
    "\030\004 \002(\004\022\025\n\rprev_log_term\030\005 \002(\004\022\025\n\rleader_"
    "commit\030\006 \002(\004\022\035\n\007entries\030\007 \003(\0132\014.floyd.En"
    "try\032L\n\014ServerStatus\022\014\n\004term\030\001 \002(\003\022\024\n\014com"
    "mit_index\030\002 \002(\003\022\n\n\002ip\030\003 \001(\014\022\014\n\004port\030\004 \001("
    "\005\"\206\006\n\013CmdResponse\022\031\n\004type\030\001 \002(\0162\013.floyd."
    "Type\022\037\n\004code\030\002 \001(\0162\021.floyd.StatusCode\022\013\n"
    "\003msg\030\003 \001(\014\022!\n\002kv\030\004 \001(\0132\025.floyd.CmdRespon"
    "se.Kv\022#\n\003kvs\030\005 \001(\0132\026.floyd.CmdResponse.K"
    "vs\022@\n\020request_vote_res\030\006 \001(\0132&.floyd.Cmd"
    "Response.RequestVoteResponse\022D\n\022append_e"
    "ntries_res\030\007 \001(\0132(.floyd.CmdResponse.App"
    "endEntriesResponse\0226\n\rserver_status\030\010 \001("
    "\0132\037.floyd.CmdResponse.ServerStatus\032\023\n\002Kv"
    "\022\r\n\005value\030\001 \001(\014\032(\n\003Kvs\022!\n\002kv\030\001 \003(\0132\025.flo"
    "yd.CmdResponse.Kv\0329\n\023RequestVoteResponse"
    "\022\014\n\004term\030\001 \002(\004\022\024\n\014vote_granted\030\002 \002(\010\032N\n\025"
    "AppendEntriesResponse\022\014\n\004term\030\001 \002(\004\022\017\n\007s"
    "uccess\030\002 \002(\010\022\026\n\016last_log_index\030\003 \001(\004\032\333\001\n"
    "\014ServerStatus\022\014\n\004term\030\001 \002(\004\022\024\n\014commit_in"
    "dex\030\002 \002(\004\022\014\n\004role\030\003 \002(\014\022\021\n\tleader_ip\030\004 \001"
    "(\014\022\023\n\013leader_port\030\005 \001(\005\022\024\n\014voted_for_ip\030"
    "\006 \001(\014\022\026\n\016voted_for_port\030\007 \001(\005\022\025\n\rlast_lo"
    "g_term\030\010 \001(\004\022\026\n\016last_log_index\030\t \001(\004\022\024\n\014"
    "last_applied\030\n \001(\004*t\n\004Type\022\t\n\005kRead\020\000\022\n\n"
    "\006kWrite\020\001\022\017\n\013kDirtyWrite\020\002\022\013\n\007kDelete\020\003\022"
    "\020\n\014kRequestVote\020\010\022\022\n\016kAppendEntries\020\t\022\021\n"
    "\rkServerStatus\020\n*0\n\nStatusCode\022\007\n\003kOk\020\000\022"
    "\r\n\tkNotFound\020\001\022\n\n\006kError\020\002", 1786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "floyd.proto", &protobuf_RegisterTypes);
  Entry::default_instance_ = new Entry();
  CmdRequest::default_instance_ = new CmdRequest();
  CmdRequest_Kv::default_instance_ = new CmdRequest_Kv();
  CmdRequest_User::default_instance_ = new CmdRequest_User();
  CmdRequest_RequestVote::default_instance_ = new CmdRequest_RequestVote();
  CmdRequest_AppendEntries::default_instance_ = new CmdRequest_AppendEntries();
  CmdRequest_ServerStatus::default_instance_ = new CmdRequest_ServerStatus();
  CmdResponse::default_instance_ = new CmdResponse();
  CmdResponse_Kv::default_instance_ = new CmdResponse_Kv();
  CmdResponse_Kvs::default_instance_ = new CmdResponse_Kvs();
  CmdResponse_RequestVoteResponse::default_instance_ = new CmdResponse_RequestVoteResponse();
  CmdResponse_AppendEntriesResponse::default_instance_ = new CmdResponse_AppendEntriesResponse();
  CmdResponse_ServerStatus::default_instance_ = new CmdResponse_ServerStatus();
  Entry::default_instance_->InitAsDefaultInstance();
  CmdRequest::default_instance_->InitAsDefaultInstance();
  CmdRequest_Kv::default_instance_->InitAsDefaultInstance();
  CmdRequest_User::default_instance_->InitAsDefaultInstance();
  CmdRequest_RequestVote::default_instance_->InitAsDefaultInstance();
  CmdRequest_AppendEntries::default_instance_->InitAsDefaultInstance();
  CmdRequest_ServerStatus::default_instance_->InitAsDefaultInstance();
  CmdResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_Kv::default_instance_->InitAsDefaultInstance();
  CmdResponse_Kvs::default_instance_->InitAsDefaultInstance();
  CmdResponse_RequestVoteResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_AppendEntriesResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_ServerStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_floyd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_floyd_2eproto {
  StaticDescriptorInitializer_floyd_2eproto() {
    protobuf_AddDesc_floyd_2eproto();
  }
} static_descriptor_initializer_floyd_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCode_descriptor_;
}
bool StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Entry_OpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_OpType_descriptor_;
}
bool Entry_OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Entry_OpType Entry::kRead;
const Entry_OpType Entry::kWrite;
const Entry_OpType Entry::kDelete;
const Entry_OpType Entry::OpType_MIN;
const Entry_OpType Entry::OpType_MAX;
const int Entry::OpType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Entry::kTermFieldNumber;
const int Entry::kKeyFieldNumber;
const int Entry::kValueFieldNumber;
const int Entry::kOptypeFieldNumber;
#endif  // !_MSC_VER

Entry::Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entry::InitAsDefaultInstance() {
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  SharedDtor();
}

void Entry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New() const {
  return new Entry;
}

void Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // required .floyd.Entry.OpType optype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Entry_OpType_IsValid(value)) {
            set_optype(static_cast< ::floyd::Entry_OpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }

  // required .floyd.Entry.OpType optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // required .floyd.Entry.OpType optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required .floyd.Entry.OpType optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void Entry::Swap(Entry* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRequest_Kv::kKeyFieldNumber;
const int CmdRequest_Kv::kValueFieldNumber;
#endif  // !_MSC_VER

CmdRequest_Kv::CmdRequest_Kv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest_Kv::InitAsDefaultInstance() {
}

CmdRequest_Kv::CmdRequest_Kv(const CmdRequest_Kv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest_Kv::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest_Kv::~CmdRequest_Kv() {
  SharedDtor();
}

void CmdRequest_Kv::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CmdRequest_Kv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest_Kv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_Kv_descriptor_;
}

const CmdRequest_Kv& CmdRequest_Kv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest_Kv* CmdRequest_Kv::default_instance_ = NULL;

CmdRequest_Kv* CmdRequest_Kv::New() const {
  return new CmdRequest_Kv;
}

void CmdRequest_Kv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest_Kv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest_Kv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest_Kv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest_Kv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest_Kv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest_Kv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest_Kv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest_Kv::MergeFrom(const CmdRequest_Kv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest_Kv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_Kv::CopyFrom(const CmdRequest_Kv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_Kv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CmdRequest_Kv::Swap(CmdRequest_Kv* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest_Kv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_Kv_descriptor_;
  metadata.reflection = CmdRequest_Kv_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdRequest_User::kIpFieldNumber;
const int CmdRequest_User::kPortFieldNumber;
#endif  // !_MSC_VER

CmdRequest_User::CmdRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest_User::InitAsDefaultInstance() {
}

CmdRequest_User::CmdRequest_User(const CmdRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest_User::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest_User::~CmdRequest_User() {
  SharedDtor();
}

void CmdRequest_User::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CmdRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_User_descriptor_;
}

const CmdRequest_User& CmdRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest_User* CmdRequest_User::default_instance_ = NULL;

CmdRequest_User* CmdRequest_User::New() const {
  return new CmdRequest_User;
}

void CmdRequest_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest_User::MergeFrom(const CmdRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_User::CopyFrom(const CmdRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdRequest_User::Swap(CmdRequest_User* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_User_descriptor_;
  metadata.reflection = CmdRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdRequest_RequestVote::kTermFieldNumber;
const int CmdRequest_RequestVote::kIpFieldNumber;
const int CmdRequest_RequestVote::kPortFieldNumber;
const int CmdRequest_RequestVote::kLastLogIndexFieldNumber;
const int CmdRequest_RequestVote::kLastLogTermFieldNumber;
#endif  // !_MSC_VER

CmdRequest_RequestVote::CmdRequest_RequestVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest_RequestVote::InitAsDefaultInstance() {
}

CmdRequest_RequestVote::CmdRequest_RequestVote(const CmdRequest_RequestVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest_RequestVote::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  last_log_index_ = GOOGLE_ULONGLONG(0);
  last_log_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest_RequestVote::~CmdRequest_RequestVote() {
  SharedDtor();
}

void CmdRequest_RequestVote::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CmdRequest_RequestVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest_RequestVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_RequestVote_descriptor_;
}

const CmdRequest_RequestVote& CmdRequest_RequestVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest_RequestVote* CmdRequest_RequestVote::default_instance_ = NULL;

CmdRequest_RequestVote* CmdRequest_RequestVote::New() const {
  return new CmdRequest_RequestVote;
}

void CmdRequest_RequestVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    last_log_index_ = GOOGLE_ULONGLONG(0);
    last_log_term_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest_RequestVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_log_index;
        break;
      }

      // required uint64 last_log_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_log_term;
        break;
      }

      // required uint64 last_log_term = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest_RequestVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  // required uint64 last_log_term = 5;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_log_term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest_RequestVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  // required uint64 last_log_term = 5;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_log_term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest_RequestVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required uint64 last_log_index = 4;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // required uint64 last_log_term = 5;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest_RequestVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest_RequestVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest_RequestVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest_RequestVote::MergeFrom(const CmdRequest_RequestVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest_RequestVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_RequestVote::CopyFrom(const CmdRequest_RequestVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_RequestVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CmdRequest_RequestVote::Swap(CmdRequest_RequestVote* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest_RequestVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_RequestVote_descriptor_;
  metadata.reflection = CmdRequest_RequestVote_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdRequest_AppendEntries::kIpFieldNumber;
const int CmdRequest_AppendEntries::kPortFieldNumber;
const int CmdRequest_AppendEntries::kTermFieldNumber;
const int CmdRequest_AppendEntries::kPrevLogIndexFieldNumber;
const int CmdRequest_AppendEntries::kPrevLogTermFieldNumber;
const int CmdRequest_AppendEntries::kLeaderCommitFieldNumber;
const int CmdRequest_AppendEntries::kEntriesFieldNumber;
#endif  // !_MSC_VER

CmdRequest_AppendEntries::CmdRequest_AppendEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest_AppendEntries::InitAsDefaultInstance() {
}

CmdRequest_AppendEntries::CmdRequest_AppendEntries(const CmdRequest_AppendEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest_AppendEntries::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  leader_commit_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest_AppendEntries::~CmdRequest_AppendEntries() {
  SharedDtor();
}

void CmdRequest_AppendEntries::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CmdRequest_AppendEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest_AppendEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_AppendEntries_descriptor_;
}

const CmdRequest_AppendEntries& CmdRequest_AppendEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest_AppendEntries* CmdRequest_AppendEntries::default_instance_ = NULL;

CmdRequest_AppendEntries* CmdRequest_AppendEntries::New() const {
  return new CmdRequest_AppendEntries;
}

void CmdRequest_AppendEntries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    term_ = GOOGLE_ULONGLONG(0);
    prev_log_index_ = GOOGLE_ULONGLONG(0);
    prev_log_term_ = GOOGLE_ULONGLONG(0);
    leader_commit_ = GOOGLE_ULONGLONG(0);
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest_AppendEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // required uint64 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_index;
        break;
      }

      // required uint64 prev_log_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
          set_has_prev_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prev_log_term;
        break;
      }

      // required uint64 prev_log_term = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader_commit;
        break;
      }

      // required uint64 leader_commit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_commit_)));
          set_has_leader_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .floyd.Entry entries = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest_AppendEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // required uint64 prev_log_index = 4;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 5;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->prev_log_term(), output);
  }

  // required uint64 leader_commit = 6;
  if (has_leader_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader_commit(), output);
  }

  // repeated .floyd.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest_AppendEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // required uint64 prev_log_index = 4;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 5;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->prev_log_term(), target);
  }

  // required uint64 leader_commit = 6;
  if (has_leader_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader_commit(), target);
  }

  // repeated .floyd.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest_AppendEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 prev_log_index = 4;
    if (has_prev_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_index());
    }

    // required uint64 prev_log_term = 5;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_term());
    }

    // required uint64 leader_commit = 6;
    if (has_leader_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_commit());
    }

  }
  // repeated .floyd.Entry entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest_AppendEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest_AppendEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest_AppendEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest_AppendEntries::MergeFrom(const CmdRequest_AppendEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_leader_commit()) {
      set_leader_commit(from.leader_commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest_AppendEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_AppendEntries::CopyFrom(const CmdRequest_AppendEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_AppendEntries::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void CmdRequest_AppendEntries::Swap(CmdRequest_AppendEntries* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(term_, other->term_);
    std::swap(prev_log_index_, other->prev_log_index_);
    std::swap(prev_log_term_, other->prev_log_term_);
    std::swap(leader_commit_, other->leader_commit_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest_AppendEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_AppendEntries_descriptor_;
  metadata.reflection = CmdRequest_AppendEntries_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdRequest_ServerStatus::kTermFieldNumber;
const int CmdRequest_ServerStatus::kCommitIndexFieldNumber;
const int CmdRequest_ServerStatus::kIpFieldNumber;
const int CmdRequest_ServerStatus::kPortFieldNumber;
#endif  // !_MSC_VER

CmdRequest_ServerStatus::CmdRequest_ServerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest_ServerStatus::InitAsDefaultInstance() {
}

CmdRequest_ServerStatus::CmdRequest_ServerStatus(const CmdRequest_ServerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest_ServerStatus::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  commit_index_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest_ServerStatus::~CmdRequest_ServerStatus() {
  SharedDtor();
}

void CmdRequest_ServerStatus::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CmdRequest_ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest_ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_ServerStatus_descriptor_;
}

const CmdRequest_ServerStatus& CmdRequest_ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest_ServerStatus* CmdRequest_ServerStatus::default_instance_ = NULL;

CmdRequest_ServerStatus* CmdRequest_ServerStatus::New() const {
  return new CmdRequest_ServerStatus;
}

void CmdRequest_ServerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_LONGLONG(0);
    commit_index_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest_ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commit_index;
        break;
      }

      // required int64 commit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional bytes ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest_ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required int64 commit_index = 2;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->commit_index(), output);
  }

  // optional bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest_ServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required int64 commit_index = 2;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->commit_index(), target);
  }

  // optional bytes ip = 3;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest_ServerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required int64 commit_index = 2;
    if (has_commit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->commit_index());
    }

    // optional bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest_ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest_ServerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest_ServerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest_ServerStatus::MergeFrom(const CmdRequest_ServerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest_ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest_ServerStatus::CopyFrom(const CmdRequest_ServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest_ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdRequest_ServerStatus::Swap(CmdRequest_ServerStatus* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(commit_index_, other->commit_index_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest_ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_ServerStatus_descriptor_;
  metadata.reflection = CmdRequest_ServerStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdRequest::kTypeFieldNumber;
const int CmdRequest::kKvFieldNumber;
const int CmdRequest::kUserFieldNumber;
const int CmdRequest::kRequestVoteFieldNumber;
const int CmdRequest::kAppendEntriesFieldNumber;
const int CmdRequest::kServerStatusFieldNumber;
#endif  // !_MSC_VER

CmdRequest::CmdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdRequest::InitAsDefaultInstance() {
  kv_ = const_cast< ::floyd::CmdRequest_Kv*>(&::floyd::CmdRequest_Kv::default_instance());
  user_ = const_cast< ::floyd::CmdRequest_User*>(&::floyd::CmdRequest_User::default_instance());
  request_vote_ = const_cast< ::floyd::CmdRequest_RequestVote*>(&::floyd::CmdRequest_RequestVote::default_instance());
  append_entries_ = const_cast< ::floyd::CmdRequest_AppendEntries*>(&::floyd::CmdRequest_AppendEntries::default_instance());
  server_status_ = const_cast< ::floyd::CmdRequest_ServerStatus*>(&::floyd::CmdRequest_ServerStatus::default_instance());
}

CmdRequest::CmdRequest(const CmdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  kv_ = NULL;
  user_ = NULL;
  request_vote_ = NULL;
  append_entries_ = NULL;
  server_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRequest::~CmdRequest() {
  SharedDtor();
}

void CmdRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kv_;
    delete user_;
    delete request_vote_;
    delete append_entries_;
    delete server_status_;
  }
}

void CmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRequest_descriptor_;
}

const CmdRequest& CmdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdRequest* CmdRequest::default_instance_ = NULL;

CmdRequest* CmdRequest::New() const {
  return new CmdRequest;
}

void CmdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_kv()) {
      if (kv_ != NULL) kv_->::floyd::CmdRequest_Kv::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::floyd::CmdRequest_User::Clear();
    }
    if (has_request_vote()) {
      if (request_vote_ != NULL) request_vote_->::floyd::CmdRequest_RequestVote::Clear();
    }
    if (has_append_entries()) {
      if (append_entries_ != NULL) append_entries_->::floyd::CmdRequest_AppendEntries::Clear();
    }
    if (has_server_status()) {
      if (server_status_ != NULL) server_status_->::floyd::CmdRequest_ServerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Type_IsValid(value)) {
            set_type(static_cast< ::floyd::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kv;
        break;
      }

      // optional .floyd.CmdRequest.Kv kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .floyd.CmdRequest.User user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request_vote;
        break;
      }

      // optional .floyd.CmdRequest.RequestVote request_vote = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_vote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_vote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_append_entries;
        break;
      }

      // optional .floyd.CmdRequest.AppendEntries append_entries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_status;
        break;
      }

      // optional .floyd.CmdRequest.ServerStatus server_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .floyd.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .floyd.CmdRequest.Kv kv = 2;
  if (has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(), output);
  }

  // optional .floyd.CmdRequest.User user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .floyd.CmdRequest.RequestVote request_vote = 4;
  if (has_request_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request_vote(), output);
  }

  // optional .floyd.CmdRequest.AppendEntries append_entries = 5;
  if (has_append_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->append_entries(), output);
  }

  // optional .floyd.CmdRequest.ServerStatus server_status = 6;
  if (has_server_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->server_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .floyd.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .floyd.CmdRequest.Kv kv = 2;
  if (has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(), target);
  }

  // optional .floyd.CmdRequest.User user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .floyd.CmdRequest.RequestVote request_vote = 4;
  if (has_request_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request_vote(), target);
  }

  // optional .floyd.CmdRequest.AppendEntries append_entries = 5;
  if (has_append_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->append_entries(), target);
  }

  // optional .floyd.CmdRequest.ServerStatus server_status = 6;
  if (has_server_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->server_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .floyd.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .floyd.CmdRequest.Kv kv = 2;
    if (has_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kv());
    }

    // optional .floyd.CmdRequest.User user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .floyd.CmdRequest.RequestVote request_vote = 4;
    if (has_request_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_vote());
    }

    // optional .floyd.CmdRequest.AppendEntries append_entries = 5;
    if (has_append_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_entries());
    }

    // optional .floyd.CmdRequest.ServerStatus server_status = 6;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRequest::MergeFrom(const CmdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kv()) {
      mutable_kv()->::floyd::CmdRequest_Kv::MergeFrom(from.kv());
    }
    if (from.has_user()) {
      mutable_user()->::floyd::CmdRequest_User::MergeFrom(from.user());
    }
    if (from.has_request_vote()) {
      mutable_request_vote()->::floyd::CmdRequest_RequestVote::MergeFrom(from.request_vote());
    }
    if (from.has_append_entries()) {
      mutable_append_entries()->::floyd::CmdRequest_AppendEntries::MergeFrom(from.append_entries());
    }
    if (from.has_server_status()) {
      mutable_server_status()->::floyd::CmdRequest_ServerStatus::MergeFrom(from.server_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRequest::CopyFrom(const CmdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kv()) {
    if (!this->kv().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_request_vote()) {
    if (!this->request_vote().IsInitialized()) return false;
  }
  if (has_append_entries()) {
    if (!this->append_entries().IsInitialized()) return false;
  }
  if (has_server_status()) {
    if (!this->server_status().IsInitialized()) return false;
  }
  return true;
}

void CmdRequest::Swap(CmdRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(kv_, other->kv_);
    std::swap(user_, other->user_);
    std::swap(request_vote_, other->request_vote_);
    std::swap(append_entries_, other->append_entries_);
    std::swap(server_status_, other->server_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRequest_descriptor_;
  metadata.reflection = CmdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdResponse_Kv::kValueFieldNumber;
#endif  // !_MSC_VER

CmdResponse_Kv::CmdResponse_Kv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse_Kv::InitAsDefaultInstance() {
}

CmdResponse_Kv::CmdResponse_Kv(const CmdResponse_Kv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse_Kv::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_Kv::~CmdResponse_Kv() {
  SharedDtor();
}

void CmdResponse_Kv::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CmdResponse_Kv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_Kv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_Kv_descriptor_;
}

const CmdResponse_Kv& CmdResponse_Kv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_Kv* CmdResponse_Kv::default_instance_ = NULL;

CmdResponse_Kv* CmdResponse_Kv::New() const {
  return new CmdResponse_Kv;
}

void CmdResponse_Kv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse_Kv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse_Kv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse_Kv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse_Kv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_Kv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse_Kv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse_Kv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse_Kv::MergeFrom(const CmdResponse_Kv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse_Kv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_Kv::CopyFrom(const CmdResponse_Kv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_Kv::IsInitialized() const {

  return true;
}

void CmdResponse_Kv::Swap(CmdResponse_Kv* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse_Kv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_Kv_descriptor_;
  metadata.reflection = CmdResponse_Kv_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdResponse_Kvs::kKvFieldNumber;
#endif  // !_MSC_VER

CmdResponse_Kvs::CmdResponse_Kvs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse_Kvs::InitAsDefaultInstance() {
}

CmdResponse_Kvs::CmdResponse_Kvs(const CmdResponse_Kvs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse_Kvs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_Kvs::~CmdResponse_Kvs() {
  SharedDtor();
}

void CmdResponse_Kvs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResponse_Kvs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_Kvs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_Kvs_descriptor_;
}

const CmdResponse_Kvs& CmdResponse_Kvs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_Kvs* CmdResponse_Kvs::default_instance_ = NULL;

CmdResponse_Kvs* CmdResponse_Kvs::New() const {
  return new CmdResponse_Kvs;
}

void CmdResponse_Kvs::Clear() {
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse_Kvs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .floyd.CmdResponse.Kv kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse_Kvs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .floyd.CmdResponse.Kv kv = 1;
  for (int i = 0; i < this->kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse_Kvs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .floyd.CmdResponse.Kv kv = 1;
  for (int i = 0; i < this->kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse_Kvs::ByteSize() const {
  int total_size = 0;

  // repeated .floyd.CmdResponse.Kv kv = 1;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_Kvs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse_Kvs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse_Kvs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse_Kvs::MergeFrom(const CmdResponse_Kvs& from) {
  GOOGLE_CHECK_NE(&from, this);
  kv_.MergeFrom(from.kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse_Kvs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_Kvs::CopyFrom(const CmdResponse_Kvs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_Kvs::IsInitialized() const {

  return true;
}

void CmdResponse_Kvs::Swap(CmdResponse_Kvs* other) {
  if (other != this) {
    kv_.Swap(&other->kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse_Kvs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_Kvs_descriptor_;
  metadata.reflection = CmdResponse_Kvs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdResponse_RequestVoteResponse::kTermFieldNumber;
const int CmdResponse_RequestVoteResponse::kVoteGrantedFieldNumber;
#endif  // !_MSC_VER

CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse_RequestVoteResponse::InitAsDefaultInstance() {
}

CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse_RequestVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  vote_granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_RequestVoteResponse::~CmdResponse_RequestVoteResponse() {
  SharedDtor();
}

void CmdResponse_RequestVoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResponse_RequestVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_RequestVoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_RequestVoteResponse_descriptor_;
}

const CmdResponse_RequestVoteResponse& CmdResponse_RequestVoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_RequestVoteResponse* CmdResponse_RequestVoteResponse::default_instance_ = NULL;

CmdResponse_RequestVoteResponse* CmdResponse_RequestVoteResponse::New() const {
  return new CmdResponse_RequestVoteResponse;
}

void CmdResponse_RequestVoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    vote_granted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse_RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_granted;
        break;
      }

      // required bool vote_granted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
          set_has_vote_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse_RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse_RequestVoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse_RequestVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool vote_granted = 2;
    if (has_vote_granted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse_RequestVoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse_RequestVoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse_RequestVoteResponse::MergeFrom(const CmdResponse_RequestVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_vote_granted()) {
      set_vote_granted(from.vote_granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse_RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_RequestVoteResponse::CopyFrom(const CmdResponse_RequestVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdResponse_RequestVoteResponse::Swap(CmdResponse_RequestVoteResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(vote_granted_, other->vote_granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse_RequestVoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_RequestVoteResponse_descriptor_;
  metadata.reflection = CmdResponse_RequestVoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdResponse_AppendEntriesResponse::kTermFieldNumber;
const int CmdResponse_AppendEntriesResponse::kSuccessFieldNumber;
const int CmdResponse_AppendEntriesResponse::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse_AppendEntriesResponse::InitAsDefaultInstance() {
}

CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse_AppendEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  last_log_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_AppendEntriesResponse::~CmdResponse_AppendEntriesResponse() {
  SharedDtor();
}

void CmdResponse_AppendEntriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResponse_AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_AppendEntriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_AppendEntriesResponse_descriptor_;
}

const CmdResponse_AppendEntriesResponse& CmdResponse_AppendEntriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_AppendEntriesResponse* CmdResponse_AppendEntriesResponse::default_instance_ = NULL;

CmdResponse_AppendEntriesResponse* CmdResponse_AppendEntriesResponse::New() const {
  return new CmdResponse_AppendEntriesResponse;
}

void CmdResponse_AppendEntriesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    success_ = false;
    last_log_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse_AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse_AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse_AppendEntriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse_AppendEntriesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_log_index = 3;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse_AppendEntriesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse_AppendEntriesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const CmdResponse_AppendEntriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const CmdResponse_AppendEntriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdResponse_AppendEntriesResponse::Swap(CmdResponse_AppendEntriesResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse_AppendEntriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_AppendEntriesResponse_descriptor_;
  metadata.reflection = CmdResponse_AppendEntriesResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdResponse_ServerStatus::kTermFieldNumber;
const int CmdResponse_ServerStatus::kCommitIndexFieldNumber;
const int CmdResponse_ServerStatus::kRoleFieldNumber;
const int CmdResponse_ServerStatus::kLeaderIpFieldNumber;
const int CmdResponse_ServerStatus::kLeaderPortFieldNumber;
const int CmdResponse_ServerStatus::kVotedForIpFieldNumber;
const int CmdResponse_ServerStatus::kVotedForPortFieldNumber;
const int CmdResponse_ServerStatus::kLastLogTermFieldNumber;
const int CmdResponse_ServerStatus::kLastLogIndexFieldNumber;
const int CmdResponse_ServerStatus::kLastAppliedFieldNumber;
#endif  // !_MSC_VER

CmdResponse_ServerStatus::CmdResponse_ServerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse_ServerStatus::InitAsDefaultInstance() {
}

CmdResponse_ServerStatus::CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse_ServerStatus::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  commit_index_ = GOOGLE_ULONGLONG(0);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_port_ = 0;
  voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voted_for_port_ = 0;
  last_log_term_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  last_applied_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_ServerStatus::~CmdResponse_ServerStatus() {
  SharedDtor();
}

void CmdResponse_ServerStatus::SharedDtor() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_ip_;
  }
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_ip_;
  }
  if (this != default_instance_) {
  }
}

void CmdResponse_ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_ServerStatus_descriptor_;
}

const CmdResponse_ServerStatus& CmdResponse_ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_ServerStatus* CmdResponse_ServerStatus::default_instance_ = NULL;

CmdResponse_ServerStatus* CmdResponse_ServerStatus::New() const {
  return new CmdResponse_ServerStatus;
}

void CmdResponse_ServerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    commit_index_ = GOOGLE_ULONGLONG(0);
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    if (has_leader_ip()) {
      if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
        leader_ip_->clear();
      }
    }
    leader_port_ = 0;
    if (has_voted_for_ip()) {
      if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
        voted_for_ip_->clear();
      }
    }
    voted_for_port_ = 0;
    last_log_term_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_log_index_ = GOOGLE_ULONGLONG(0);
    last_applied_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse_ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commit_index;
        break;
      }

      // required uint64 commit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // required bytes role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leader_ip;
        break;
      }

      // optional bytes leader_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader_port;
        break;
      }

      // optional int32 leader_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_port_)));
          set_has_leader_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_voted_for_ip;
        break;
      }

      // optional bytes voted_for_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voted_for_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voted_for_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_voted_for_port;
        break;
      }

      // optional int32 voted_for_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voted_for_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voted_for_port_)));
          set_has_voted_for_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_log_term;
        break;
      }

      // optional uint64 last_log_term = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_applied;
        break;
      }

      // optional uint64 last_applied = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_applied_)));
          set_has_last_applied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse_ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 commit_index = 2;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_index(), output);
  }

  // required bytes role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->role(), output);
  }

  // optional bytes leader_ip = 4;
  if (has_leader_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->leader_ip(), output);
  }

  // optional int32 leader_port = 5;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_port(), output);
  }

  // optional bytes voted_for_ip = 6;
  if (has_voted_for_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->voted_for_ip(), output);
  }

  // optional int32 voted_for_port = 7;
  if (has_voted_for_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->voted_for_port(), output);
  }

  // optional uint64 last_log_term = 8;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_log_term(), output);
  }

  // optional uint64 last_log_index = 9;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_log_index(), output);
  }

  // optional uint64 last_applied = 10;
  if (has_last_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->last_applied(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse_ServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 commit_index = 2;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_index(), target);
  }

  // required bytes role = 3;
  if (has_role()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->role(), target);
  }

  // optional bytes leader_ip = 4;
  if (has_leader_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leader_ip(), target);
  }

  // optional int32 leader_port = 5;
  if (has_leader_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_port(), target);
  }

  // optional bytes voted_for_ip = 6;
  if (has_voted_for_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->voted_for_ip(), target);
  }

  // optional int32 voted_for_port = 7;
  if (has_voted_for_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->voted_for_port(), target);
  }

  // optional uint64 last_log_term = 8;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_log_term(), target);
  }

  // optional uint64 last_log_index = 9;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_log_index(), target);
  }

  // optional uint64 last_applied = 10;
  if (has_last_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->last_applied(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse_ServerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 commit_index = 2;
    if (has_commit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_index());
    }

    // required bytes role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->role());
    }

    // optional bytes leader_ip = 4;
    if (has_leader_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_ip());
    }

    // optional int32 leader_port = 5;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_port());
    }

    // optional bytes voted_for_ip = 6;
    if (has_voted_for_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voted_for_ip());
    }

    // optional int32 voted_for_port = 7;
    if (has_voted_for_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voted_for_port());
    }

    // optional uint64 last_log_term = 8;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_log_index = 9;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional uint64 last_applied = 10;
    if (has_last_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_applied());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse_ServerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse_ServerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse_ServerStatus::MergeFrom(const CmdResponse_ServerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_leader_ip()) {
      set_leader_ip(from.leader_ip());
    }
    if (from.has_leader_port()) {
      set_leader_port(from.leader_port());
    }
    if (from.has_voted_for_ip()) {
      set_voted_for_ip(from.voted_for_ip());
    }
    if (from.has_voted_for_port()) {
      set_voted_for_port(from.voted_for_port());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_last_applied()) {
      set_last_applied(from.last_applied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse_ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_ServerStatus::CopyFrom(const CmdResponse_ServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CmdResponse_ServerStatus::Swap(CmdResponse_ServerStatus* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(commit_index_, other->commit_index_);
    std::swap(role_, other->role_);
    std::swap(leader_ip_, other->leader_ip_);
    std::swap(leader_port_, other->leader_port_);
    std::swap(voted_for_ip_, other->voted_for_ip_);
    std::swap(voted_for_port_, other->voted_for_port_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(last_applied_, other->last_applied_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse_ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_ServerStatus_descriptor_;
  metadata.reflection = CmdResponse_ServerStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdResponse::kTypeFieldNumber;
const int CmdResponse::kCodeFieldNumber;
const int CmdResponse::kMsgFieldNumber;
const int CmdResponse::kKvFieldNumber;
const int CmdResponse::kKvsFieldNumber;
const int CmdResponse::kRequestVoteResFieldNumber;
const int CmdResponse::kAppendEntriesResFieldNumber;
const int CmdResponse::kServerStatusFieldNumber;
#endif  // !_MSC_VER

CmdResponse::CmdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdResponse::InitAsDefaultInstance() {
  kv_ = const_cast< ::floyd::CmdResponse_Kv*>(&::floyd::CmdResponse_Kv::default_instance());
  kvs_ = const_cast< ::floyd::CmdResponse_Kvs*>(&::floyd::CmdResponse_Kvs::default_instance());
  request_vote_res_ = const_cast< ::floyd::CmdResponse_RequestVoteResponse*>(&::floyd::CmdResponse_RequestVoteResponse::default_instance());
  append_entries_res_ = const_cast< ::floyd::CmdResponse_AppendEntriesResponse*>(&::floyd::CmdResponse_AppendEntriesResponse::default_instance());
  server_status_ = const_cast< ::floyd::CmdResponse_ServerStatus*>(&::floyd::CmdResponse_ServerStatus::default_instance());
}

CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kv_ = NULL;
  kvs_ = NULL;
  request_vote_res_ = NULL;
  append_entries_res_ = NULL;
  server_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse::~CmdResponse() {
  SharedDtor();
}

void CmdResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete kv_;
    delete kvs_;
    delete request_vote_res_;
    delete append_entries_res_;
    delete server_status_;
  }
}

void CmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_descriptor_;
}

const CmdResponse& CmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse* CmdResponse::default_instance_ = NULL;

CmdResponse* CmdResponse::New() const {
  return new CmdResponse;
}

void CmdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_kv()) {
      if (kv_ != NULL) kv_->::floyd::CmdResponse_Kv::Clear();
    }
    if (has_kvs()) {
      if (kvs_ != NULL) kvs_->::floyd::CmdResponse_Kvs::Clear();
    }
    if (has_request_vote_res()) {
      if (request_vote_res_ != NULL) request_vote_res_->::floyd::CmdResponse_RequestVoteResponse::Clear();
    }
    if (has_append_entries_res()) {
      if (append_entries_res_ != NULL) append_entries_res_->::floyd::CmdResponse_AppendEntriesResponse::Clear();
    }
    if (has_server_status()) {
      if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Type_IsValid(value)) {
            set_type(static_cast< ::floyd::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional .floyd.StatusCode code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::StatusCode_IsValid(value)) {
            set_code(static_cast< ::floyd::StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kv;
        break;
      }

      // optional .floyd.CmdResponse.Kv kv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvs;
        break;
      }

      // optional .floyd.CmdResponse.Kvs kvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_request_vote_res;
        break;
      }

      // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_vote_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_vote_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_append_entries_res;
        break;
      }

      // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append_entries_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_entries_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_server_status;
        break;
      }

      // optional .floyd.CmdResponse.ServerStatus server_status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .floyd.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .floyd.StatusCode code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  // optional .floyd.CmdResponse.Kv kv = 4;
  if (has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kv(), output);
  }

  // optional .floyd.CmdResponse.Kvs kvs = 5;
  if (has_kvs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kvs(), output);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 6;
  if (has_request_vote_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_vote_res(), output);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 7;
  if (has_append_entries_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->append_entries_res(), output);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 8;
  if (has_server_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->server_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .floyd.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .floyd.StatusCode code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // optional .floyd.CmdResponse.Kv kv = 4;
  if (has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kv(), target);
  }

  // optional .floyd.CmdResponse.Kvs kvs = 5;
  if (has_kvs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kvs(), target);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 6;
  if (has_request_vote_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->request_vote_res(), target);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 7;
  if (has_append_entries_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->append_entries_res(), target);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 8;
  if (has_server_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->server_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .floyd.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .floyd.StatusCode code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .floyd.CmdResponse.Kv kv = 4;
    if (has_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kv());
    }

    // optional .floyd.CmdResponse.Kvs kvs = 5;
    if (has_kvs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs());
    }

    // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 6;
    if (has_request_vote_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_vote_res());
    }

    // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 7;
    if (has_append_entries_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append_entries_res());
    }

    // optional .floyd.CmdResponse.ServerStatus server_status = 8;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_kv()) {
      mutable_kv()->::floyd::CmdResponse_Kv::MergeFrom(from.kv());
    }
    if (from.has_kvs()) {
      mutable_kvs()->::floyd::CmdResponse_Kvs::MergeFrom(from.kvs());
    }
    if (from.has_request_vote_res()) {
      mutable_request_vote_res()->::floyd::CmdResponse_RequestVoteResponse::MergeFrom(from.request_vote_res());
    }
    if (from.has_append_entries_res()) {
      mutable_append_entries_res()->::floyd::CmdResponse_AppendEntriesResponse::MergeFrom(from.append_entries_res());
    }
    if (from.has_server_status()) {
      mutable_server_status()->::floyd::CmdResponse_ServerStatus::MergeFrom(from.server_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_request_vote_res()) {
    if (!this->request_vote_res().IsInitialized()) return false;
  }
  if (has_append_entries_res()) {
    if (!this->append_entries_res().IsInitialized()) return false;
  }
  if (has_server_status()) {
    if (!this->server_status().IsInitialized()) return false;
  }
  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(kv_, other->kv_);
    std::swap(kvs_, other->kvs_);
    std::swap(request_vote_res_, other->request_vote_res_);
    std::swap(append_entries_res_, other->append_entries_res_);
    std::swap(server_status_, other->server_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_descriptor_;
  metadata.reflection = CmdResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

// @@protoc_insertion_point(global_scope)
