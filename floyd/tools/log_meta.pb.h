// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/log_meta.proto

#ifndef PROTOBUF_raft_2flog_5fmeta_2eproto__INCLUDED
#define PROTOBUF_raft_2flog_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace floyd {
namespace raft {
namespace log {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2flog_5fmeta_2eproto();
void protobuf_AssignDesc_raft_2flog_5fmeta_2eproto();
void protobuf_ShutdownFile_raft_2flog_5fmeta_2eproto();

class MetaData;
class FileLogMetaData;

// ===================================================================

class MetaData : public ::google::protobuf::Message {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaData& default_instance();

  void Swap(MetaData* other);

  // implements Message ----------------------------------------------

  MetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 current_term = 1;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  inline ::google::protobuf::uint64 current_term() const;
  inline void set_current_term(::google::protobuf::uint64 value);

  // required bytes voted_for_ip = 2;
  inline bool has_voted_for_ip() const;
  inline void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 2;
  inline const ::std::string& voted_for_ip() const;
  inline void set_voted_for_ip(const ::std::string& value);
  inline void set_voted_for_ip(const char* value);
  inline void set_voted_for_ip(const void* value, size_t size);
  inline ::std::string* mutable_voted_for_ip();
  inline ::std::string* release_voted_for_ip();
  inline void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // required int32 voted_for_port = 3;
  inline bool has_voted_for_port() const;
  inline void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 3;
  inline ::google::protobuf::int32 voted_for_port() const;
  inline void set_voted_for_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.raft.log.MetaData)
 private:
  inline void set_has_current_term();
  inline void clear_has_current_term();
  inline void set_has_voted_for_ip();
  inline void clear_has_voted_for_ip();
  inline void set_has_voted_for_port();
  inline void clear_has_voted_for_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 current_term_;
  ::std::string* voted_for_ip_;
  ::google::protobuf::int32 voted_for_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2flog_5fmeta_2eproto();
  friend void protobuf_AssignDesc_raft_2flog_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_raft_2flog_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaData* default_instance_;
};
// -------------------------------------------------------------------

class FileLogMetaData : public ::google::protobuf::Message {
 public:
  FileLogMetaData();
  virtual ~FileLogMetaData();

  FileLogMetaData(const FileLogMetaData& from);

  inline FileLogMetaData& operator=(const FileLogMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileLogMetaData& default_instance();

  void Swap(FileLogMetaData* other);

  // implements Message ----------------------------------------------

  FileLogMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileLogMetaData& from);
  void MergeFrom(const FileLogMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .floyd.raft.log.MetaData raft_metadata = 1;
  inline bool has_raft_metadata() const;
  inline void clear_raft_metadata();
  static const int kRaftMetadataFieldNumber = 1;
  inline const ::floyd::raft::log::MetaData& raft_metadata() const;
  inline ::floyd::raft::log::MetaData* mutable_raft_metadata();
  inline ::floyd::raft::log::MetaData* release_raft_metadata();
  inline void set_allocated_raft_metadata(::floyd::raft::log::MetaData* raft_metadata);

  // required uint64 entries_start = 2 [default = 1];
  inline bool has_entries_start() const;
  inline void clear_entries_start();
  static const int kEntriesStartFieldNumber = 2;
  inline ::google::protobuf::uint64 entries_start() const;
  inline void set_entries_start(::google::protobuf::uint64 value);

  // required uint64 entries_end = 3 [default = 0];
  inline bool has_entries_end() const;
  inline void clear_entries_end();
  static const int kEntriesEndFieldNumber = 3;
  inline ::google::protobuf::uint64 entries_end() const;
  inline void set_entries_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.raft.log.FileLogMetaData)
 private:
  inline void set_has_raft_metadata();
  inline void clear_has_raft_metadata();
  inline void set_has_entries_start();
  inline void clear_has_entries_start();
  inline void set_has_entries_end();
  inline void clear_has_entries_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::floyd::raft::log::MetaData* raft_metadata_;
  ::google::protobuf::uint64 entries_start_;
  ::google::protobuf::uint64 entries_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2flog_5fmeta_2eproto();
  friend void protobuf_AssignDesc_raft_2flog_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_raft_2flog_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static FileLogMetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// MetaData

// required uint64 current_term = 1;
inline bool MetaData::has_current_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaData::set_has_current_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaData::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaData::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::uint64 MetaData::current_term() const {
  return current_term_;
}
inline void MetaData::set_current_term(::google::protobuf::uint64 value) {
  set_has_current_term();
  current_term_ = value;
}

// required bytes voted_for_ip = 2;
inline bool MetaData::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaData::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaData::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaData::clear_voted_for_ip() {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_->clear();
  }
  clear_has_voted_for_ip();
}
inline const ::std::string& MetaData::voted_for_ip() const {
  return *voted_for_ip_;
}
inline void MetaData::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void MetaData::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void MetaData::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaData::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  return voted_for_ip_;
}
inline ::std::string* MetaData::release_voted_for_ip() {
  clear_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_ip_;
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaData::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_ip_;
  }
  if (voted_for_ip) {
    set_has_voted_for_ip();
    voted_for_ip_ = voted_for_ip;
  } else {
    clear_has_voted_for_ip();
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 voted_for_port = 3;
inline bool MetaData::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetaData::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetaData::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetaData::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 MetaData::voted_for_port() const {
  return voted_for_port_;
}
inline void MetaData::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
}

// -------------------------------------------------------------------

// FileLogMetaData

// required .floyd.raft.log.MetaData raft_metadata = 1;
inline bool FileLogMetaData::has_raft_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileLogMetaData::set_has_raft_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileLogMetaData::clear_has_raft_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileLogMetaData::clear_raft_metadata() {
  if (raft_metadata_ != NULL) raft_metadata_->::floyd::raft::log::MetaData::Clear();
  clear_has_raft_metadata();
}
inline const ::floyd::raft::log::MetaData& FileLogMetaData::raft_metadata() const {
  return raft_metadata_ != NULL ? *raft_metadata_ : *default_instance_->raft_metadata_;
}
inline ::floyd::raft::log::MetaData* FileLogMetaData::mutable_raft_metadata() {
  set_has_raft_metadata();
  if (raft_metadata_ == NULL) raft_metadata_ = new ::floyd::raft::log::MetaData;
  return raft_metadata_;
}
inline ::floyd::raft::log::MetaData* FileLogMetaData::release_raft_metadata() {
  clear_has_raft_metadata();
  ::floyd::raft::log::MetaData* temp = raft_metadata_;
  raft_metadata_ = NULL;
  return temp;
}
inline void FileLogMetaData::set_allocated_raft_metadata(::floyd::raft::log::MetaData* raft_metadata) {
  delete raft_metadata_;
  raft_metadata_ = raft_metadata;
  if (raft_metadata) {
    set_has_raft_metadata();
  } else {
    clear_has_raft_metadata();
  }
}

// required uint64 entries_start = 2 [default = 1];
inline bool FileLogMetaData::has_entries_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileLogMetaData::set_has_entries_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileLogMetaData::clear_has_entries_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileLogMetaData::clear_entries_start() {
  entries_start_ = GOOGLE_ULONGLONG(1);
  clear_has_entries_start();
}
inline ::google::protobuf::uint64 FileLogMetaData::entries_start() const {
  return entries_start_;
}
inline void FileLogMetaData::set_entries_start(::google::protobuf::uint64 value) {
  set_has_entries_start();
  entries_start_ = value;
}

// required uint64 entries_end = 3 [default = 0];
inline bool FileLogMetaData::has_entries_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileLogMetaData::set_has_entries_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileLogMetaData::clear_has_entries_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileLogMetaData::clear_entries_end() {
  entries_end_ = GOOGLE_ULONGLONG(0);
  clear_has_entries_end();
}
inline ::google::protobuf::uint64 FileLogMetaData::entries_end() const {
  return entries_end_;
}
inline void FileLogMetaData::set_entries_end(::google::protobuf::uint64 value) {
  set_has_entries_end();
  entries_end_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace raft
}  // namespace floyd

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2flog_5fmeta_2eproto__INCLUDED
