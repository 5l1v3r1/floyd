// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace command {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_Kv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_Kv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommandRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRes_KvRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRes_KvRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_command_2eproto() {
  protobuf_AddDesc_command_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "command.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, rqv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, aerq_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Kv_descriptor_ = Command_descriptor_->nested_type(0);
  static const int Command_Kv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_Kv, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_Kv, value_),
  };
  Command_Kv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_Kv_descriptor_,
      Command_Kv::default_instance_,
      Command_Kv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_Kv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command_Kv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command_Kv));
  Command_Type_descriptor_ = Command_descriptor_->enum_type(0);
  CommandRes_descriptor_ = file->message_type(1);
  static const int CommandRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, kvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, rsv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, aers_),
  };
  CommandRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRes_descriptor_,
      CommandRes::default_instance_,
      CommandRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRes));
  CommandRes_KvRet_descriptor_ = CommandRes_descriptor_->nested_type(0);
  static const int CommandRes_KvRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes_KvRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes_KvRet, value_),
  };
  CommandRes_KvRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRes_KvRet_descriptor_,
      CommandRes_KvRet::default_instance_,
      CommandRes_KvRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes_KvRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRes_KvRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRes_KvRet));
  CommandRes_Type_descriptor_ = CommandRes_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_command_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_Kv_descriptor_, &Command_Kv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRes_descriptor_, &CommandRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRes_KvRet_descriptor_, &CommandRes_KvRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_command_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Command_Kv::default_instance_;
  delete Command_Kv_reflection_;
  delete CommandRes::default_instance_;
  delete CommandRes_reflection_;
  delete CommandRes_KvRet::default_instance_;
  delete CommandRes_KvRet_reflection_;
}

void protobuf_AddDesc_command_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::floyd::raft::protobuf_AddDesc_raft_2fraft_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcommand.proto\022\007command\032\017raft/raft.prot"
    "o\"\231\002\n\007Command\022#\n\004type\030\001 \002(\0162\025.command.Co"
    "mmand.Type\022\037\n\002kv\030\002 \001(\0132\023.command.Command"
    ".Kv\022$\n\003rqv\030\003 \001(\0132\027.floyd.raft.RequestVot"
    "e\022.\n\004aerq\030\004 \001(\0132 .floyd.raft.AppendEntri"
    "esRequest\032 \n\002Kv\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 "
    "\001(\014\"P\n\004Type\022\010\n\004Read\020\000\022\016\n\nDirtyWrite\020\001\022\t\n"
    "\005Write\020\002\022\014\n\010RaftVote\020\003\022\025\n\021RaftAppendEntr"
    "ies\020\004\"\236\002\n\nCommandRes\022&\n\004type\030\001 \002(\0162\030.com"
    "mand.CommandRes.Type\022&\n\003kvr\030\002 \001(\0132\031.comm"
    "and.CommandRes.KvRet\022%\n\003rsv\030\003 \001(\0132\030.floy"
    "d.raft.ResponseVote\022/\n\004aers\030\004 \001(\0132!.floy"
    "d.raft.AppendEntriesResponse\032&\n\005KvRet\022\016\n"
    "\006status\030\001 \002(\010\022\r\n\005value\030\002 \001(\014\"@\n\004Type\022\010\n\004"
    "Read\020\000\022\t\n\005Write\020\001\022\014\n\010RaftVote\020\002\022\025\n\021RaftA"
    "ppendEntries\020\003", 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "command.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  Command_Kv::default_instance_ = new Command_Kv();
  CommandRes::default_instance_ = new CommandRes();
  CommandRes_KvRet::default_instance_ = new CommandRes_KvRet();
  Command::default_instance_->InitAsDefaultInstance();
  Command_Kv::default_instance_->InitAsDefaultInstance();
  CommandRes::default_instance_->InitAsDefaultInstance();
  CommandRes_KvRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_command_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_command_2eproto {
  StaticDescriptorInitializer_command_2eproto() {
    protobuf_AddDesc_command_2eproto();
  }
} static_descriptor_initializer_command_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Type_descriptor_;
}
bool Command_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Type Command::Read;
const Command_Type Command::DirtyWrite;
const Command_Type Command::Write;
const Command_Type Command::RaftVote;
const Command_Type Command::RaftAppendEntries;
const Command_Type Command::Type_MIN;
const Command_Type Command::Type_MAX;
const int Command::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command_Kv::kKeyFieldNumber;
const int Command_Kv::kValueFieldNumber;
#endif  // !_MSC_VER

Command_Kv::Command_Kv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command_Kv::InitAsDefaultInstance() {
}

Command_Kv::Command_Kv(const Command_Kv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command_Kv::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command_Kv::~Command_Kv() {
  SharedDtor();
}

void Command_Kv::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Command_Kv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command_Kv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Kv_descriptor_;
}

const Command_Kv& Command_Kv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

Command_Kv* Command_Kv::default_instance_ = NULL;

Command_Kv* Command_Kv::New() const {
  return new Command_Kv;
}

void Command_Kv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command_Kv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command_Kv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command_Kv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command_Kv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command_Kv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command_Kv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command_Kv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command_Kv::MergeFrom(const Command_Kv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command_Kv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command_Kv::CopyFrom(const Command_Kv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Kv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command_Kv::Swap(Command_Kv* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command_Kv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_Kv_descriptor_;
  metadata.reflection = Command_Kv_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kKvFieldNumber;
const int Command::kRqvFieldNumber;
const int Command::kAerqFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  kv_ = const_cast< ::command::Command_Kv*>(&::command::Command_Kv::default_instance());
  rqv_ = const_cast< ::floyd::raft::RequestVote*>(&::floyd::raft::RequestVote::default_instance());
  aerq_ = const_cast< ::floyd::raft::AppendEntriesRequest*>(&::floyd::raft::AppendEntriesRequest::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  kv_ = NULL;
  rqv_ = NULL;
  aerq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete kv_;
    delete rqv_;
    delete aerq_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_kv()) {
      if (kv_ != NULL) kv_->::command::Command_Kv::Clear();
    }
    if (has_rqv()) {
      if (rqv_ != NULL) rqv_->::floyd::raft::RequestVote::Clear();
    }
    if (has_aerq()) {
      if (aerq_ != NULL) aerq_->::floyd::raft::AppendEntriesRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .command.Command.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::command::Command_Type_IsValid(value)) {
            set_type(static_cast< ::command::Command_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kv;
        break;
      }

      // optional .command.Command.Kv kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rqv;
        break;
      }

      // optional .floyd.raft.RequestVote rqv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rqv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rqv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aerq;
        break;
      }

      // optional .floyd.raft.AppendEntriesRequest aerq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aerq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aerq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .command.Command.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .command.Command.Kv kv = 2;
  if (has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(), output);
  }

  // optional .floyd.raft.RequestVote rqv = 3;
  if (has_rqv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rqv(), output);
  }

  // optional .floyd.raft.AppendEntriesRequest aerq = 4;
  if (has_aerq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aerq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .command.Command.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .command.Command.Kv kv = 2;
  if (has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(), target);
  }

  // optional .floyd.raft.RequestVote rqv = 3;
  if (has_rqv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rqv(), target);
  }

  // optional .floyd.raft.AppendEntriesRequest aerq = 4;
  if (has_aerq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aerq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .command.Command.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .command.Command.Kv kv = 2;
    if (has_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kv());
    }

    // optional .floyd.raft.RequestVote rqv = 3;
    if (has_rqv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rqv());
    }

    // optional .floyd.raft.AppendEntriesRequest aerq = 4;
    if (has_aerq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aerq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kv()) {
      mutable_kv()->::command::Command_Kv::MergeFrom(from.kv());
    }
    if (from.has_rqv()) {
      mutable_rqv()->::floyd::raft::RequestVote::MergeFrom(from.rqv());
    }
    if (from.has_aerq()) {
      mutable_aerq()->::floyd::raft::AppendEntriesRequest::MergeFrom(from.aerq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kv()) {
    if (!this->kv().IsInitialized()) return false;
  }
  if (has_rqv()) {
    if (!this->rqv().IsInitialized()) return false;
  }
  if (has_aerq()) {
    if (!this->aerq().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(kv_, other->kv_);
    std::swap(rqv_, other->rqv_);
    std::swap(aerq_, other->aerq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRes_Type_descriptor_;
}
bool CommandRes_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommandRes_Type CommandRes::Read;
const CommandRes_Type CommandRes::Write;
const CommandRes_Type CommandRes::RaftVote;
const CommandRes_Type CommandRes::RaftAppendEntries;
const CommandRes_Type CommandRes::Type_MIN;
const CommandRes_Type CommandRes::Type_MAX;
const int CommandRes::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommandRes_KvRet::kStatusFieldNumber;
const int CommandRes_KvRet::kValueFieldNumber;
#endif  // !_MSC_VER

CommandRes_KvRet::CommandRes_KvRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRes_KvRet::InitAsDefaultInstance() {
}

CommandRes_KvRet::CommandRes_KvRet(const CommandRes_KvRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRes_KvRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRes_KvRet::~CommandRes_KvRet() {
  SharedDtor();
}

void CommandRes_KvRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CommandRes_KvRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRes_KvRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRes_KvRet_descriptor_;
}

const CommandRes_KvRet& CommandRes_KvRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

CommandRes_KvRet* CommandRes_KvRet::default_instance_ = NULL;

CommandRes_KvRet* CommandRes_KvRet::New() const {
  return new CommandRes_KvRet;
}

void CommandRes_KvRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRes_KvRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRes_KvRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRes_KvRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRes_KvRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRes_KvRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRes_KvRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRes_KvRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRes_KvRet::MergeFrom(const CommandRes_KvRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRes_KvRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRes_KvRet::CopyFrom(const CommandRes_KvRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRes_KvRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommandRes_KvRet::Swap(CommandRes_KvRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRes_KvRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRes_KvRet_descriptor_;
  metadata.reflection = CommandRes_KvRet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandRes::kTypeFieldNumber;
const int CommandRes::kKvrFieldNumber;
const int CommandRes::kRsvFieldNumber;
const int CommandRes::kAersFieldNumber;
#endif  // !_MSC_VER

CommandRes::CommandRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRes::InitAsDefaultInstance() {
  kvr_ = const_cast< ::command::CommandRes_KvRet*>(&::command::CommandRes_KvRet::default_instance());
  rsv_ = const_cast< ::floyd::raft::ResponseVote*>(&::floyd::raft::ResponseVote::default_instance());
  aers_ = const_cast< ::floyd::raft::AppendEntriesResponse*>(&::floyd::raft::AppendEntriesResponse::default_instance());
}

CommandRes::CommandRes(const CommandRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRes::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  kvr_ = NULL;
  rsv_ = NULL;
  aers_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRes::~CommandRes() {
  SharedDtor();
}

void CommandRes::SharedDtor() {
  if (this != default_instance_) {
    delete kvr_;
    delete rsv_;
    delete aers_;
  }
}

void CommandRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRes_descriptor_;
}

const CommandRes& CommandRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

CommandRes* CommandRes::default_instance_ = NULL;

CommandRes* CommandRes::New() const {
  return new CommandRes;
}

void CommandRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_kvr()) {
      if (kvr_ != NULL) kvr_->::command::CommandRes_KvRet::Clear();
    }
    if (has_rsv()) {
      if (rsv_ != NULL) rsv_->::floyd::raft::ResponseVote::Clear();
    }
    if (has_aers()) {
      if (aers_ != NULL) aers_->::floyd::raft::AppendEntriesResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .command.CommandRes.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::command::CommandRes_Type_IsValid(value)) {
            set_type(static_cast< ::command::CommandRes_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvr;
        break;
      }

      // optional .command.CommandRes.KvRet kvr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rsv;
        break;
      }

      // optional .floyd.raft.ResponseVote rsv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aers;
        break;
      }

      // optional .floyd.raft.AppendEntriesResponse aers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .command.CommandRes.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .command.CommandRes.KvRet kvr = 2;
  if (has_kvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvr(), output);
  }

  // optional .floyd.raft.ResponseVote rsv = 3;
  if (has_rsv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rsv(), output);
  }

  // optional .floyd.raft.AppendEntriesResponse aers = 4;
  if (has_aers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .command.CommandRes.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .command.CommandRes.KvRet kvr = 2;
  if (has_kvr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kvr(), target);
  }

  // optional .floyd.raft.ResponseVote rsv = 3;
  if (has_rsv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rsv(), target);
  }

  // optional .floyd.raft.AppendEntriesResponse aers = 4;
  if (has_aers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .command.CommandRes.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .command.CommandRes.KvRet kvr = 2;
    if (has_kvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvr());
    }

    // optional .floyd.raft.ResponseVote rsv = 3;
    if (has_rsv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsv());
    }

    // optional .floyd.raft.AppendEntriesResponse aers = 4;
    if (has_aers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRes::MergeFrom(const CommandRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kvr()) {
      mutable_kvr()->::command::CommandRes_KvRet::MergeFrom(from.kvr());
    }
    if (from.has_rsv()) {
      mutable_rsv()->::floyd::raft::ResponseVote::MergeFrom(from.rsv());
    }
    if (from.has_aers()) {
      mutable_aers()->::floyd::raft::AppendEntriesResponse::MergeFrom(from.aers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRes::CopyFrom(const CommandRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kvr()) {
    if (!this->kvr().IsInitialized()) return false;
  }
  if (has_rsv()) {
    if (!this->rsv().IsInitialized()) return false;
  }
  if (has_aers()) {
    if (!this->aers().IsInitialized()) return false;
  }
  return true;
}

void CommandRes::Swap(CommandRes* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(kvr_, other->kvr_);
    std::swap(rsv_, other->rsv_);
    std::swap(aers_, other->aers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRes_descriptor_;
  metadata.reflection = CommandRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

// @@protoc_insertion_point(global_scope)
