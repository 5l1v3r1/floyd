// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "raft/raft.pb.h"
// @@protoc_insertion_point(includes)

namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Command;
class Command_Kv;
class CommandRes;
class CommandRes_KvRet;

enum Command_Type {
  Command_Type_Read = 0,
  Command_Type_DirtyWrite = 1,
  Command_Type_Write = 2,
  Command_Type_RaftVote = 3,
  Command_Type_RaftAppendEntries = 4
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_Read;
const Command_Type Command_Type_Type_MAX = Command_Type_RaftAppendEntries;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
enum CommandRes_Type {
  CommandRes_Type_Read = 0,
  CommandRes_Type_Write = 1,
  CommandRes_Type_RaftVote = 2,
  CommandRes_Type_RaftAppendEntries = 3
};
bool CommandRes_Type_IsValid(int value);
const CommandRes_Type CommandRes_Type_Type_MIN = CommandRes_Type_Read;
const CommandRes_Type CommandRes_Type_Type_MAX = CommandRes_Type_RaftAppendEntries;
const int CommandRes_Type_Type_ARRAYSIZE = CommandRes_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor();
inline const ::std::string& CommandRes_Type_Name(CommandRes_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandRes_Type_descriptor(), value);
}
inline bool CommandRes_Type_Parse(
    const ::std::string& name, CommandRes_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandRes_Type>(
    CommandRes_Type_descriptor(), name, value);
}
// ===================================================================

class Command_Kv : public ::google::protobuf::Message {
 public:
  Command_Kv();
  virtual ~Command_Kv();

  Command_Kv(const Command_Kv& from);

  inline Command_Kv& operator=(const Command_Kv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_Kv& default_instance();

  void Swap(Command_Kv* other);

  // implements Message ----------------------------------------------

  Command_Kv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_Kv& from);
  void MergeFrom(const Command_Kv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:command.Command.Kv)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command_Kv* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Command_Kv Kv;

  typedef Command_Type Type;
  static const Type Read = Command_Type_Read;
  static const Type DirtyWrite = Command_Type_DirtyWrite;
  static const Type Write = Command_Type_Write;
  static const Type RaftVote = Command_Type_RaftVote;
  static const Type RaftAppendEntries = Command_Type_RaftAppendEntries;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.Command.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::Command_Type type() const;
  inline void set_type(::command::Command_Type value);

  // optional .command.Command.Kv kv = 2;
  inline bool has_kv() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 2;
  inline const ::command::Command_Kv& kv() const;
  inline ::command::Command_Kv* mutable_kv();
  inline ::command::Command_Kv* release_kv();
  inline void set_allocated_kv(::command::Command_Kv* kv);

  // optional .floyd.raft.RequestVote rqv = 3;
  inline bool has_rqv() const;
  inline void clear_rqv();
  static const int kRqvFieldNumber = 3;
  inline const ::floyd::raft::RequestVote& rqv() const;
  inline ::floyd::raft::RequestVote* mutable_rqv();
  inline ::floyd::raft::RequestVote* release_rqv();
  inline void set_allocated_rqv(::floyd::raft::RequestVote* rqv);

  // optional .floyd.raft.AppendEntriesRequest aerq = 4;
  inline bool has_aerq() const;
  inline void clear_aerq();
  static const int kAerqFieldNumber = 4;
  inline const ::floyd::raft::AppendEntriesRequest& aerq() const;
  inline ::floyd::raft::AppendEntriesRequest* mutable_aerq();
  inline ::floyd::raft::AppendEntriesRequest* release_aerq();
  inline void set_allocated_aerq(::floyd::raft::AppendEntriesRequest* aerq);

  // @@protoc_insertion_point(class_scope:command.Command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_kv();
  inline void clear_has_kv();
  inline void set_has_rqv();
  inline void clear_has_rqv();
  inline void set_has_aerq();
  inline void clear_has_aerq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::command::Command_Kv* kv_;
  ::floyd::raft::RequestVote* rqv_;
  ::floyd::raft::AppendEntriesRequest* aerq_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes_KvRet : public ::google::protobuf::Message {
 public:
  CommandRes_KvRet();
  virtual ~CommandRes_KvRet();

  CommandRes_KvRet(const CommandRes_KvRet& from);

  inline CommandRes_KvRet& operator=(const CommandRes_KvRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes_KvRet& default_instance();

  void Swap(CommandRes_KvRet* other);

  // implements Message ----------------------------------------------

  CommandRes_KvRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes_KvRet& from);
  void MergeFrom(const CommandRes_KvRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:command.CommandRes.KvRet)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes_KvRet* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes : public ::google::protobuf::Message {
 public:
  CommandRes();
  virtual ~CommandRes();

  CommandRes(const CommandRes& from);

  inline CommandRes& operator=(const CommandRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes& default_instance();

  void Swap(CommandRes* other);

  // implements Message ----------------------------------------------

  CommandRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes& from);
  void MergeFrom(const CommandRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandRes_KvRet KvRet;

  typedef CommandRes_Type Type;
  static const Type Read = CommandRes_Type_Read;
  static const Type Write = CommandRes_Type_Write;
  static const Type RaftVote = CommandRes_Type_RaftVote;
  static const Type RaftAppendEntries = CommandRes_Type_RaftAppendEntries;
  static inline bool Type_IsValid(int value) {
    return CommandRes_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CommandRes_Type_Type_MIN;
  static const Type Type_MAX =
    CommandRes_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CommandRes_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CommandRes_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CommandRes_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CommandRes_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.CommandRes.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::CommandRes_Type type() const;
  inline void set_type(::command::CommandRes_Type value);

  // optional .command.CommandRes.KvRet kvr = 2;
  inline bool has_kvr() const;
  inline void clear_kvr();
  static const int kKvrFieldNumber = 2;
  inline const ::command::CommandRes_KvRet& kvr() const;
  inline ::command::CommandRes_KvRet* mutable_kvr();
  inline ::command::CommandRes_KvRet* release_kvr();
  inline void set_allocated_kvr(::command::CommandRes_KvRet* kvr);

  // optional .floyd.raft.ResponseVote rsv = 3;
  inline bool has_rsv() const;
  inline void clear_rsv();
  static const int kRsvFieldNumber = 3;
  inline const ::floyd::raft::ResponseVote& rsv() const;
  inline ::floyd::raft::ResponseVote* mutable_rsv();
  inline ::floyd::raft::ResponseVote* release_rsv();
  inline void set_allocated_rsv(::floyd::raft::ResponseVote* rsv);

  // optional .floyd.raft.AppendEntriesResponse aers = 4;
  inline bool has_aers() const;
  inline void clear_aers();
  static const int kAersFieldNumber = 4;
  inline const ::floyd::raft::AppendEntriesResponse& aers() const;
  inline ::floyd::raft::AppendEntriesResponse* mutable_aers();
  inline ::floyd::raft::AppendEntriesResponse* release_aers();
  inline void set_allocated_aers(::floyd::raft::AppendEntriesResponse* aers);

  // @@protoc_insertion_point(class_scope:command.CommandRes)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_kvr();
  inline void clear_has_kvr();
  inline void set_has_rsv();
  inline void clear_has_rsv();
  inline void set_has_aers();
  inline void clear_has_aers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::command::CommandRes_KvRet* kvr_;
  ::floyd::raft::ResponseVote* rsv_;
  ::floyd::raft::AppendEntriesResponse* aers_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes* default_instance_;
};
// ===================================================================


// ===================================================================

// Command_Kv

// required bytes key = 1;
inline bool Command_Kv::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_Kv::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_Kv::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_Kv::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Command_Kv::key() const {
  return *key_;
}
inline void Command_Kv::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Command_Kv::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Command_Kv::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_Kv::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Command_Kv::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_Kv::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 2;
inline bool Command_Kv::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_Kv::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_Kv::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_Kv::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Command_Kv::value() const {
  return *value_;
}
inline void Command_Kv::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Command_Kv::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Command_Kv::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_Kv::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Command_Kv::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_Kv::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Command

// required .command.Command.Type type = 1;
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::Command_Type Command::type() const {
  return static_cast< ::command::Command_Type >(type_);
}
inline void Command::set_type(::command::Command_Type value) {
  assert(::command::Command_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .command.Command.Kv kv = 2;
inline bool Command::has_kv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_kv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_kv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_kv() {
  if (kv_ != NULL) kv_->::command::Command_Kv::Clear();
  clear_has_kv();
}
inline const ::command::Command_Kv& Command::kv() const {
  return kv_ != NULL ? *kv_ : *default_instance_->kv_;
}
inline ::command::Command_Kv* Command::mutable_kv() {
  set_has_kv();
  if (kv_ == NULL) kv_ = new ::command::Command_Kv;
  return kv_;
}
inline ::command::Command_Kv* Command::release_kv() {
  clear_has_kv();
  ::command::Command_Kv* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv(::command::Command_Kv* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    set_has_kv();
  } else {
    clear_has_kv();
  }
}

// optional .floyd.raft.RequestVote rqv = 3;
inline bool Command::has_rqv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_rqv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_rqv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_rqv() {
  if (rqv_ != NULL) rqv_->::floyd::raft::RequestVote::Clear();
  clear_has_rqv();
}
inline const ::floyd::raft::RequestVote& Command::rqv() const {
  return rqv_ != NULL ? *rqv_ : *default_instance_->rqv_;
}
inline ::floyd::raft::RequestVote* Command::mutable_rqv() {
  set_has_rqv();
  if (rqv_ == NULL) rqv_ = new ::floyd::raft::RequestVote;
  return rqv_;
}
inline ::floyd::raft::RequestVote* Command::release_rqv() {
  clear_has_rqv();
  ::floyd::raft::RequestVote* temp = rqv_;
  rqv_ = NULL;
  return temp;
}
inline void Command::set_allocated_rqv(::floyd::raft::RequestVote* rqv) {
  delete rqv_;
  rqv_ = rqv;
  if (rqv) {
    set_has_rqv();
  } else {
    clear_has_rqv();
  }
}

// optional .floyd.raft.AppendEntriesRequest aerq = 4;
inline bool Command::has_aerq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_aerq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_aerq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_aerq() {
  if (aerq_ != NULL) aerq_->::floyd::raft::AppendEntriesRequest::Clear();
  clear_has_aerq();
}
inline const ::floyd::raft::AppendEntriesRequest& Command::aerq() const {
  return aerq_ != NULL ? *aerq_ : *default_instance_->aerq_;
}
inline ::floyd::raft::AppendEntriesRequest* Command::mutable_aerq() {
  set_has_aerq();
  if (aerq_ == NULL) aerq_ = new ::floyd::raft::AppendEntriesRequest;
  return aerq_;
}
inline ::floyd::raft::AppendEntriesRequest* Command::release_aerq() {
  clear_has_aerq();
  ::floyd::raft::AppendEntriesRequest* temp = aerq_;
  aerq_ = NULL;
  return temp;
}
inline void Command::set_allocated_aerq(::floyd::raft::AppendEntriesRequest* aerq) {
  delete aerq_;
  aerq_ = aerq;
  if (aerq) {
    set_has_aerq();
  } else {
    clear_has_aerq();
  }
}

// -------------------------------------------------------------------

// CommandRes_KvRet

// required bool status = 1;
inline bool CommandRes_KvRet::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes_KvRet::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes_KvRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes_KvRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool CommandRes_KvRet::status() const {
  return status_;
}
inline void CommandRes_KvRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional bytes value = 2;
inline bool CommandRes_KvRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes_KvRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes_KvRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes_KvRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CommandRes_KvRet::value() const {
  return *value_;
}
inline void CommandRes_KvRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_KvRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_KvRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_KvRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CommandRes_KvRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_KvRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandRes

// required .command.CommandRes.Type type = 1;
inline bool CommandRes::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::CommandRes_Type CommandRes::type() const {
  return static_cast< ::command::CommandRes_Type >(type_);
}
inline void CommandRes::set_type(::command::CommandRes_Type value) {
  assert(::command::CommandRes_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .command.CommandRes.KvRet kvr = 2;
inline bool CommandRes::has_kvr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes::set_has_kvr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes::clear_has_kvr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes::clear_kvr() {
  if (kvr_ != NULL) kvr_->::command::CommandRes_KvRet::Clear();
  clear_has_kvr();
}
inline const ::command::CommandRes_KvRet& CommandRes::kvr() const {
  return kvr_ != NULL ? *kvr_ : *default_instance_->kvr_;
}
inline ::command::CommandRes_KvRet* CommandRes::mutable_kvr() {
  set_has_kvr();
  if (kvr_ == NULL) kvr_ = new ::command::CommandRes_KvRet;
  return kvr_;
}
inline ::command::CommandRes_KvRet* CommandRes::release_kvr() {
  clear_has_kvr();
  ::command::CommandRes_KvRet* temp = kvr_;
  kvr_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_kvr(::command::CommandRes_KvRet* kvr) {
  delete kvr_;
  kvr_ = kvr;
  if (kvr) {
    set_has_kvr();
  } else {
    clear_has_kvr();
  }
}

// optional .floyd.raft.ResponseVote rsv = 3;
inline bool CommandRes::has_rsv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandRes::set_has_rsv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandRes::clear_has_rsv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandRes::clear_rsv() {
  if (rsv_ != NULL) rsv_->::floyd::raft::ResponseVote::Clear();
  clear_has_rsv();
}
inline const ::floyd::raft::ResponseVote& CommandRes::rsv() const {
  return rsv_ != NULL ? *rsv_ : *default_instance_->rsv_;
}
inline ::floyd::raft::ResponseVote* CommandRes::mutable_rsv() {
  set_has_rsv();
  if (rsv_ == NULL) rsv_ = new ::floyd::raft::ResponseVote;
  return rsv_;
}
inline ::floyd::raft::ResponseVote* CommandRes::release_rsv() {
  clear_has_rsv();
  ::floyd::raft::ResponseVote* temp = rsv_;
  rsv_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_rsv(::floyd::raft::ResponseVote* rsv) {
  delete rsv_;
  rsv_ = rsv;
  if (rsv) {
    set_has_rsv();
  } else {
    clear_has_rsv();
  }
}

// optional .floyd.raft.AppendEntriesResponse aers = 4;
inline bool CommandRes::has_aers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandRes::set_has_aers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandRes::clear_has_aers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandRes::clear_aers() {
  if (aers_ != NULL) aers_->::floyd::raft::AppendEntriesResponse::Clear();
  clear_has_aers();
}
inline const ::floyd::raft::AppendEntriesResponse& CommandRes::aers() const {
  return aers_ != NULL ? *aers_ : *default_instance_->aers_;
}
inline ::floyd::raft::AppendEntriesResponse* CommandRes::mutable_aers() {
  set_has_aers();
  if (aers_ == NULL) aers_ = new ::floyd::raft::AppendEntriesResponse;
  return aers_;
}
inline ::floyd::raft::AppendEntriesResponse* CommandRes::release_aers() {
  clear_has_aers();
  ::floyd::raft::AppendEntriesResponse* temp = aers_;
  aers_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_aers(::floyd::raft::AppendEntriesResponse* aers) {
  delete aers_;
  aers_ = aers;
  if (aers) {
    set_has_aers();
  } else {
    clear_has_aers();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::Command_Type>() {
  return ::command::Command_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::CommandRes_Type>() {
  return ::command::CommandRes_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
