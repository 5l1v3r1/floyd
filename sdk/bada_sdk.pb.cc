// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bada_sdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bada_sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SdkInvalidOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkInvalidOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkSetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkCas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkCas_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkCasRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkCasRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetV_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetVRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetVRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkIncrby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkIncrby_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkIncrbyRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkIncrbyRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkDeleteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkDeleteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkPingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkPingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetIfAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetIfAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetIfAllRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetIfAllRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGetRet_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMGetRet_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMSet_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMSet_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMSetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMSetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMSetRet_KeyRetval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkMSetRet_KeyRetval_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    GetMetadata4SDK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rint32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    Rint32_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    GetMetadata4SDK3_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK3_NPs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    GetMetadata4SDK3_NPs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimary4SDK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    GetPrimary4SDK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimary4SDK3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    GetPrimary4SDK3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHLen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHLen_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHLenRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHLenRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHPut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHPut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHPutRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHPutRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHDeleteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHDeleteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKeysByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetAllKeysByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKeysByNameRet_descriptor_ =
    NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetAllKeysByNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKVsByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetAllKVsByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetAllKVsByNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor*
    SdkHGetAllKVsByNameRet_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHGetAllKVsByNameRet_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMput_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMput_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMputRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMputRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMputRet_HKeyRetval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMputRet_HKeyRetval_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMget_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMgetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMgetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMgetRet_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHMgetRet_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHRangeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHRangeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHRangeRet_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHRangeRet_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHTrim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHTrim_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHTrimRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkHTrimRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetWithTTL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkSetWithTTL_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetWithTTLRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkSetWithTTLRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSizeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLSizeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLPut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPutRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLPutRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLSetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLPop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPopRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLPopRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLIndexRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLIndexRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLRangeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLRangeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLTrim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLTrim_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLTrimRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkLTrimRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetTTL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetTTL_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetTTLRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkGetTTLRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZAddRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZAddRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZSizeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZSizeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZCountRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZCountRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZIncr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZIncr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZIncrRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZIncrRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZIncrByFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZIncrByFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZIncrByFloatRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZIncrByFloatRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRankRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRankRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRankRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRankRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRangeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRangeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRangeRet_ZKeyScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRangeRet_ZKeyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRangeByScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRangeByScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRangeByScoreRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRangeByScoreRet_reflection_ = NULL;
const ::google::protobuf::Descriptor*
    SdkZRangeByScoreRet_ZKeyScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRangeByScoreRet_ZKeyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRangeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRangeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRangeRet_ZKeyScore_descriptor_ =
    NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRangeRet_ZKeyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRangeByScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRangeByScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZRRangeByScoreRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRangeByScoreRet_reflection_ = NULL;
const ::google::protobuf::Descriptor*
    SdkZRRangeByScoreRet_ZKeyScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZRRangeByScoreRet_ZKeyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDelRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDelRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDelByRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDelByRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDelByRankRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDelByRankRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDelByScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDelByScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkZDelByScoreRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    SdkZDelByScoreRet_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_bada_5fsdk_2eproto() {
  protobuf_AddDesc_bada_5fsdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "bada_sdk.proto");
  GOOGLE_CHECK(file != NULL);
  SdkInvalidOperation_descriptor_ = file->message_type(0);
  static const int SdkInvalidOperation_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation,
                                                     what_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation,
                                                     why_), };
  SdkInvalidOperation_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkInvalidOperation_descriptor_,
          SdkInvalidOperation::default_instance_, SdkInvalidOperation_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkInvalidOperation));
  SdkSet_descriptor_ = file->message_type(1);
  static const int SdkSet_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, writesrc_), };
  SdkSet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkSet_descriptor_, SdkSet::default_instance_, SdkSet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkSet));
  SdkSetRet_descriptor_ = file->message_type(2);
  static const int SdkSetRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, status_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, master_), };
  SdkSetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkSetRet_descriptor_, SdkSetRet::default_instance_,
          SdkSetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkSetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkSetRet));
  SdkCas_descriptor_ = file->message_type(3);
  static const int SdkCas_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, writesrc_), };
  SdkCas_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkCas_descriptor_, SdkCas::default_instance_, SdkCas_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkCas));
  SdkCasRet_descriptor_ = file->message_type(4);
  static const int SdkCasRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, status_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, master_), };
  SdkCasRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkCasRet_descriptor_, SdkCasRet::default_instance_,
          SdkCasRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkCasRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkCasRet));
  SdkGet_descriptor_ = file->message_type(5);
  static const int SdkGet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, key_), };
  SdkGet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGet_descriptor_, SdkGet::default_instance_, SdkGet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGet));
  SdkGetRet_descriptor_ = file->message_type(6);
  static const int SdkGetRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, master_), };
  SdkGetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetRet_descriptor_, SdkGetRet::default_instance_,
          SdkGetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkGetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetRet));
  SdkGetV_descriptor_ = file->message_type(7);
  static const int SdkGetV_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, key_), };
  SdkGetV_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetV_descriptor_, SdkGetV::default_instance_, SdkGetV_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetV));
  SdkGetVRet_descriptor_ = file->message_type(8);
  static const int SdkGetVRet_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, master_), };
  SdkGetVRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetVRet_descriptor_, SdkGetVRet::default_instance_,
          SdkGetVRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkGetVRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetVRet));
  SdkIncrby_descriptor_ = file->message_type(9);
  static const int SdkIncrby_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, by_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, incrordecr_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby, writesrc_), };
  SdkIncrby_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkIncrby_descriptor_, SdkIncrby::default_instance_,
          SdkIncrby_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkIncrby, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrby,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkIncrby));
  SdkIncrbyRet_descriptor_ = file->message_type(10);
  static const int SdkIncrbyRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrbyRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrbyRet, value_), };
  SdkIncrbyRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkIncrbyRet_descriptor_, SdkIncrbyRet::default_instance_,
          SdkIncrbyRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkIncrbyRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkIncrbyRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkIncrbyRet));
  SdkDelete_descriptor_ = file->message_type(11);
  static const int SdkDelete_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, writesrc_), };
  SdkDelete_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkDelete_descriptor_, SdkDelete::default_instance_,
          SdkDelete_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkDelete, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkDelete));
  SdkDeleteRet_descriptor_ = file->message_type(12);
  static const int SdkDeleteRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, status_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, master_), };
  SdkDeleteRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkDeleteRet_descriptor_, SdkDeleteRet::default_instance_,
          SdkDeleteRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkDeleteRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkDeleteRet));
  SdkPing_descriptor_ = file->message_type(13);
  static const int SdkPing_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing, opcode_), };
  SdkPing_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkPing_descriptor_, SdkPing::default_instance_, SdkPing_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkPing));
  SdkPingRet_descriptor_ = file->message_type(14);
  static const int SdkPingRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, status_), };
  SdkPingRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkPingRet_descriptor_, SdkPingRet::default_instance_,
          SdkPingRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkPingRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkPingRet));
  SdkGetIfAll_descriptor_ = file->message_type(15);
  static const int SdkGetIfAll_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, strict_), };
  SdkGetIfAll_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetIfAll_descriptor_, SdkGetIfAll::default_instance_,
          SdkGetIfAll_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkGetIfAll, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetIfAll));
  SdkGetIfAllRet_descriptor_ = file->message_type(16);
  static const int SdkGetIfAllRet_offsets_
      [4] = {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                            opcode_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                            value_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                            version_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                            master_), };
  SdkGetIfAllRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetIfAllRet_descriptor_, SdkGetIfAllRet::default_instance_,
          SdkGetIfAllRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetIfAllRet));
  SdkMGet_descriptor_ = file->message_type(17);
  static const int SdkMGet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, key_), };
  SdkMGet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMGet_descriptor_, SdkMGet::default_instance_, SdkMGet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMGet));
  SdkMGetRet_descriptor_ = file->message_type(18);
  static const int SdkMGetRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, rets_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, master_), };
  SdkMGetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMGetRet_descriptor_, SdkMGetRet::default_instance_,
          SdkMGetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkMGetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMGetRet));
  SdkMGetRet_KeyValue_descriptor_ = SdkMGetRet_descriptor_->nested_type(0);
  static const int SdkMGetRet_KeyValue_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue,
                                                     value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue,
                                                     status_), };
  SdkMGetRet_KeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMGetRet_KeyValue_descriptor_,
          SdkMGetRet_KeyValue::default_instance_, SdkMGetRet_KeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMGetRet_KeyValue));
  SdkMSet_descriptor_ = file->message_type(19);
  static const int SdkMSet_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet, kvs_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet, writesrc_), };
  SdkMSet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMSet_descriptor_, SdkMSet::default_instance_, SdkMSet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMSet));
  SdkMSet_KeyValue_descriptor_ = SdkMSet_descriptor_->nested_type(0);
  static const int SdkMSet_KeyValue_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet_KeyValue, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet_KeyValue,
                                                     value_), };
  SdkMSet_KeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMSet_KeyValue_descriptor_, SdkMSet_KeyValue::default_instance_,
          SdkMSet_KeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet_KeyValue,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSet_KeyValue,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMSet_KeyValue));
  SdkMSetRet_descriptor_ = file->message_type(20);
  static const int SdkMSetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet, krvs_), };
  SdkMSetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMSetRet_descriptor_, SdkMSetRet::default_instance_,
          SdkMSetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkMSetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMSetRet));
  SdkMSetRet_KeyRetval_descriptor_ = SdkMSetRet_descriptor_->nested_type(0);
  static const int SdkMSetRet_KeyRetval_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet_KeyRetval,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet_KeyRetval,
                                                     retval_), };
  SdkMSetRet_KeyRetval_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkMSetRet_KeyRetval_descriptor_,
          SdkMSetRet_KeyRetval::default_instance_,
          SdkMSetRet_KeyRetval_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet_KeyRetval,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMSetRet_KeyRetval,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkMSetRet_KeyRetval));
  GetMetadata4SDK2_descriptor_ = file->message_type(21);
  static const int GetMetadata4SDK2_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2, cmd_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2,
                                                     table_), };
  GetMetadata4SDK2_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          GetMetadata4SDK2_descriptor_, GetMetadata4SDK2::default_instance_,
          GetMetadata4SDK2_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(GetMetadata4SDK2));
  Rint32_descriptor_ = file->message_type(22);
  static const int Rint32_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32, id_), };
  Rint32_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          Rint32_descriptor_, Rint32::default_instance_, Rint32_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(Rint32));
  GetMetadata4SDK3_descriptor_ = file->message_type(23);
  static const int GetMetadata4SDK3_offsets_
      [3] = {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3,
                                                            cmd_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3,
                                                            nps_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3,
                                                            pcnt_), };
  GetMetadata4SDK3_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          GetMetadata4SDK3_descriptor_, GetMetadata4SDK3::default_instance_,
          GetMetadata4SDK3_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(GetMetadata4SDK3));
  GetMetadata4SDK3_NPs_descriptor_ =
      GetMetadata4SDK3_descriptor_->nested_type(0);
  static const int GetMetadata4SDK3_NPs_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs,
                                                     host_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs,
                                                     port_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs,
                                                     partitions_), };
  GetMetadata4SDK3_NPs_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          GetMetadata4SDK3_NPs_descriptor_,
          GetMetadata4SDK3_NPs::default_instance_,
          GetMetadata4SDK3_NPs_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(GetMetadata4SDK3_NPs));
  GetPrimary4SDK2_descriptor_ = file->message_type(24);
  static const int GetPrimary4SDK2_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, cmd_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2,
                                                     partition_), };
  GetPrimary4SDK2_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          GetPrimary4SDK2_descriptor_, GetPrimary4SDK2::default_instance_,
          GetPrimary4SDK2_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(GetPrimary4SDK2));
  GetPrimary4SDK3_descriptor_ = file->message_type(25);
  static const int GetPrimary4SDK3_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, cmd_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, host_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, port_), };
  GetPrimary4SDK3_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          GetPrimary4SDK3_descriptor_, GetPrimary4SDK3::default_instance_,
          GetPrimary4SDK3_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(GetPrimary4SDK3));
  SdkHGet_descriptor_ = file->message_type(26);
  static const int SdkHGet_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, key_), };
  SdkHGet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGet_descriptor_, SdkHGet::default_instance_, SdkHGet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGet));
  SdkHGetRet_descriptor_ = file->message_type(27);
  static const int SdkHGetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, value_), };
  SdkHGetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetRet_descriptor_, SdkHGetRet::default_instance_,
          SdkHGetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkHGetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetRet));
  SdkHLen_descriptor_ = file->message_type(28);
  static const int SdkHLen_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLen, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLen, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLen, hname_), };
  SdkHLen_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHLen_descriptor_, SdkHLen::default_instance_, SdkHLen_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLen,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLen,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHLen));
  SdkHLenRet_descriptor_ = file->message_type(29);
  static const int SdkHLenRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLenRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLenRet, value_), };
  SdkHLenRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHLenRet_descriptor_, SdkHLenRet::default_instance_,
          SdkHLenRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkHLenRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHLenRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHLenRet));
  SdkHPut_descriptor_ = file->message_type(30);
  static const int SdkHPut_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, writesrc_), };
  SdkHPut_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHPut_descriptor_, SdkHPut::default_instance_, SdkHPut_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHPut));
  SdkHPutRet_descriptor_ = file->message_type(31);
  static const int SdkHPutRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, status_), };
  SdkHPutRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHPutRet_descriptor_, SdkHPutRet::default_instance_,
          SdkHPutRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkHPutRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHPutRet));
  SdkHDelete_descriptor_ = file->message_type(32);
  static const int SdkHDelete_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, writesrc_), };
  SdkHDelete_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHDelete_descriptor_, SdkHDelete::default_instance_,
          SdkHDelete_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkHDelete, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHDelete));
  SdkHDeleteRet_descriptor_ = file->message_type(33);
  static const int SdkHDeleteRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, status_), };
  SdkHDeleteRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHDeleteRet_descriptor_, SdkHDeleteRet::default_instance_,
          SdkHDeleteRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHDeleteRet));
  SdkHGetAllKeysByName_descriptor_ = file->message_type(34);
  static const int SdkHGetAllKeysByName_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName,
                                                     table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName,
                                                     hname_), };
  SdkHGetAllKeysByName_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetAllKeysByName_descriptor_,
          SdkHGetAllKeysByName::default_instance_,
          SdkHGetAllKeysByName_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetAllKeysByName));
  SdkHGetAllKeysByNameRet_descriptor_ = file->message_type(35);
  static const int SdkHGetAllKeysByNameRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet,
                                                     keys_), };
  SdkHGetAllKeysByNameRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetAllKeysByNameRet_descriptor_,
          SdkHGetAllKeysByNameRet::default_instance_,
          SdkHGetAllKeysByNameRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkHGetAllKeysByNameRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkHGetAllKeysByNameRet, _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetAllKeysByNameRet));
  SdkHGetAllKVsByName_descriptor_ = file->message_type(36);
  static const int SdkHGetAllKVsByName_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName,
                                                     table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName,
                                                     hname_), };
  SdkHGetAllKVsByName_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetAllKVsByName_descriptor_,
          SdkHGetAllKVsByName::default_instance_, SdkHGetAllKVsByName_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetAllKVsByName));
  SdkHGetAllKVsByNameRet_descriptor_ = file->message_type(37);
  static const int SdkHGetAllKVsByNameRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet,
                                                     rets_), };
  SdkHGetAllKVsByNameRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetAllKVsByNameRet_descriptor_,
          SdkHGetAllKVsByNameRet::default_instance_,
          SdkHGetAllKVsByNameRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetAllKVsByNameRet));
  SdkHGetAllKVsByNameRet_HKeyValue_descriptor_ =
      SdkHGetAllKVsByNameRet_descriptor_->nested_type(0);
  static const int SdkHGetAllKVsByNameRet_HKeyValue_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkHGetAllKVsByNameRet_HKeyValue, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkHGetAllKVsByNameRet_HKeyValue, value_), };
  SdkHGetAllKVsByNameRet_HKeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHGetAllKVsByNameRet_HKeyValue_descriptor_,
          SdkHGetAllKVsByNameRet_HKeyValue::default_instance_,
          SdkHGetAllKVsByNameRet_HKeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkHGetAllKVsByNameRet_HKeyValue, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkHGetAllKVsByNameRet_HKeyValue, _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHGetAllKVsByNameRet_HKeyValue));
  SdkHMput_descriptor_ = file->message_type(38);
  static const int SdkHMput_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, kvs_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, writesrc_), };
  SdkHMput_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMput_descriptor_, SdkHMput::default_instance_, SdkHMput_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMput));
  SdkHMput_HKeyValue_descriptor_ = SdkHMput_descriptor_->nested_type(0);
  static const int SdkHMput_HKeyValue_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue,
                                                     value_), };
  SdkHMput_HKeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMput_HKeyValue_descriptor_, SdkHMput_HKeyValue::default_instance_,
          SdkHMput_HKeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMput_HKeyValue));
  SdkHMputRet_descriptor_ = file->message_type(39);
  static const int SdkHMputRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, krvs_), };
  SdkHMputRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMputRet_descriptor_, SdkHMputRet::default_instance_,
          SdkHMputRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkHMputRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMputRet));
  SdkHMputRet_HKeyRetval_descriptor_ = SdkHMputRet_descriptor_->nested_type(0);
  static const int SdkHMputRet_HKeyRetval_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval,
                                                     retval_), };
  SdkHMputRet_HKeyRetval_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMputRet_HKeyRetval_descriptor_,
          SdkHMputRet_HKeyRetval::default_instance_,
          SdkHMputRet_HKeyRetval_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMputRet_HKeyRetval));
  SdkHMget_descriptor_ = file->message_type(40);
  static const int SdkHMget_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, keys_), };
  SdkHMget_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMget_descriptor_, SdkHMget::default_instance_, SdkHMget_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMget));
  SdkHMgetRet_descriptor_ = file->message_type(41);
  static const int SdkHMgetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, kvs_), };
  SdkHMgetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMgetRet_descriptor_, SdkHMgetRet::default_instance_,
          SdkHMgetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkHMgetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMgetRet));
  SdkHMgetRet_HKeyValue_descriptor_ = SdkHMgetRet_descriptor_->nested_type(0);
  static const int SdkHMgetRet_HKeyValue_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue,
                                                     value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue,
                                                     retval_), };
  SdkHMgetRet_HKeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHMgetRet_HKeyValue_descriptor_,
          SdkHMgetRet_HKeyValue::default_instance_,
          SdkHMgetRet_HKeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHMgetRet_HKeyValue));
  SdkHRange_descriptor_ = file->message_type(42);
  static const int SdkHRange_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange, end_), };
  SdkHRange_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHRange_descriptor_, SdkHRange::default_instance_,
          SdkHRange_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkHRange, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRange,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHRange));
  SdkHRangeRet_descriptor_ = file->message_type(43);
  static const int SdkHRangeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet, kvs_), };
  SdkHRangeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHRangeRet_descriptor_, SdkHRangeRet::default_instance_,
          SdkHRangeRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkHRangeRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHRangeRet));
  SdkHRangeRet_HKeyValue_descriptor_ = SdkHRangeRet_descriptor_->nested_type(0);
  static const int SdkHRangeRet_HKeyValue_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet_HKeyValue,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet_HKeyValue,
                                                     value_), };
  SdkHRangeRet_HKeyValue_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHRangeRet_HKeyValue_descriptor_,
          SdkHRangeRet_HKeyValue::default_instance_,
          SdkHRangeRet_HKeyValue_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet_HKeyValue,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHRangeRet_HKeyValue,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHRangeRet_HKeyValue));
  SdkHTrim_descriptor_ = file->message_type(44);
  static const int SdkHTrim_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, hname_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, end_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim, writesrc_), };
  SdkHTrim_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHTrim_descriptor_, SdkHTrim::default_instance_, SdkHTrim_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrim,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHTrim));
  SdkHTrimRet_descriptor_ = file->message_type(45);
  static const int SdkHTrimRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrimRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrimRet, retval_), };
  SdkHTrimRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkHTrimRet_descriptor_, SdkHTrimRet::default_instance_,
          SdkHTrimRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkHTrimRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHTrimRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkHTrimRet));
  SdkSetWithTTL_descriptor_ = file->message_type(46);
  static const int SdkSetWithTTL_offsets_[6] =
      {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL,
                                                         opcode_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, table_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, key_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, value_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, ttl_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL,
                                                         writesrc_), };
  SdkSetWithTTL_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkSetWithTTL_descriptor_, SdkSetWithTTL::default_instance_,
          SdkSetWithTTL_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkSetWithTTL));
  SdkSetWithTTLRet_descriptor_ = file->message_type(47);
  static const int SdkSetWithTTLRet_offsets_[3] =
      {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet,
                                                      opcode_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet,
                                                      status_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet,
                                                      master_), };
  SdkSetWithTTLRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkSetWithTTLRet_descriptor_, SdkSetWithTTLRet::default_instance_,
          SdkSetWithTTLRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkSetWithTTLRet));
  SdkLSize_descriptor_ = file->message_type(48);
  static const int SdkLSize_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, name_), };
  SdkLSize_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLSize_descriptor_, SdkLSize::default_instance_, SdkLSize_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLSize));
  SdkLSizeRet_descriptor_ = file->message_type(49);
  static const int SdkLSizeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, size_r_), };
  SdkLSizeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLSizeRet_descriptor_, SdkLSizeRet::default_instance_,
          SdkLSizeRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkLSizeRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLSizeRet));
  SdkLGet_descriptor_ = file->message_type(50);
  static const int SdkLGet_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, frontorback_), };
  SdkLGet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLGet_descriptor_, SdkLGet::default_instance_, SdkLGet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLGet));
  SdkLGetRet_descriptor_ = file->message_type(51);
  static const int SdkLGetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, value_), };
  SdkLGetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLGetRet_descriptor_, SdkLGetRet::default_instance_,
          SdkLGetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkLGetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLGetRet));
  SdkLPut_descriptor_ = file->message_type(52);
  static const int SdkLPut_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, frontorback_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, writesrc_), };
  SdkLPut_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLPut_descriptor_, SdkLPut::default_instance_, SdkLPut_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLPut));
  SdkLPutRet_descriptor_ = file->message_type(53);
  static const int SdkLPutRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, status_), };
  SdkLPutRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLPutRet_descriptor_, SdkLPutRet::default_instance_,
          SdkLPutRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkLPutRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLPutRet));
  SdkLSet_descriptor_ = file->message_type(54);
  static const int SdkLSet_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet, index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet, value_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet, writesrc_), };
  SdkLSet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLSet_descriptor_, SdkLSet::default_instance_, SdkLSet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLSet));
  SdkLSetRet_descriptor_ = file->message_type(55);
  static const int SdkLSetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSetRet, status_), };
  SdkLSetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLSetRet_descriptor_, SdkLSetRet::default_instance_,
          SdkLSetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkLSetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLSetRet));
  SdkLPop_descriptor_ = file->message_type(56);
  static const int SdkLPop_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, frontorback_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, writesrc_), };
  SdkLPop_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLPop_descriptor_, SdkLPop::default_instance_, SdkLPop_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLPop));
  SdkLPopRet_descriptor_ = file->message_type(57);
  static const int SdkLPopRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, value_), };
  SdkLPopRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLPopRet_descriptor_, SdkLPopRet::default_instance_,
          SdkLPopRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkLPopRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLPopRet));
  SdkLIndex_descriptor_ = file->message_type(58);
  static const int SdkLIndex_offsets_
      [5] = {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, opcode_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, table_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, name_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, index_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex,
                                                            frontorback_), };
  SdkLIndex_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLIndex_descriptor_, SdkLIndex::default_instance_,
          SdkLIndex_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkLIndex, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLIndex));
  SdkLIndexRet_descriptor_ = file->message_type(59);
  static const int SdkLIndexRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, value_), };
  SdkLIndexRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLIndexRet_descriptor_, SdkLIndexRet::default_instance_,
          SdkLIndexRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkLIndexRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLIndexRet));
  SdkLRange_descriptor_ = file->message_type(60);
  static const int SdkLRange_offsets_
      [6] = {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, opcode_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, table_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, name_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, from_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, to_),
             GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange,
                                                            frontorback_), };
  SdkLRange_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLRange_descriptor_, SdkLRange::default_instance_,
          SdkLRange_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkLRange, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLRange));
  SdkLRangeRet_descriptor_ = file->message_type(61);
  static const int SdkLRangeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, value_), };
  SdkLRangeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLRangeRet_descriptor_, SdkLRangeRet::default_instance_,
          SdkLRangeRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkLRangeRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLRangeRet));
  SdkLTrim_descriptor_ = file->message_type(62);
  static const int SdkLTrim_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, from_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, to_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim, writesrc_), };
  SdkLTrim_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLTrim_descriptor_, SdkLTrim::default_instance_, SdkLTrim_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrim,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLTrim));
  SdkLTrimRet_descriptor_ = file->message_type(63);
  static const int SdkLTrimRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrimRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrimRet, size_), };
  SdkLTrimRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkLTrimRet_descriptor_, SdkLTrimRet::default_instance_,
          SdkLTrimRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkLTrimRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLTrimRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkLTrimRet));
  SdkGetTTL_descriptor_ = file->message_type(64);
  static const int SdkGetTTL_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTL, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTL, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTL, key_), };
  SdkGetTTL_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetTTL_descriptor_, SdkGetTTL::default_instance_,
          SdkGetTTL_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkGetTTL, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTL,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetTTL));
  SdkGetTTLRet_descriptor_ = file->message_type(65);
  static const int SdkGetTTLRet_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTLRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTLRet, ttl_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTLRet, master_), };
  SdkGetTTLRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkGetTTLRet_descriptor_, SdkGetTTLRet::default_instance_,
          SdkGetTTLRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkGetTTLRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetTTLRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkGetTTLRet));
  SdkZAdd_descriptor_ = file->message_type(66);
  static const int SdkZAdd_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd, writesrc_), };
  SdkZAdd_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZAdd_descriptor_, SdkZAdd::default_instance_, SdkZAdd_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAdd,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZAdd));
  SdkZAddRet_descriptor_ = file->message_type(67);
  static const int SdkZAddRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAddRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAddRet, status_), };
  SdkZAddRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZAddRet_descriptor_, SdkZAddRet::default_instance_,
          SdkZAddRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkZAddRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZAddRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZAddRet));
  SdkZGet_descriptor_ = file->message_type(68);
  static const int SdkZGet_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet, key_), };
  SdkZGet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZGet_descriptor_, SdkZGet::default_instance_, SdkZGet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZGet));
  SdkZGetRet_descriptor_ = file->message_type(69);
  static const int SdkZGetRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGetRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGetRet, value_), };
  SdkZGetRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZGetRet_descriptor_, SdkZGetRet::default_instance_,
          SdkZGetRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkZGetRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZGetRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZGetRet));
  SdkZSize_descriptor_ = file->message_type(70);
  static const int SdkZSize_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSize, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSize, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSize, name_), };
  SdkZSize_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZSize_descriptor_, SdkZSize::default_instance_, SdkZSize_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSize,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSize,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZSize));
  SdkZSizeRet_descriptor_ = file->message_type(71);
  static const int SdkZSizeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSizeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSizeRet, value_), };
  SdkZSizeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZSizeRet_descriptor_, SdkZSizeRet::default_instance_,
          SdkZSizeRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkZSizeRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZSizeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZSizeRet));
  SdkZCount_descriptor_ = file->message_type(72);
  static const int SdkZCount_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount, end_), };
  SdkZCount_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZCount_descriptor_, SdkZCount::default_instance_,
          SdkZCount_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkZCount, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCount,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZCount));
  SdkZCountRet_descriptor_ = file->message_type(73);
  static const int SdkZCountRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCountRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCountRet, value_), };
  SdkZCountRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZCountRet_descriptor_, SdkZCountRet::default_instance_,
          SdkZCountRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkZCountRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZCountRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZCountRet));
  SdkZIncr_descriptor_ = file->message_type(74);
  static const int SdkZIncr_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, by_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr, writesrc_), };
  SdkZIncr_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZIncr_descriptor_, SdkZIncr::default_instance_, SdkZIncr_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncr,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZIncr));
  SdkZIncrRet_descriptor_ = file->message_type(75);
  static const int SdkZIncrRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrRet, value_), };
  SdkZIncrRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZIncrRet_descriptor_, SdkZIncrRet::default_instance_,
          SdkZIncrRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkZIncrRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZIncrRet));
  SdkZIncrByFloat_descriptor_ = file->message_type(76);
  static const int SdkZIncrByFloat_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat, by_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat,
                                                     writesrc_), };
  SdkZIncrByFloat_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZIncrByFloat_descriptor_, SdkZIncrByFloat::default_instance_,
          SdkZIncrByFloat_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloat,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZIncrByFloat));
  SdkZIncrByFloatRet_descriptor_ = file->message_type(77);
  static const int SdkZIncrByFloatRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloatRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloatRet,
                                                     value_), };
  SdkZIncrByFloatRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZIncrByFloatRet_descriptor_, SdkZIncrByFloatRet::default_instance_,
          SdkZIncrByFloatRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloatRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZIncrByFloatRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZIncrByFloatRet));
  SdkZRank_descriptor_ = file->message_type(78);
  static const int SdkZRank_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank, key_), };
  SdkZRank_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRank_descriptor_, SdkZRank::default_instance_, SdkZRank_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRank,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRank));
  SdkZRankRet_descriptor_ = file->message_type(79);
  static const int SdkZRankRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRankRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRankRet, value_), };
  SdkZRankRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRankRet_descriptor_, SdkZRankRet::default_instance_,
          SdkZRankRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SdkZRankRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRankRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRankRet));
  SdkZRRank_descriptor_ = file->message_type(80);
  static const int SdkZRRank_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRank, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRank, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRank, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRank, key_), };
  SdkZRRank_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRank_descriptor_, SdkZRRank::default_instance_,
          SdkZRRank_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkZRRank, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRank,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRank));
  SdkZRRankRet_descriptor_ = file->message_type(81);
  static const int SdkZRRankRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRankRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRankRet, value_), };
  SdkZRRankRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRankRet_descriptor_, SdkZRRankRet::default_instance_,
          SdkZRRankRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkZRRankRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRankRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRankRet));
  SdkZRange_descriptor_ = file->message_type(82);
  static const int SdkZRange_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange, end_), };
  SdkZRange_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRange_descriptor_, SdkZRange::default_instance_,
          SdkZRange_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  SdkZRange, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRange,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRange));
  SdkZRangeRet_descriptor_ = file->message_type(83);
  static const int SdkZRangeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet, kss_), };
  SdkZRangeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRangeRet_descriptor_, SdkZRangeRet::default_instance_,
          SdkZRangeRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     SdkZRangeRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRangeRet));
  SdkZRangeRet_ZKeyScore_descriptor_ = SdkZRangeRet_descriptor_->nested_type(0);
  static const int SdkZRangeRet_ZKeyScore_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet_ZKeyScore,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet_ZKeyScore,
                                                     score_), };
  SdkZRangeRet_ZKeyScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRangeRet_ZKeyScore_descriptor_,
          SdkZRangeRet_ZKeyScore::default_instance_,
          SdkZRangeRet_ZKeyScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet_ZKeyScore,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeRet_ZKeyScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRangeRet_ZKeyScore));
  SdkZRangeByScore_descriptor_ = file->message_type(84);
  static const int SdkZRangeByScore_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore, end_), };
  SdkZRangeByScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRangeByScore_descriptor_, SdkZRangeByScore::default_instance_,
          SdkZRangeByScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRangeByScore));
  SdkZRangeByScoreRet_descriptor_ = file->message_type(85);
  static const int SdkZRangeByScoreRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScoreRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScoreRet,
                                                     kss_), };
  SdkZRangeByScoreRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRangeByScoreRet_descriptor_,
          SdkZRangeByScoreRet::default_instance_, SdkZRangeByScoreRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScoreRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRangeByScoreRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRangeByScoreRet));
  SdkZRangeByScoreRet_ZKeyScore_descriptor_ =
      SdkZRangeByScoreRet_descriptor_->nested_type(0);
  static const int SdkZRangeByScoreRet_ZKeyScore_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkZRangeByScoreRet_ZKeyScore, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkZRangeByScoreRet_ZKeyScore, score_), };
  SdkZRangeByScoreRet_ZKeyScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRangeByScoreRet_ZKeyScore_descriptor_,
          SdkZRangeByScoreRet_ZKeyScore::default_instance_,
          SdkZRangeByScoreRet_ZKeyScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRangeByScoreRet_ZKeyScore, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRangeByScoreRet_ZKeyScore, _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRangeByScoreRet_ZKeyScore));
  SdkZRRange_descriptor_ = file->message_type(86);
  static const int SdkZRRange_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange, end_), };
  SdkZRRange_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRange_descriptor_, SdkZRRange::default_instance_,
          SdkZRRange_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkZRRange, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRange,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRange));
  SdkZRRangeRet_descriptor_ = file->message_type(87);
  static const int SdkZRRangeRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet, kss_), };
  SdkZRRangeRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRangeRet_descriptor_, SdkZRRangeRet::default_instance_,
          SdkZRRangeRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRangeRet));
  SdkZRRangeRet_ZKeyScore_descriptor_ =
      SdkZRRangeRet_descriptor_->nested_type(0);
  static const int SdkZRRangeRet_ZKeyScore_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet_ZKeyScore,
                                                     key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeRet_ZKeyScore,
                                                     score_), };
  SdkZRRangeRet_ZKeyScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRangeRet_ZKeyScore_descriptor_,
          SdkZRRangeRet_ZKeyScore::default_instance_,
          SdkZRRangeRet_ZKeyScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRRangeRet_ZKeyScore, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRRangeRet_ZKeyScore, _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRangeRet_ZKeyScore));
  SdkZRRangeByScore_descriptor_ = file->message_type(88);
  static const int SdkZRRangeByScore_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore,
                                                     end_), };
  SdkZRRangeByScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRangeByScore_descriptor_, SdkZRRangeByScore::default_instance_,
          SdkZRRangeByScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRangeByScore));
  SdkZRRangeByScoreRet_descriptor_ = file->message_type(89);
  static const int SdkZRRangeByScoreRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScoreRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScoreRet,
                                                     kss_), };
  SdkZRRangeByScoreRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRangeByScoreRet_descriptor_,
          SdkZRRangeByScoreRet::default_instance_,
          SdkZRRangeByScoreRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScoreRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZRRangeByScoreRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRangeByScoreRet));
  SdkZRRangeByScoreRet_ZKeyScore_descriptor_ =
      SdkZRRangeByScoreRet_descriptor_->nested_type(0);
  static const int SdkZRRangeByScoreRet_ZKeyScore_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkZRRangeByScoreRet_ZKeyScore, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          SdkZRRangeByScoreRet_ZKeyScore, score_), };
  SdkZRRangeByScoreRet_ZKeyScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZRRangeByScoreRet_ZKeyScore_descriptor_,
          SdkZRRangeByScoreRet_ZKeyScore::default_instance_,
          SdkZRRangeByScoreRet_ZKeyScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRRangeByScoreRet_ZKeyScore, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
              SdkZRRangeByScoreRet_ZKeyScore, _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZRRangeByScoreRet_ZKeyScore));
  SdkZDel_descriptor_ = file->message_type(90);
  static const int SdkZDel_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel, table_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel, writesrc_), };
  SdkZDel_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDel_descriptor_, SdkZDel::default_instance_, SdkZDel_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDel,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDel));
  SdkZDelRet_descriptor_ = file->message_type(91);
  static const int SdkZDelRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelRet, value_), };
  SdkZDelRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDelRet_descriptor_, SdkZDelRet::default_instance_,
          SdkZDelRet_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SdkZDelRet, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDelRet));
  SdkZDelByRank_descriptor_ = file->message_type(92);
  static const int SdkZDelByRank_offsets_[6] =
      {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank,
                                                         opcode_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank, table_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank, name_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank, start_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank, end_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank,
                                                         writesrc_), };
  SdkZDelByRank_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDelByRank_descriptor_, SdkZDelByRank::default_instance_,
          SdkZDelByRank_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRank,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDelByRank));
  SdkZDelByRankRet_descriptor_ = file->message_type(93);
  static const int SdkZDelByRankRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRankRet, opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRankRet,
                                                     value_), };
  SdkZDelByRankRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDelByRankRet_descriptor_, SdkZDelByRankRet::default_instance_,
          SdkZDelByRankRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRankRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByRankRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDelByRankRet));
  SdkZDelByScore_descriptor_ = file->message_type(94);
  static const int SdkZDelByScore_offsets_[6] =
      {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore, opcode_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore, table_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore, name_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore, start_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore, end_),
       GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore,
                                                      writesrc_), };
  SdkZDelByScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDelByScore_descriptor_, SdkZDelByScore::default_instance_,
          SdkZDelByScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDelByScore));
  SdkZDelByScoreRet_descriptor_ = file->message_type(95);
  static const int SdkZDelByScoreRet_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScoreRet,
                                                     opcode_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScoreRet,
                                                     value_), };
  SdkZDelByScoreRet_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SdkZDelByScoreRet_descriptor_, SdkZDelByScoreRet::default_instance_,
          SdkZDelByScoreRet_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScoreRet,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkZDelByScoreRet,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SdkZDelByScoreRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_bada_5fsdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkInvalidOperation_descriptor_,
      &SdkInvalidOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkSet_descriptor_, &SdkSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkSetRet_descriptor_, &SdkSetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkCas_descriptor_, &SdkCas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkCasRet_descriptor_, &SdkCasRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGet_descriptor_, &SdkGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetRet_descriptor_, &SdkGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetV_descriptor_, &SdkGetV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetVRet_descriptor_, &SdkGetVRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkIncrby_descriptor_, &SdkIncrby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkIncrbyRet_descriptor_, &SdkIncrbyRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkDelete_descriptor_, &SdkDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkDeleteRet_descriptor_, &SdkDeleteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkPing_descriptor_, &SdkPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkPingRet_descriptor_, &SdkPingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetIfAll_descriptor_, &SdkGetIfAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetIfAllRet_descriptor_, &SdkGetIfAllRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMGet_descriptor_, &SdkMGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMGetRet_descriptor_, &SdkMGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMGetRet_KeyValue_descriptor_,
      &SdkMGetRet_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMSet_descriptor_, &SdkMSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMSet_KeyValue_descriptor_, &SdkMSet_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMSetRet_descriptor_, &SdkMSetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkMSetRet_KeyRetval_descriptor_,
      &SdkMSetRet_KeyRetval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMetadata4SDK2_descriptor_, &GetMetadata4SDK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rint32_descriptor_, &Rint32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMetadata4SDK3_descriptor_, &GetMetadata4SDK3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMetadata4SDK3_NPs_descriptor_,
      &GetMetadata4SDK3_NPs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPrimary4SDK2_descriptor_, &GetPrimary4SDK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPrimary4SDK3_descriptor_, &GetPrimary4SDK3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGet_descriptor_, &SdkHGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetRet_descriptor_, &SdkHGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHLen_descriptor_, &SdkHLen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHLenRet_descriptor_, &SdkHLenRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHPut_descriptor_, &SdkHPut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHPutRet_descriptor_, &SdkHPutRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHDelete_descriptor_, &SdkHDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHDeleteRet_descriptor_, &SdkHDeleteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetAllKeysByName_descriptor_,
      &SdkHGetAllKeysByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetAllKeysByNameRet_descriptor_,
      &SdkHGetAllKeysByNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetAllKVsByName_descriptor_,
      &SdkHGetAllKVsByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetAllKVsByNameRet_descriptor_,
      &SdkHGetAllKVsByNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHGetAllKVsByNameRet_HKeyValue_descriptor_,
      &SdkHGetAllKVsByNameRet_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMput_descriptor_, &SdkHMput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMput_HKeyValue_descriptor_, &SdkHMput_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMputRet_descriptor_, &SdkHMputRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMputRet_HKeyRetval_descriptor_,
      &SdkHMputRet_HKeyRetval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMget_descriptor_, &SdkHMget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMgetRet_descriptor_, &SdkHMgetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHMgetRet_HKeyValue_descriptor_,
      &SdkHMgetRet_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHRange_descriptor_, &SdkHRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHRangeRet_descriptor_, &SdkHRangeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHRangeRet_HKeyValue_descriptor_,
      &SdkHRangeRet_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHTrim_descriptor_, &SdkHTrim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkHTrimRet_descriptor_, &SdkHTrimRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkSetWithTTL_descriptor_, &SdkSetWithTTL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkSetWithTTLRet_descriptor_, &SdkSetWithTTLRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLSize_descriptor_, &SdkLSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLSizeRet_descriptor_, &SdkLSizeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLGet_descriptor_, &SdkLGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLGetRet_descriptor_, &SdkLGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLPut_descriptor_, &SdkLPut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLPutRet_descriptor_, &SdkLPutRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLSet_descriptor_, &SdkLSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLSetRet_descriptor_, &SdkLSetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLPop_descriptor_, &SdkLPop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLPopRet_descriptor_, &SdkLPopRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLIndex_descriptor_, &SdkLIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLIndexRet_descriptor_, &SdkLIndexRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLRange_descriptor_, &SdkLRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLRangeRet_descriptor_, &SdkLRangeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLTrim_descriptor_, &SdkLTrim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkLTrimRet_descriptor_, &SdkLTrimRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetTTL_descriptor_, &SdkGetTTL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkGetTTLRet_descriptor_, &SdkGetTTLRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZAdd_descriptor_, &SdkZAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZAddRet_descriptor_, &SdkZAddRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZGet_descriptor_, &SdkZGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZGetRet_descriptor_, &SdkZGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZSize_descriptor_, &SdkZSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZSizeRet_descriptor_, &SdkZSizeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZCount_descriptor_, &SdkZCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZCountRet_descriptor_, &SdkZCountRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZIncr_descriptor_, &SdkZIncr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZIncrRet_descriptor_, &SdkZIncrRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZIncrByFloat_descriptor_, &SdkZIncrByFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZIncrByFloatRet_descriptor_, &SdkZIncrByFloatRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRank_descriptor_, &SdkZRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRankRet_descriptor_, &SdkZRankRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRank_descriptor_, &SdkZRRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRankRet_descriptor_, &SdkZRRankRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRange_descriptor_, &SdkZRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRangeRet_descriptor_, &SdkZRangeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRangeRet_ZKeyScore_descriptor_,
      &SdkZRangeRet_ZKeyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRangeByScore_descriptor_, &SdkZRangeByScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRangeByScoreRet_descriptor_,
      &SdkZRangeByScoreRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRangeByScoreRet_ZKeyScore_descriptor_,
      &SdkZRangeByScoreRet_ZKeyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRange_descriptor_, &SdkZRRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRangeRet_descriptor_, &SdkZRRangeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRangeRet_ZKeyScore_descriptor_,
      &SdkZRRangeRet_ZKeyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRangeByScore_descriptor_, &SdkZRRangeByScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRangeByScoreRet_descriptor_,
      &SdkZRRangeByScoreRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZRRangeByScoreRet_ZKeyScore_descriptor_,
      &SdkZRRangeByScoreRet_ZKeyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDel_descriptor_, &SdkZDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDelRet_descriptor_, &SdkZDelRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDelByRank_descriptor_, &SdkZDelByRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDelByRankRet_descriptor_, &SdkZDelByRankRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDelByScore_descriptor_, &SdkZDelByScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdkZDelByScoreRet_descriptor_, &SdkZDelByScoreRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bada_5fsdk_2eproto() {
  delete SdkInvalidOperation::default_instance_;
  delete SdkInvalidOperation_reflection_;
  delete SdkSet::default_instance_;
  delete SdkSet_reflection_;
  delete SdkSetRet::default_instance_;
  delete SdkSetRet_reflection_;
  delete SdkCas::default_instance_;
  delete SdkCas_reflection_;
  delete SdkCasRet::default_instance_;
  delete SdkCasRet_reflection_;
  delete SdkGet::default_instance_;
  delete SdkGet_reflection_;
  delete SdkGetRet::default_instance_;
  delete SdkGetRet_reflection_;
  delete SdkGetV::default_instance_;
  delete SdkGetV_reflection_;
  delete SdkGetVRet::default_instance_;
  delete SdkGetVRet_reflection_;
  delete SdkIncrby::default_instance_;
  delete SdkIncrby_reflection_;
  delete SdkIncrbyRet::default_instance_;
  delete SdkIncrbyRet_reflection_;
  delete SdkDelete::default_instance_;
  delete SdkDelete_reflection_;
  delete SdkDeleteRet::default_instance_;
  delete SdkDeleteRet_reflection_;
  delete SdkPing::default_instance_;
  delete SdkPing_reflection_;
  delete SdkPingRet::default_instance_;
  delete SdkPingRet_reflection_;
  delete SdkGetIfAll::default_instance_;
  delete SdkGetIfAll_reflection_;
  delete SdkGetIfAllRet::default_instance_;
  delete SdkGetIfAllRet_reflection_;
  delete SdkMGet::default_instance_;
  delete SdkMGet_reflection_;
  delete SdkMGetRet::default_instance_;
  delete SdkMGetRet_reflection_;
  delete SdkMGetRet_KeyValue::default_instance_;
  delete SdkMGetRet_KeyValue_reflection_;
  delete SdkMSet::default_instance_;
  delete SdkMSet_reflection_;
  delete SdkMSet_KeyValue::default_instance_;
  delete SdkMSet_KeyValue_reflection_;
  delete SdkMSetRet::default_instance_;
  delete SdkMSetRet_reflection_;
  delete SdkMSetRet_KeyRetval::default_instance_;
  delete SdkMSetRet_KeyRetval_reflection_;
  delete GetMetadata4SDK2::default_instance_;
  delete GetMetadata4SDK2_reflection_;
  delete Rint32::default_instance_;
  delete Rint32_reflection_;
  delete GetMetadata4SDK3::default_instance_;
  delete GetMetadata4SDK3_reflection_;
  delete GetMetadata4SDK3_NPs::default_instance_;
  delete GetMetadata4SDK3_NPs_reflection_;
  delete GetPrimary4SDK2::default_instance_;
  delete GetPrimary4SDK2_reflection_;
  delete GetPrimary4SDK3::default_instance_;
  delete GetPrimary4SDK3_reflection_;
  delete SdkHGet::default_instance_;
  delete SdkHGet_reflection_;
  delete SdkHGetRet::default_instance_;
  delete SdkHGetRet_reflection_;
  delete SdkHLen::default_instance_;
  delete SdkHLen_reflection_;
  delete SdkHLenRet::default_instance_;
  delete SdkHLenRet_reflection_;
  delete SdkHPut::default_instance_;
  delete SdkHPut_reflection_;
  delete SdkHPutRet::default_instance_;
  delete SdkHPutRet_reflection_;
  delete SdkHDelete::default_instance_;
  delete SdkHDelete_reflection_;
  delete SdkHDeleteRet::default_instance_;
  delete SdkHDeleteRet_reflection_;
  delete SdkHGetAllKeysByName::default_instance_;
  delete SdkHGetAllKeysByName_reflection_;
  delete SdkHGetAllKeysByNameRet::default_instance_;
  delete SdkHGetAllKeysByNameRet_reflection_;
  delete SdkHGetAllKVsByName::default_instance_;
  delete SdkHGetAllKVsByName_reflection_;
  delete SdkHGetAllKVsByNameRet::default_instance_;
  delete SdkHGetAllKVsByNameRet_reflection_;
  delete SdkHGetAllKVsByNameRet_HKeyValue::default_instance_;
  delete SdkHGetAllKVsByNameRet_HKeyValue_reflection_;
  delete SdkHMput::default_instance_;
  delete SdkHMput_reflection_;
  delete SdkHMput_HKeyValue::default_instance_;
  delete SdkHMput_HKeyValue_reflection_;
  delete SdkHMputRet::default_instance_;
  delete SdkHMputRet_reflection_;
  delete SdkHMputRet_HKeyRetval::default_instance_;
  delete SdkHMputRet_HKeyRetval_reflection_;
  delete SdkHMget::default_instance_;
  delete SdkHMget_reflection_;
  delete SdkHMgetRet::default_instance_;
  delete SdkHMgetRet_reflection_;
  delete SdkHMgetRet_HKeyValue::default_instance_;
  delete SdkHMgetRet_HKeyValue_reflection_;
  delete SdkHRange::default_instance_;
  delete SdkHRange_reflection_;
  delete SdkHRangeRet::default_instance_;
  delete SdkHRangeRet_reflection_;
  delete SdkHRangeRet_HKeyValue::default_instance_;
  delete SdkHRangeRet_HKeyValue_reflection_;
  delete SdkHTrim::default_instance_;
  delete SdkHTrim_reflection_;
  delete SdkHTrimRet::default_instance_;
  delete SdkHTrimRet_reflection_;
  delete SdkSetWithTTL::default_instance_;
  delete SdkSetWithTTL_reflection_;
  delete SdkSetWithTTLRet::default_instance_;
  delete SdkSetWithTTLRet_reflection_;
  delete SdkLSize::default_instance_;
  delete SdkLSize_reflection_;
  delete SdkLSizeRet::default_instance_;
  delete SdkLSizeRet_reflection_;
  delete SdkLGet::default_instance_;
  delete SdkLGet_reflection_;
  delete SdkLGetRet::default_instance_;
  delete SdkLGetRet_reflection_;
  delete SdkLPut::default_instance_;
  delete SdkLPut_reflection_;
  delete SdkLPutRet::default_instance_;
  delete SdkLPutRet_reflection_;
  delete SdkLSet::default_instance_;
  delete SdkLSet_reflection_;
  delete SdkLSetRet::default_instance_;
  delete SdkLSetRet_reflection_;
  delete SdkLPop::default_instance_;
  delete SdkLPop_reflection_;
  delete SdkLPopRet::default_instance_;
  delete SdkLPopRet_reflection_;
  delete SdkLIndex::default_instance_;
  delete SdkLIndex_reflection_;
  delete SdkLIndexRet::default_instance_;
  delete SdkLIndexRet_reflection_;
  delete SdkLRange::default_instance_;
  delete SdkLRange_reflection_;
  delete SdkLRangeRet::default_instance_;
  delete SdkLRangeRet_reflection_;
  delete SdkLTrim::default_instance_;
  delete SdkLTrim_reflection_;
  delete SdkLTrimRet::default_instance_;
  delete SdkLTrimRet_reflection_;
  delete SdkGetTTL::default_instance_;
  delete SdkGetTTL_reflection_;
  delete SdkGetTTLRet::default_instance_;
  delete SdkGetTTLRet_reflection_;
  delete SdkZAdd::default_instance_;
  delete SdkZAdd_reflection_;
  delete SdkZAddRet::default_instance_;
  delete SdkZAddRet_reflection_;
  delete SdkZGet::default_instance_;
  delete SdkZGet_reflection_;
  delete SdkZGetRet::default_instance_;
  delete SdkZGetRet_reflection_;
  delete SdkZSize::default_instance_;
  delete SdkZSize_reflection_;
  delete SdkZSizeRet::default_instance_;
  delete SdkZSizeRet_reflection_;
  delete SdkZCount::default_instance_;
  delete SdkZCount_reflection_;
  delete SdkZCountRet::default_instance_;
  delete SdkZCountRet_reflection_;
  delete SdkZIncr::default_instance_;
  delete SdkZIncr_reflection_;
  delete SdkZIncrRet::default_instance_;
  delete SdkZIncrRet_reflection_;
  delete SdkZIncrByFloat::default_instance_;
  delete SdkZIncrByFloat_reflection_;
  delete SdkZIncrByFloatRet::default_instance_;
  delete SdkZIncrByFloatRet_reflection_;
  delete SdkZRank::default_instance_;
  delete SdkZRank_reflection_;
  delete SdkZRankRet::default_instance_;
  delete SdkZRankRet_reflection_;
  delete SdkZRRank::default_instance_;
  delete SdkZRRank_reflection_;
  delete SdkZRRankRet::default_instance_;
  delete SdkZRRankRet_reflection_;
  delete SdkZRange::default_instance_;
  delete SdkZRange_reflection_;
  delete SdkZRangeRet::default_instance_;
  delete SdkZRangeRet_reflection_;
  delete SdkZRangeRet_ZKeyScore::default_instance_;
  delete SdkZRangeRet_ZKeyScore_reflection_;
  delete SdkZRangeByScore::default_instance_;
  delete SdkZRangeByScore_reflection_;
  delete SdkZRangeByScoreRet::default_instance_;
  delete SdkZRangeByScoreRet_reflection_;
  delete SdkZRangeByScoreRet_ZKeyScore::default_instance_;
  delete SdkZRangeByScoreRet_ZKeyScore_reflection_;
  delete SdkZRRange::default_instance_;
  delete SdkZRRange_reflection_;
  delete SdkZRRangeRet::default_instance_;
  delete SdkZRRangeRet_reflection_;
  delete SdkZRRangeRet_ZKeyScore::default_instance_;
  delete SdkZRRangeRet_ZKeyScore_reflection_;
  delete SdkZRRangeByScore::default_instance_;
  delete SdkZRRangeByScore_reflection_;
  delete SdkZRRangeByScoreRet::default_instance_;
  delete SdkZRRangeByScoreRet_reflection_;
  delete SdkZRRangeByScoreRet_ZKeyScore::default_instance_;
  delete SdkZRRangeByScoreRet_ZKeyScore_reflection_;
  delete SdkZDel::default_instance_;
  delete SdkZDel_reflection_;
  delete SdkZDelRet::default_instance_;
  delete SdkZDelRet_reflection_;
  delete SdkZDelByRank::default_instance_;
  delete SdkZDelByRank_reflection_;
  delete SdkZDelByRankRet::default_instance_;
  delete SdkZDelByRankRet_reflection_;
  delete SdkZDelByScore::default_instance_;
  delete SdkZDelByScore_reflection_;
  delete SdkZDelByScoreRet::default_instance_;
  delete SdkZDelByScoreRet_reflection_;
}

void protobuf_AddDesc_bada_5fsdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\016bada_sdk.proto\"@\n\023SdkInvalidOperation\022"
      "\016\n\006opcode\030\001 \002(\005\022\014\n\004what\030\002 "
      "\002(\005\022\013\n\003why\030\003 \002"
      "(\014\"X\n\006SdkSet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n\003key\030\003 \002(\014\022\r\n\005value\030\004 "
      "\002(\014\022\023\n\010write"
      "src\030\005 \001(\005:\0010\";\n\tSdkSetRet\022\016\n\006opcode\030\001 "
      "\002("
      "\005\022\016\n\006status\030\002 \002(\010\022\016\n\006master\030\003 "
      "\001(\t\"i\n\006Sdk"
      "Cas\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n\003ke"
      "y\030\003 \002(\014\022\r\n\005value\030\004 "
      "\002(\014\022\017\n\007version\030\005 \002(\005\022"
      "\023\n\010writesrc\030\006 "
      "\001(\005:\0010\";\n\tSdkCasRet\022\016\n\006opc"
      "ode\030\001 \002(\005\022\016\n\006status\030\002 "
      "\002(\010\022\016\n\006master\030\003 \001("
      "\t\"4\n\006SdkGet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030\002 \002"
      "(\014\022\013\n\003key\030\003 "
      "\002(\014\":\n\tSdkGetRet\022\016\n\006opcode\030\001"
      " \002(\005\022\r\n\005value\030\002 "
      "\002(\014\022\016\n\006master\030\003 \001(\t\"5\n\007S"
      "dkGetV\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n"
      "\003key\030\003 \002(\014\"L\n\nSdkGetVRet\022\016\n\006opcode\030\001 "
      "\002(\005"
      "\022\r\n\005value\030\002 \002(\014\022\017\n\007version\030\003 "
      "\002(\005\022\016\n\006mast"
      "er\030\004 \001(\t\"l\n\tSdkIncrby\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n"
      "\005table\030\002 \002(\014\022\013\n\003key\030\003 "
      "\002(\014\022\n\n\002by\030\004 \002(\003\022\022\n"
      "\nincrordecr\030\005 \002(\005\022\023\n\010writesrc\030\006 "
      "\001(\005:\0010\"-"
      "\n\014SdkIncrbyRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005value\030"
      "\002 \002(\014\"L\n\tSdkDelete\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005ta"
      "ble\030\002 \002(\014\022\013\n\003key\030\003 "
      "\002(\014\022\023\n\010writesrc\030\004 \001(\005"
      ":\0010\">\n\014SdkDeleteRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n\006s"
      "tatus\030\002 \002(\010\022\016\n\006master\030\003 "
      "\001(\t\"\031\n\007SdkPing\022\016"
      "\n\006opcode\030\001 "
      "\002(\005\",\n\nSdkPingRet\022\016\n\006opcode\030\001"
      " \002(\005\022\016\n\006status\030\002 "
      "\002(\010\"I\n\013SdkGetIfAll\022\016\n\006o"
      "pcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n\003key\030\003 \002(\014\022"
      "\016\n\006Strict\030\004 "
      "\002(\010\"P\n\016SdkGetIfAllRet\022\016\n\006opc"
      "ode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\022\017\n\007version\030\003 \002("
      "\005\022\016\n\006master\030\004 "
      "\001(\t\"5\n\007SdkMGet\022\016\n\006opcode\030\001"
      " \002(\005\022\r\n\005table\030\002 \002(\014\022\013\n\003key\030\003 "
      "\003(\014\"\210\001\n\nSdk"
      "MGetRet\022\016\n\006opcode\030\001 \002(\005\022\"\n\004rets\030\002 "
      "\003(\0132\024."
      "SdkMGetRet.KeyValue\022\016\n\006master\030\003 \001(\t\0326\n\010K"
      "eyValue\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 "
      "\002(\014\022\016\n\006s"
      "tatus\030\003 "
      "\002(\005\"\205\001\n\007SdkMSet\022\016\n\006opcode\030\001 "
      "\002(\005\022"
      "\r\n\005table\030\002 \002(\014\022\036\n\003kvs\030\003 "
      "\003(\0132\021.SdkMSet.Ke"
      "yValue\022\023\n\010writesrc\030\004 "
      "\001(\005:\0010\032&\n\010KeyValue\022"
      "\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 "
      "\002(\014\"k\n\nSdkMSetRe"
      "t\022\016\n\006opcode\030\001 \002(\005\022#\n\004krvs\030\002 "
      "\003(\0132\025.SdkMSe"
      "tRet.KeyRetval\032(\n\tKeyRetval\022\013\n\003key\030\001 \002(\014"
      "\022\016\n\006retval\030\002 "
      "\002(\005\".\n\020GetMetadata4SDK2\022\013\n\003"
      "cmd\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\t\"\024\n\006Rint32\022\n\n\002id"
      "\030\001 "
      "\002(\005\"\221\001\n\020GetMetadata4SDK3\022\013\n\003cmd\030\001 "
      "\002(\005"
      "\022\"\n\003nps\030\002 "
      "\003(\0132\025.GetMetadata4SDK3.NPs\022\014\n\004"
      "pcnt\030\003 \002(\005\032>\n\003NPs\022\014\n\004host\030\001 "
      "\002(\t\022\014\n\004port\030"
      "\002 \002(\005\022\033\n\npartitions\030\003 "
      "\003(\0132\007.Rint32\"@\n\017Ge"
      "tPrimary4SDK2\022\013\n\003cmd\030\001 "
      "\002(\005\022\r\n\005table\030\002 \002("
      "\t\022\021\n\tpartition\030\003 \002(\005\":\n\017GetPrimary4SDK3\022"
      "\013\n\003cmd\030\001 \002(\005\022\014\n\004host\030\002 "
      "\002(\t\022\014\n\004port\030\003 \002(\005"
      "\"D\n\007SdkHGet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030\002 \002"
      "(\014\022\r\n\005hname\030\003 \002(\014\022\013\n\003key\030\004 "
      "\002(\014\"+\n\nSdkHGe"
      "tRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\"7\n\007S"
      "dkHLen\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\r\n"
      "\005hname\030\003 "
      "\002(\014\"+\n\nSdkHLenRet\022\016\n\006opcode\030\001 \002"
      "(\005\022\r\n\005value\030\002 "
      "\002(\003\"h\n\007SdkHPut\022\016\n\006opcode\030\001"
      " \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005hname\030\003 "
      "\002(\014\022\013\n\003ke"
      "y\030\004 \002(\014\022\r\n\005value\030\005 "
      "\002(\014\022\023\n\010writesrc\030\006 \001(\005"
      ":\0010\",\n\nSdkHPutRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n\006sta"
      "tus\030\002 \002(\010\"\\\n\nSdkHDelete\022\016\n\006opcode\030\001 "
      "\002(\005\022"
      "\r\n\005table\030\002 \002(\014\022\r\n\005hname\030\003 "
      "\002(\014\022\013\n\003key\030\004 \002"
      "(\014\022\023\n\010writesrc\030\005 \001(\005:\0010\"/\n\rSdkHDeleteRet"
      "\022\016\n\006opcode\030\001 \002(\005\022\016\n\006status\030\002 "
      "\002(\010\"D\n\024SdkH"
      "GetAllKeysByName\022\016\n\006opcode\030\001 \002(\005\022\r\n\005tabl"
      "e\030\002 \002(\014\022\r\n\005hname\030\003 "
      "\002(\014\"7\n\027SdkHGetAllKeys"
      "ByNameRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\014\n\004keys\030\002 \003(\014\""
      "C\n\023SdkHGetAllKVsByName\022\016\n\006opcode\030\001 \002(\005\022\r"
      "\n\005table\030\002 \002(\014\022\r\n\005hname\030\003 "
      "\002(\014\"\202\001\n\026SdkHGet"
      "AllKVsByNameRet\022\016\n\006opcode\030\001 \002(\005\022/\n\004rets\030"
      "\002 \003(\0132!.SdkHGetAllKVsByNameRet.HKeyValue"
      "\032\'\n\tHKeyValue\022\013\n\003key\030\001 "
      "\002(\014\022\r\n\005value\030\002 \002("
      "\014\"\230\001\n\010SdkHMput\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030"
      "\002 \002(\014\022\r\n\005hname\030\003 \002(\014\022 \n\003kvs\030\004 "
      "\003(\0132\023.SdkH"
      "Mput.HKeyValue\022\023\n\010writesrc\030\005 \001(\005:\0010\032\'\n\tH"
      "KeyValue\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 "
      "\002(\014\"o\n\013"
      "SdkHMputRet\022\016\n\006opcode\030\001 "
      "\002(\005\022%\n\004krvs\030\002 \003("
      "\0132\027.SdkHMputRet.HKeyRetval\032)\n\nHKeyRetval"
      "\022\013\n\003key\030\001 \002(\014\022\016\n\006retval\030\002 "
      "\002(\005\"F\n\010SdkHMge"
      "t\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\r\n\005hnam"
      "e\030\003 \002(\014\022\014\n\004keys\030\004 "
      "\003(\014\"{\n\013SdkHMgetRet\022\016\n\006"
      "opcode\030\001 \002(\005\022#\n\003kvs\030\002 "
      "\003(\0132\026.SdkHMgetRet."
      "HKeyValue\0327\n\tHKeyValue\022\013\n\003key\030\001 "
      "\002(\014\022\r\n\005v"
      "alue\030\002 \002(\014\022\016\n\006retval\030\003 "
      "\002(\005\"T\n\tSdkHRange\022"
      "\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003"
      " \002(\014\022\r\n\005start\030\004 \002(\014\022\013\n\003end\030\005 "
      "\002(\014\"m\n\014SdkH"
      "RangeRet\022\016\n\006opcode\030\001 \002(\005\022$\n\003kvs\030\002 "
      "\003(\0132\027."
      "SdkHRangeRet.HKeyValue\032\'\n\tHKeyValue\022\013\n\003k"
      "ey\030\001 \002(\014\022\r\n\005value\030\002 "
      "\002(\014\"i\n\010SdkHTrim\022\016\n\006o"
      "pcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\r\n\005hname\030\003 \002("
      "\014\022\r\n\005start\030\004 \002(\014\022\013\n\003end\030\005 "
      "\002(\014\022\023\n\010writesr"
      "c\030\006 "
      "\001(\005:\0010\"-\n\013SdkHTrimRet\022\016\n\006opcode\030\001 \002("
      "\005\022\016\n\006retval\030\002 "
      "\002(\005\"l\n\rSdkSetWithTTL\022\016\n\006op"
      "code\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n\003key\030\003 \002(\014\022\r"
      "\n\005value\030\004 \002(\014\022\013\n\003ttl\030\005 "
      "\002(\005\022\023\n\010writesrc\030\006"
      " \001(\005:\0010\"B\n\020SdkSetWithTTLRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n\006status\030\002 "
      "\002(\010\022\016\n\006master\030\003 \001(\t\"7\n\010S"
      "dkLSize\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014"
      "\n\004name\030\003 "
      "\002(\014\"-\n\013SdkLSizeRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n\006size_r\030\002 "
      "\002(\004\"K\n\007SdkLGet\022\016\n\006opcode"
      "\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003 \002(\014\022\023\n\013f"
      "rontorback\030\004 \002(\005\"+\n\nSdkLGetRet\022\016\n\006opcode"
      "\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\"o\n\007SdkLPut\022\016\n\006opco"
      "de\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003 \002(\014\022\r\n"
      "\005value\030\004 \002(\014\022\023\n\013frontorback\030\005 "
      "\002(\005\022\023\n\010wri"
      "tesrc\030\006 "
      "\001(\005:\0010\",\n\nSdkLPutRet\022\016\n\006opcode\030\001"
      " \002(\005\022\016\n\006status\030\002 "
      "\002(\010\"[\n\007SdkLSet\022\016\n\006opcod"
      "e\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\r\n\005index\030\003 \002(\005\022\r\n"
      "\005value\030\004 \002(\014\022\023\n\010writesrc\030\005 "
      "\001(\005:\0010\",\n\nSdk"
      "LSetRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n\006status\030\002 \002(\010\""
      "`\n\007SdkLPop\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030\002 \002("
      "\014\022\014\n\004name\030\003 "
      "\002(\014\022\023\n\013frontorback\030\004 \002(\005\022\023\n\010"
      "writesrc\030\005 \001(\005:\0010\"+\n\nSdkLPopRet\022\016\n\006opcod"
      "e\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\"\\\n\tSdkLIndex\022\016\n\006o"
      "pcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003 \002(\014"
      "\022\r\n\005index\030\004 \002(\004\022\023\n\013frontorback\030\005 "
      "\002(\005\"-\n\014"
      "SdkLIndexRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005value\030\002 "
      "\002(\014\"g\n\tSdkLRange\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005tabl"
      "e\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\014\n\004from\030\004 \002(\004\022\n\n\002t"
      "o\030\005 \002(\004\022\023\n\013frontorback\030\006 "
      "\002(\005\"-\n\014SdkLRang"
      "eRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\003(\014\"f\n\010S"
      "dkLTrim\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014"
      "\n\004name\030\003 \002(\014\022\014\n\004from\030\004 "
      "\002(\003\022\n\n\002to\030\005 \002(\003\022\023"
      "\n\010writesrc\030\006 "
      "\001(\005:\0010\"+\n\013SdkLTrimRet\022\016\n\006op"
      "code\030\001 \002(\005\022\014\n\004size\030\002 "
      "\002(\003\"7\n\tSdkGetTTL\022\016\n"
      "\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\013\n\003key\030\003 \002("
      "\014\";\n\014SdkGetTTLRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\013\n\003ttl"
      "\030\002 \002(\005\022\016\n\006master\030\003 "
      "\001(\t\"g\n\007SdkZAdd\022\016\n\006opc"
      "ode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003 \002(\014\022\r"
      "\n\005score\030\004 \002(\014\022\013\n\003key\030\005 "
      "\002(\014\022\023\n\010writesrc\030\006"
      " \001(\005:\0010\",\n\nSdkZAddRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\016\n"
      "\006status\030\002 "
      "\002(\010\"C\n\007SdkZGet\022\016\n\006opcode\030\001 \002(\005"
      "\022\r\n\005table\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\013\n\003key\030\004 \002"
      "(\014\"+\n\nSdkZGetRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005valu"
      "e\030\002 \002(\014\"7\n\010SdkZSize\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005t"
      "able\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\",\n\013SdkZSizeRet\022"
      "\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\003\"T\n\tSdkZCo"
      "unt\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004na"
      "me\030\003 \002(\014\022\r\n\005start\030\004 "
      "\002(\014\022\013\n\003end\030\005 \002(\014\"-\n\014"
      "SdkZCountRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005value\030\002 "
      "\002(\003\"e\n\010SdkZIncr\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table"
      "\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\013\n\003key\030\004 \002(\014\022\n\n\002by\030"
      "\005 \002(\003\022\023\n\010writesrc\030\006 "
      "\001(\005:\0010\",\n\013SdkZIncrRe"
      "t\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\"l\n\017SdkZ"
      "IncrByFloat\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005table\030\002 \002"
      "(\014\022\014\n\004name\030\003 \002(\014\022\013\n\003key\030\004 "
      "\002(\014\022\n\n\002by\030\005 \002("
      "\014\022\023\n\010writesrc\030\006 "
      "\001(\005:\0010\"3\n\022SdkZIncrByFloa"
      "tRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\014\"D\n\010S"
      "dkZRank\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014"
      "\n\004name\030\003 \002(\014\022\013\n\003key\030\004 "
      "\002(\014\",\n\013SdkZRankRet"
      "\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\003\"E\n\tSdkZR"
      "Rank\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004n"
      "ame\030\003 \002(\014\022\013\n\003key\030\004 "
      "\002(\014\"-\n\014SdkZRRankRet\022\016"
      "\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 "
      "\002(\003\"T\n\tSdkZRan"
      "ge\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004nam"
      "e\030\003 \002(\014\022\r\n\005start\030\004 "
      "\002(\003\022\013\n\003end\030\005 \002(\003\"m\n\014S"
      "dkZRangeRet\022\016\n\006opcode\030\001 \002(\005\022$\n\003kss\030\002 "
      "\003(\013"
      "2\027.SdkZRangeRet.ZKeyScore\032\'\n\tZKeyScore\022\013"
      "\n\003key\030\001 \002(\014\022\r\n\005score\030\002 "
      "\002(\014\"[\n\020SdkZRangeB"
      "yScore\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n"
      "\004name\030\003 \002(\014\022\r\n\005start\030\004 "
      "\002(\014\022\013\n\003end\030\005 \002(\014\""
      "{\n\023SdkZRangeByScoreRet\022\016\n\006opcode\030\001 \002(\005\022+"
      "\n\003kss\030\002 \003(\0132\036.SdkZRangeByScoreRet.ZKeySc"
      "ore\032\'\n\tZKeyScore\022\013\n\003key\030\001 "
      "\002(\014\022\r\n\005score\030\002"
      " \002(\014\"U\n\nSdkZRRange\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005ta"
      "ble\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\r\n\005start\030\004 \002(\003\022\013"
      "\n\003end\030\005 "
      "\002(\003\"o\n\rSdkZRRangeRet\022\016\n\006opcode\030\001"
      " \002(\005\022%\n\003kss\030\002 \003(\0132\030.SdkZRRangeRet.ZKeySc"
      "ore\032\'\n\tZKeyScore\022\013\n\003key\030\001 "
      "\002(\014\022\r\n\005score\030\002"
      " \002(\014\"\\\n\021SdkZRRangeByScore\022\016\n\006opcode\030\001 \002("
      "\005\022\r\n\005table\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\r\n\005start\030"
      "\004 \002(\014\022\013\n\003end\030\005 "
      "\002(\014\"}\n\024SdkZRRangeByScoreR"
      "et\022\016\n\006opcode\030\001 \002(\005\022,\n\003kss\030\002 "
      "\003(\0132\037.SdkZRR"
      "angeByScoreRet.ZKeyScore\032\'\n\tZKeyScore\022\013\n"
      "\003key\030\001 \002(\014\022\r\n\005score\030\002 "
      "\002(\014\"X\n\007SdkZDel\022\016\n\006"
      "opcode\030\001 \002(\005\022\r\n\005table\030\002 "
      "\002(\014\022\014\n\004name\030\003 \002("
      "\014\022\013\n\003key\030\004 \002(\014\022\023\n\010writesrc\030\005 "
      "\001(\005:\0010\"+\n\nS"
      "dkZDelRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005value\030\002 \002(\003"
      "\"m\n\rSdkZDelByRank\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005tab"
      "le\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\r\n\005start\030\004 \002(\003\022\013\n"
      "\003end\030\005 \002(\003\022\023\n\010writesrc\030\006 "
      "\001(\005:\0010\"1\n\020SdkZD"
      "elByRankRet\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005value\030\002 \002"
      "(\003\"n\n\016SdkZDelByScore\022\016\n\006opcode\030\001 "
      "\002(\005\022\r\n\005"
      "table\030\002 \002(\014\022\014\n\004name\030\003 "
      "\002(\014\022\r\n\005start\030\004 \002(\014"
      "\022\013\n\003end\030\005 \002(\014\022\023\n\010writesrc\030\006 "
      "\001(\005:\0010\"2\n\021Sd"
      "kZDelByScoreRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value"
      "\030\002 \002(\003",
      7366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "bada_sdk.proto", &protobuf_RegisterTypes);
  SdkInvalidOperation::default_instance_ = new SdkInvalidOperation();
  SdkSet::default_instance_ = new SdkSet();
  SdkSetRet::default_instance_ = new SdkSetRet();
  SdkCas::default_instance_ = new SdkCas();
  SdkCasRet::default_instance_ = new SdkCasRet();
  SdkGet::default_instance_ = new SdkGet();
  SdkGetRet::default_instance_ = new SdkGetRet();
  SdkGetV::default_instance_ = new SdkGetV();
  SdkGetVRet::default_instance_ = new SdkGetVRet();
  SdkIncrby::default_instance_ = new SdkIncrby();
  SdkIncrbyRet::default_instance_ = new SdkIncrbyRet();
  SdkDelete::default_instance_ = new SdkDelete();
  SdkDeleteRet::default_instance_ = new SdkDeleteRet();
  SdkPing::default_instance_ = new SdkPing();
  SdkPingRet::default_instance_ = new SdkPingRet();
  SdkGetIfAll::default_instance_ = new SdkGetIfAll();
  SdkGetIfAllRet::default_instance_ = new SdkGetIfAllRet();
  SdkMGet::default_instance_ = new SdkMGet();
  SdkMGetRet::default_instance_ = new SdkMGetRet();
  SdkMGetRet_KeyValue::default_instance_ = new SdkMGetRet_KeyValue();
  SdkMSet::default_instance_ = new SdkMSet();
  SdkMSet_KeyValue::default_instance_ = new SdkMSet_KeyValue();
  SdkMSetRet::default_instance_ = new SdkMSetRet();
  SdkMSetRet_KeyRetval::default_instance_ = new SdkMSetRet_KeyRetval();
  GetMetadata4SDK2::default_instance_ = new GetMetadata4SDK2();
  Rint32::default_instance_ = new Rint32();
  GetMetadata4SDK3::default_instance_ = new GetMetadata4SDK3();
  GetMetadata4SDK3_NPs::default_instance_ = new GetMetadata4SDK3_NPs();
  GetPrimary4SDK2::default_instance_ = new GetPrimary4SDK2();
  GetPrimary4SDK3::default_instance_ = new GetPrimary4SDK3();
  SdkHGet::default_instance_ = new SdkHGet();
  SdkHGetRet::default_instance_ = new SdkHGetRet();
  SdkHLen::default_instance_ = new SdkHLen();
  SdkHLenRet::default_instance_ = new SdkHLenRet();
  SdkHPut::default_instance_ = new SdkHPut();
  SdkHPutRet::default_instance_ = new SdkHPutRet();
  SdkHDelete::default_instance_ = new SdkHDelete();
  SdkHDeleteRet::default_instance_ = new SdkHDeleteRet();
  SdkHGetAllKeysByName::default_instance_ = new SdkHGetAllKeysByName();
  SdkHGetAllKeysByNameRet::default_instance_ = new SdkHGetAllKeysByNameRet();
  SdkHGetAllKVsByName::default_instance_ = new SdkHGetAllKVsByName();
  SdkHGetAllKVsByNameRet::default_instance_ = new SdkHGetAllKVsByNameRet();
  SdkHGetAllKVsByNameRet_HKeyValue::default_instance_ =
      new SdkHGetAllKVsByNameRet_HKeyValue();
  SdkHMput::default_instance_ = new SdkHMput();
  SdkHMput_HKeyValue::default_instance_ = new SdkHMput_HKeyValue();
  SdkHMputRet::default_instance_ = new SdkHMputRet();
  SdkHMputRet_HKeyRetval::default_instance_ = new SdkHMputRet_HKeyRetval();
  SdkHMget::default_instance_ = new SdkHMget();
  SdkHMgetRet::default_instance_ = new SdkHMgetRet();
  SdkHMgetRet_HKeyValue::default_instance_ = new SdkHMgetRet_HKeyValue();
  SdkHRange::default_instance_ = new SdkHRange();
  SdkHRangeRet::default_instance_ = new SdkHRangeRet();
  SdkHRangeRet_HKeyValue::default_instance_ = new SdkHRangeRet_HKeyValue();
  SdkHTrim::default_instance_ = new SdkHTrim();
  SdkHTrimRet::default_instance_ = new SdkHTrimRet();
  SdkSetWithTTL::default_instance_ = new SdkSetWithTTL();
  SdkSetWithTTLRet::default_instance_ = new SdkSetWithTTLRet();
  SdkLSize::default_instance_ = new SdkLSize();
  SdkLSizeRet::default_instance_ = new SdkLSizeRet();
  SdkLGet::default_instance_ = new SdkLGet();
  SdkLGetRet::default_instance_ = new SdkLGetRet();
  SdkLPut::default_instance_ = new SdkLPut();
  SdkLPutRet::default_instance_ = new SdkLPutRet();
  SdkLSet::default_instance_ = new SdkLSet();
  SdkLSetRet::default_instance_ = new SdkLSetRet();
  SdkLPop::default_instance_ = new SdkLPop();
  SdkLPopRet::default_instance_ = new SdkLPopRet();
  SdkLIndex::default_instance_ = new SdkLIndex();
  SdkLIndexRet::default_instance_ = new SdkLIndexRet();
  SdkLRange::default_instance_ = new SdkLRange();
  SdkLRangeRet::default_instance_ = new SdkLRangeRet();
  SdkLTrim::default_instance_ = new SdkLTrim();
  SdkLTrimRet::default_instance_ = new SdkLTrimRet();
  SdkGetTTL::default_instance_ = new SdkGetTTL();
  SdkGetTTLRet::default_instance_ = new SdkGetTTLRet();
  SdkZAdd::default_instance_ = new SdkZAdd();
  SdkZAddRet::default_instance_ = new SdkZAddRet();
  SdkZGet::default_instance_ = new SdkZGet();
  SdkZGetRet::default_instance_ = new SdkZGetRet();
  SdkZSize::default_instance_ = new SdkZSize();
  SdkZSizeRet::default_instance_ = new SdkZSizeRet();
  SdkZCount::default_instance_ = new SdkZCount();
  SdkZCountRet::default_instance_ = new SdkZCountRet();
  SdkZIncr::default_instance_ = new SdkZIncr();
  SdkZIncrRet::default_instance_ = new SdkZIncrRet();
  SdkZIncrByFloat::default_instance_ = new SdkZIncrByFloat();
  SdkZIncrByFloatRet::default_instance_ = new SdkZIncrByFloatRet();
  SdkZRank::default_instance_ = new SdkZRank();
  SdkZRankRet::default_instance_ = new SdkZRankRet();
  SdkZRRank::default_instance_ = new SdkZRRank();
  SdkZRRankRet::default_instance_ = new SdkZRRankRet();
  SdkZRange::default_instance_ = new SdkZRange();
  SdkZRangeRet::default_instance_ = new SdkZRangeRet();
  SdkZRangeRet_ZKeyScore::default_instance_ = new SdkZRangeRet_ZKeyScore();
  SdkZRangeByScore::default_instance_ = new SdkZRangeByScore();
  SdkZRangeByScoreRet::default_instance_ = new SdkZRangeByScoreRet();
  SdkZRangeByScoreRet_ZKeyScore::default_instance_ =
      new SdkZRangeByScoreRet_ZKeyScore();
  SdkZRRange::default_instance_ = new SdkZRRange();
  SdkZRRangeRet::default_instance_ = new SdkZRRangeRet();
  SdkZRRangeRet_ZKeyScore::default_instance_ = new SdkZRRangeRet_ZKeyScore();
  SdkZRRangeByScore::default_instance_ = new SdkZRRangeByScore();
  SdkZRRangeByScoreRet::default_instance_ = new SdkZRRangeByScoreRet();
  SdkZRRangeByScoreRet_ZKeyScore::default_instance_ =
      new SdkZRRangeByScoreRet_ZKeyScore();
  SdkZDel::default_instance_ = new SdkZDel();
  SdkZDelRet::default_instance_ = new SdkZDelRet();
  SdkZDelByRank::default_instance_ = new SdkZDelByRank();
  SdkZDelByRankRet::default_instance_ = new SdkZDelByRankRet();
  SdkZDelByScore::default_instance_ = new SdkZDelByScore();
  SdkZDelByScoreRet::default_instance_ = new SdkZDelByScoreRet();
  SdkInvalidOperation::default_instance_->InitAsDefaultInstance();
  SdkSet::default_instance_->InitAsDefaultInstance();
  SdkSetRet::default_instance_->InitAsDefaultInstance();
  SdkCas::default_instance_->InitAsDefaultInstance();
  SdkCasRet::default_instance_->InitAsDefaultInstance();
  SdkGet::default_instance_->InitAsDefaultInstance();
  SdkGetRet::default_instance_->InitAsDefaultInstance();
  SdkGetV::default_instance_->InitAsDefaultInstance();
  SdkGetVRet::default_instance_->InitAsDefaultInstance();
  SdkIncrby::default_instance_->InitAsDefaultInstance();
  SdkIncrbyRet::default_instance_->InitAsDefaultInstance();
  SdkDelete::default_instance_->InitAsDefaultInstance();
  SdkDeleteRet::default_instance_->InitAsDefaultInstance();
  SdkPing::default_instance_->InitAsDefaultInstance();
  SdkPingRet::default_instance_->InitAsDefaultInstance();
  SdkGetIfAll::default_instance_->InitAsDefaultInstance();
  SdkGetIfAllRet::default_instance_->InitAsDefaultInstance();
  SdkMGet::default_instance_->InitAsDefaultInstance();
  SdkMGetRet::default_instance_->InitAsDefaultInstance();
  SdkMGetRet_KeyValue::default_instance_->InitAsDefaultInstance();
  SdkMSet::default_instance_->InitAsDefaultInstance();
  SdkMSet_KeyValue::default_instance_->InitAsDefaultInstance();
  SdkMSetRet::default_instance_->InitAsDefaultInstance();
  SdkMSetRet_KeyRetval::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK2::default_instance_->InitAsDefaultInstance();
  Rint32::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK3::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK3_NPs::default_instance_->InitAsDefaultInstance();
  GetPrimary4SDK2::default_instance_->InitAsDefaultInstance();
  GetPrimary4SDK3::default_instance_->InitAsDefaultInstance();
  SdkHGet::default_instance_->InitAsDefaultInstance();
  SdkHGetRet::default_instance_->InitAsDefaultInstance();
  SdkHLen::default_instance_->InitAsDefaultInstance();
  SdkHLenRet::default_instance_->InitAsDefaultInstance();
  SdkHPut::default_instance_->InitAsDefaultInstance();
  SdkHPutRet::default_instance_->InitAsDefaultInstance();
  SdkHDelete::default_instance_->InitAsDefaultInstance();
  SdkHDeleteRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKeysByName::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKeysByNameRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByName::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByNameRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByNameRet_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHMput::default_instance_->InitAsDefaultInstance();
  SdkHMput_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHMputRet::default_instance_->InitAsDefaultInstance();
  SdkHMputRet_HKeyRetval::default_instance_->InitAsDefaultInstance();
  SdkHMget::default_instance_->InitAsDefaultInstance();
  SdkHMgetRet::default_instance_->InitAsDefaultInstance();
  SdkHMgetRet_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHRange::default_instance_->InitAsDefaultInstance();
  SdkHRangeRet::default_instance_->InitAsDefaultInstance();
  SdkHRangeRet_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHTrim::default_instance_->InitAsDefaultInstance();
  SdkHTrimRet::default_instance_->InitAsDefaultInstance();
  SdkSetWithTTL::default_instance_->InitAsDefaultInstance();
  SdkSetWithTTLRet::default_instance_->InitAsDefaultInstance();
  SdkLSize::default_instance_->InitAsDefaultInstance();
  SdkLSizeRet::default_instance_->InitAsDefaultInstance();
  SdkLGet::default_instance_->InitAsDefaultInstance();
  SdkLGetRet::default_instance_->InitAsDefaultInstance();
  SdkLPut::default_instance_->InitAsDefaultInstance();
  SdkLPutRet::default_instance_->InitAsDefaultInstance();
  SdkLSet::default_instance_->InitAsDefaultInstance();
  SdkLSetRet::default_instance_->InitAsDefaultInstance();
  SdkLPop::default_instance_->InitAsDefaultInstance();
  SdkLPopRet::default_instance_->InitAsDefaultInstance();
  SdkLIndex::default_instance_->InitAsDefaultInstance();
  SdkLIndexRet::default_instance_->InitAsDefaultInstance();
  SdkLRange::default_instance_->InitAsDefaultInstance();
  SdkLRangeRet::default_instance_->InitAsDefaultInstance();
  SdkLTrim::default_instance_->InitAsDefaultInstance();
  SdkLTrimRet::default_instance_->InitAsDefaultInstance();
  SdkGetTTL::default_instance_->InitAsDefaultInstance();
  SdkGetTTLRet::default_instance_->InitAsDefaultInstance();
  SdkZAdd::default_instance_->InitAsDefaultInstance();
  SdkZAddRet::default_instance_->InitAsDefaultInstance();
  SdkZGet::default_instance_->InitAsDefaultInstance();
  SdkZGetRet::default_instance_->InitAsDefaultInstance();
  SdkZSize::default_instance_->InitAsDefaultInstance();
  SdkZSizeRet::default_instance_->InitAsDefaultInstance();
  SdkZCount::default_instance_->InitAsDefaultInstance();
  SdkZCountRet::default_instance_->InitAsDefaultInstance();
  SdkZIncr::default_instance_->InitAsDefaultInstance();
  SdkZIncrRet::default_instance_->InitAsDefaultInstance();
  SdkZIncrByFloat::default_instance_->InitAsDefaultInstance();
  SdkZIncrByFloatRet::default_instance_->InitAsDefaultInstance();
  SdkZRank::default_instance_->InitAsDefaultInstance();
  SdkZRankRet::default_instance_->InitAsDefaultInstance();
  SdkZRRank::default_instance_->InitAsDefaultInstance();
  SdkZRRankRet::default_instance_->InitAsDefaultInstance();
  SdkZRange::default_instance_->InitAsDefaultInstance();
  SdkZRangeRet::default_instance_->InitAsDefaultInstance();
  SdkZRangeRet_ZKeyScore::default_instance_->InitAsDefaultInstance();
  SdkZRangeByScore::default_instance_->InitAsDefaultInstance();
  SdkZRangeByScoreRet::default_instance_->InitAsDefaultInstance();
  SdkZRangeByScoreRet_ZKeyScore::default_instance_->InitAsDefaultInstance();
  SdkZRRange::default_instance_->InitAsDefaultInstance();
  SdkZRRangeRet::default_instance_->InitAsDefaultInstance();
  SdkZRRangeRet_ZKeyScore::default_instance_->InitAsDefaultInstance();
  SdkZRRangeByScore::default_instance_->InitAsDefaultInstance();
  SdkZRRangeByScoreRet::default_instance_->InitAsDefaultInstance();
  SdkZRRangeByScoreRet_ZKeyScore::default_instance_->InitAsDefaultInstance();
  SdkZDel::default_instance_->InitAsDefaultInstance();
  SdkZDelRet::default_instance_->InitAsDefaultInstance();
  SdkZDelByRank::default_instance_->InitAsDefaultInstance();
  SdkZDelByRankRet::default_instance_->InitAsDefaultInstance();
  SdkZDelByScore::default_instance_->InitAsDefaultInstance();
  SdkZDelByScoreRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_bada_5fsdk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bada_5fsdk_2eproto {
  StaticDescriptorInitializer_bada_5fsdk_2eproto() {
    protobuf_AddDesc_bada_5fsdk_2eproto();
  }
} static_descriptor_initializer_bada_5fsdk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SdkInvalidOperation::kOpcodeFieldNumber;
const int SdkInvalidOperation::kWhatFieldNumber;
const int SdkInvalidOperation::kWhyFieldNumber;
#endif  // !_MSC_VER

SdkInvalidOperation::SdkInvalidOperation() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkInvalidOperation::InitAsDefaultInstance() {}

SdkInvalidOperation::SdkInvalidOperation(const SdkInvalidOperation& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkInvalidOperation::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  what_ = 0;
  why_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkInvalidOperation::~SdkInvalidOperation() { SharedDtor(); }

void SdkInvalidOperation::SharedDtor() {
  if (why_ != &::google::protobuf::internal::kEmptyString) {
    delete why_;
  }
  if (this != default_instance_) {
  }
}

void SdkInvalidOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkInvalidOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkInvalidOperation_descriptor_;
}

const SdkInvalidOperation& SdkInvalidOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkInvalidOperation* SdkInvalidOperation::default_instance_ = NULL;

SdkInvalidOperation* SdkInvalidOperation::New() const {
  return new SdkInvalidOperation;
}

void SdkInvalidOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    what_ = 0;
    if (has_why()) {
      if (why_ != &::google::protobuf::internal::kEmptyString) {
        why_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkInvalidOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_what;
        break;
      }

      // required int32 what = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_what:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &what_)));
          set_has_what();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_why;
        break;
      }

      // required bytes why = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_why:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_why()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkInvalidOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int32 what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->what(),
                                                             output);
  }

  // required bytes why = 3;
  if (has_why()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->why(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkInvalidOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int32 what = 2;
  if (has_what()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->what(), target);
  }

  // required bytes why = 3;
  if (has_why()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->why(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkInvalidOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int32 what = 2;
    if (has_what()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->what());
    }

    // required bytes why = 3;
    if (has_why()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->why());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkInvalidOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkInvalidOperation* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkInvalidOperation*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkInvalidOperation::MergeFrom(const SdkInvalidOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
    if (from.has_why()) {
      set_why(from.why());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkInvalidOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkInvalidOperation::CopyFrom(const SdkInvalidOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkInvalidOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkInvalidOperation::Swap(SdkInvalidOperation* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(what_, other->what_);
    std::swap(why_, other->why_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkInvalidOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkInvalidOperation_descriptor_;
  metadata.reflection = SdkInvalidOperation_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkSet::kOpcodeFieldNumber;
const int SdkSet::kTableFieldNumber;
const int SdkSet::kKeyFieldNumber;
const int SdkSet::kValueFieldNumber;
const int SdkSet::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkSet::SdkSet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkSet::InitAsDefaultInstance() {}

SdkSet::SdkSet(const SdkSet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSet::~SdkSet() { SharedDtor(); }

void SdkSet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSet_descriptor_;
}

const SdkSet& SdkSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSet* SdkSet::default_instance_ = NULL;

SdkSet* SdkSet::New() const { return new SdkSet; }

void SdkSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->value(),
                                                             output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkSet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSet::MergeFrom(const SdkSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSet::CopyFrom(const SdkSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkSet::Swap(SdkSet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSet_descriptor_;
  metadata.reflection = SdkSet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkSetRet::kOpcodeFieldNumber;
const int SdkSetRet::kStatusFieldNumber;
const int SdkSetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkSetRet::SdkSetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkSetRet::InitAsDefaultInstance() {}

SdkSetRet::SdkSetRet(const SdkSetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetRet::~SdkSetRet() { SharedDtor(); }

void SdkSetRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetRet_descriptor_;
}

const SdkSetRet& SdkSetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetRet* SdkSetRet::default_instance_ = NULL;

SdkSetRet* SdkSetRet::New() const { return new SdkSetRet; }

void SdkSetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkSetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkSetRet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetRet::MergeFrom(const SdkSetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetRet::CopyFrom(const SdkSetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkSetRet::Swap(SdkSetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetRet_descriptor_;
  metadata.reflection = SdkSetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkCas::kOpcodeFieldNumber;
const int SdkCas::kTableFieldNumber;
const int SdkCas::kKeyFieldNumber;
const int SdkCas::kValueFieldNumber;
const int SdkCas::kVersionFieldNumber;
const int SdkCas::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkCas::SdkCas() : ::google::protobuf::Message() { SharedCtor(); }

void SdkCas::InitAsDefaultInstance() {}

SdkCas::SdkCas(const SdkCas& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkCas::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkCas::~SdkCas() { SharedDtor(); }

void SdkCas::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkCas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkCas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkCas_descriptor_;
}

const SdkCas& SdkCas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkCas* SdkCas::default_instance_ = NULL;

SdkCas* SdkCas::New() const { return new SdkCas; }

void SdkCas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkCas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // required int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkCas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->value(),
                                                             output);
  }

  // required int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkCas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->version(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkCas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 version = 5;
    if (has_version()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->version());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkCas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkCas* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkCas*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkCas::MergeFrom(const SdkCas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkCas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkCas::CopyFrom(const SdkCas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkCas::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkCas::Swap(SdkCas* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkCas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkCas_descriptor_;
  metadata.reflection = SdkCas_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkCasRet::kOpcodeFieldNumber;
const int SdkCasRet::kStatusFieldNumber;
const int SdkCasRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkCasRet::SdkCasRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkCasRet::InitAsDefaultInstance() {}

SdkCasRet::SdkCasRet(const SdkCasRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkCasRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkCasRet::~SdkCasRet() { SharedDtor(); }

void SdkCasRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkCasRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkCasRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkCasRet_descriptor_;
}

const SdkCasRet& SdkCasRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkCasRet* SdkCasRet::default_instance_ = NULL;

SdkCasRet* SdkCasRet::New() const { return new SdkCasRet; }

void SdkCasRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkCasRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkCasRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkCasRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkCasRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkCasRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkCasRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkCasRet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkCasRet::MergeFrom(const SdkCasRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkCasRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkCasRet::CopyFrom(const SdkCasRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkCasRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkCasRet::Swap(SdkCasRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkCasRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkCasRet_descriptor_;
  metadata.reflection = SdkCasRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGet::kOpcodeFieldNumber;
const int SdkGet::kTableFieldNumber;
const int SdkGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkGet::SdkGet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGet::InitAsDefaultInstance() {}

SdkGet::SdkGet(const SdkGet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGet::~SdkGet() { SharedDtor(); }

void SdkGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGet_descriptor_;
}

const SdkGet& SdkGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGet* SdkGet::default_instance_ = NULL;

SdkGet* SdkGet::New() const { return new SdkGet; }

void SdkGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkGet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGet::MergeFrom(const SdkGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGet::CopyFrom(const SdkGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGet::Swap(SdkGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGet_descriptor_;
  metadata.reflection = SdkGet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetRet::kOpcodeFieldNumber;
const int SdkGetRet::kValueFieldNumber;
const int SdkGetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetRet::SdkGetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetRet::InitAsDefaultInstance() {}

SdkGetRet::SdkGetRet(const SdkGetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetRet::~SdkGetRet() { SharedDtor(); }

void SdkGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetRet_descriptor_;
}

const SdkGetRet& SdkGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetRet* SdkGetRet::default_instance_ = NULL;

SdkGetRet* SdkGetRet::New() const { return new SdkGetRet; }

void SdkGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetRet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetRet::MergeFrom(const SdkGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetRet::CopyFrom(const SdkGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkGetRet::Swap(SdkGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetRet_descriptor_;
  metadata.reflection = SdkGetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetV::kOpcodeFieldNumber;
const int SdkGetV::kTableFieldNumber;
const int SdkGetV::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkGetV::SdkGetV() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetV::InitAsDefaultInstance() {}

SdkGetV::SdkGetV(const SdkGetV& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetV::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetV::~SdkGetV() { SharedDtor(); }

void SdkGetV::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetV_descriptor_;
}

const SdkGetV& SdkGetV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetV* SdkGetV::default_instance_ = NULL;

SdkGetV* SdkGetV::New() const { return new SdkGetV; }

void SdkGetV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetV* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetV*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetV::MergeFrom(const SdkGetV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetV::CopyFrom(const SdkGetV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetV::Swap(SdkGetV* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetV_descriptor_;
  metadata.reflection = SdkGetV_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetVRet::kOpcodeFieldNumber;
const int SdkGetVRet::kValueFieldNumber;
const int SdkGetVRet::kVersionFieldNumber;
const int SdkGetVRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetVRet::SdkGetVRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetVRet::InitAsDefaultInstance() {}

SdkGetVRet::SdkGetVRet(const SdkGetVRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetVRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetVRet::~SdkGetVRet() { SharedDtor(); }

void SdkGetVRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetVRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetVRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetVRet_descriptor_;
}

const SdkGetVRet& SdkGetVRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetVRet* SdkGetVRet::default_instance_ = NULL;

SdkGetVRet* SdkGetVRet::New() const { return new SdkGetVRet; }

void SdkGetVRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetVRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_master;
        break;
      }

      // optional string master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetVRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(),
                                                             output);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(4, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetVRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->version(), target);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetVRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->version());
    }

    // optional string master = 4;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetVRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetVRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkGetVRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetVRet::MergeFrom(const SdkGetVRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetVRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetVRet::CopyFrom(const SdkGetVRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetVRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetVRet::Swap(SdkGetVRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetVRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetVRet_descriptor_;
  metadata.reflection = SdkGetVRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkIncrby::kOpcodeFieldNumber;
const int SdkIncrby::kTableFieldNumber;
const int SdkIncrby::kKeyFieldNumber;
const int SdkIncrby::kByFieldNumber;
const int SdkIncrby::kIncrordecrFieldNumber;
const int SdkIncrby::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkIncrby::SdkIncrby() : ::google::protobuf::Message() { SharedCtor(); }

void SdkIncrby::InitAsDefaultInstance() {}

SdkIncrby::SdkIncrby(const SdkIncrby& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkIncrby::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  by_ = GOOGLE_LONGLONG(0);
  incrordecr_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkIncrby::~SdkIncrby() { SharedDtor(); }

void SdkIncrby::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkIncrby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkIncrby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkIncrby_descriptor_;
}

const SdkIncrby& SdkIncrby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkIncrby* SdkIncrby::default_instance_ = NULL;

SdkIncrby* SdkIncrby::New() const { return new SdkIncrby; }

void SdkIncrby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    by_ = GOOGLE_LONGLONG(0);
    incrordecr_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkIncrby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_by;
        break;
      }

      // required int64 by = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(input,
                                                                        &by_)));
          set_has_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_incrordecr;
        break;
      }

      // required int32 incrordecr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_incrordecr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &incrordecr_)));
          set_has_incrordecr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkIncrby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // required int64 by = 4;
  if (has_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->by(),
                                                             output);
  }

  // required int32 incrordecr = 5;
  if (has_incrordecr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->incrordecr(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkIncrby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required int64 by = 4;
  if (has_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->by(), target);
  }

  // required int32 incrordecr = 5;
  if (has_incrordecr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->incrordecr(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkIncrby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required int64 by = 4;
    if (has_by()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->by());
    }

    // required int32 incrordecr = 5;
    if (has_incrordecr()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->incrordecr());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkIncrby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkIncrby* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkIncrby*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkIncrby::MergeFrom(const SdkIncrby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_by()) {
      set_by(from.by());
    }
    if (from.has_incrordecr()) {
      set_incrordecr(from.incrordecr());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkIncrby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkIncrby::CopyFrom(const SdkIncrby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkIncrby::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkIncrby::Swap(SdkIncrby* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(by_, other->by_);
    std::swap(incrordecr_, other->incrordecr_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkIncrby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkIncrby_descriptor_;
  metadata.reflection = SdkIncrby_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkIncrbyRet::kOpcodeFieldNumber;
const int SdkIncrbyRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkIncrbyRet::SdkIncrbyRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkIncrbyRet::InitAsDefaultInstance() {}

SdkIncrbyRet::SdkIncrbyRet(const SdkIncrbyRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkIncrbyRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkIncrbyRet::~SdkIncrbyRet() { SharedDtor(); }

void SdkIncrbyRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkIncrbyRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkIncrbyRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkIncrbyRet_descriptor_;
}

const SdkIncrbyRet& SdkIncrbyRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkIncrbyRet* SdkIncrbyRet::default_instance_ = NULL;

SdkIncrbyRet* SdkIncrbyRet::New() const { return new SdkIncrbyRet; }

void SdkIncrbyRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkIncrbyRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkIncrbyRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkIncrbyRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkIncrbyRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkIncrbyRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkIncrbyRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkIncrbyRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkIncrbyRet::MergeFrom(const SdkIncrbyRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkIncrbyRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkIncrbyRet::CopyFrom(const SdkIncrbyRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkIncrbyRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkIncrbyRet::Swap(SdkIncrbyRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkIncrbyRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkIncrbyRet_descriptor_;
  metadata.reflection = SdkIncrbyRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkDelete::kOpcodeFieldNumber;
const int SdkDelete::kTableFieldNumber;
const int SdkDelete::kKeyFieldNumber;
const int SdkDelete::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkDelete::SdkDelete() : ::google::protobuf::Message() { SharedCtor(); }

void SdkDelete::InitAsDefaultInstance() {}

SdkDelete::SdkDelete(const SdkDelete& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkDelete::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkDelete::~SdkDelete() { SharedDtor(); }

void SdkDelete::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkDelete_descriptor_;
}

const SdkDelete& SdkDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkDelete* SdkDelete::default_instance_ = NULL;

SdkDelete* SdkDelete::New() const { return new SdkDelete; }

void SdkDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        4, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        4, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // optional int32 writesrc = 4 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkDelete* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkDelete*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkDelete::MergeFrom(const SdkDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkDelete::CopyFrom(const SdkDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkDelete::Swap(SdkDelete* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkDelete_descriptor_;
  metadata.reflection = SdkDelete_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkDeleteRet::kOpcodeFieldNumber;
const int SdkDeleteRet::kStatusFieldNumber;
const int SdkDeleteRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkDeleteRet::SdkDeleteRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkDeleteRet::InitAsDefaultInstance() {}

SdkDeleteRet::SdkDeleteRet(const SdkDeleteRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkDeleteRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkDeleteRet::~SdkDeleteRet() { SharedDtor(); }

void SdkDeleteRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkDeleteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkDeleteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkDeleteRet_descriptor_;
}

const SdkDeleteRet& SdkDeleteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkDeleteRet* SdkDeleteRet::default_instance_ = NULL;

SdkDeleteRet* SdkDeleteRet::New() const { return new SdkDeleteRet; }

void SdkDeleteRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkDeleteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkDeleteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkDeleteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkDeleteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkDeleteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkDeleteRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkDeleteRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkDeleteRet::MergeFrom(const SdkDeleteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkDeleteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkDeleteRet::CopyFrom(const SdkDeleteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkDeleteRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkDeleteRet::Swap(SdkDeleteRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkDeleteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkDeleteRet_descriptor_;
  metadata.reflection = SdkDeleteRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkPing::kOpcodeFieldNumber;
#endif  // !_MSC_VER

SdkPing::SdkPing() : ::google::protobuf::Message() { SharedCtor(); }

void SdkPing::InitAsDefaultInstance() {}

SdkPing::SdkPing(const SdkPing& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkPing::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkPing::~SdkPing() { SharedDtor(); }

void SdkPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkPing_descriptor_;
}

const SdkPing& SdkPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkPing* SdkPing::default_instance_ = NULL;

SdkPing* SdkPing::New() const { return new SdkPing; }

void SdkPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkPing* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkPing*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkPing::MergeFrom(const SdkPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkPing::CopyFrom(const SdkPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkPing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkPing::Swap(SdkPing* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkPing_descriptor_;
  metadata.reflection = SdkPing_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkPingRet::kOpcodeFieldNumber;
const int SdkPingRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkPingRet::SdkPingRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkPingRet::InitAsDefaultInstance() {}

SdkPingRet::SdkPingRet(const SdkPingRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkPingRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkPingRet::~SdkPingRet() { SharedDtor(); }

void SdkPingRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkPingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkPingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkPingRet_descriptor_;
}

const SdkPingRet& SdkPingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkPingRet* SdkPingRet::default_instance_ = NULL;

SdkPingRet* SdkPingRet::New() const { return new SdkPingRet; }

void SdkPingRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkPingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkPingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkPingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkPingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkPingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkPingRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkPingRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkPingRet::MergeFrom(const SdkPingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkPingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkPingRet::CopyFrom(const SdkPingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkPingRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkPingRet::Swap(SdkPingRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkPingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkPingRet_descriptor_;
  metadata.reflection = SdkPingRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetIfAll::kOpcodeFieldNumber;
const int SdkGetIfAll::kTableFieldNumber;
const int SdkGetIfAll::kKeyFieldNumber;
const int SdkGetIfAll::kStrictFieldNumber;
#endif  // !_MSC_VER

SdkGetIfAll::SdkGetIfAll() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetIfAll::InitAsDefaultInstance() {}

SdkGetIfAll::SdkGetIfAll(const SdkGetIfAll& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetIfAll::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strict_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetIfAll::~SdkGetIfAll() { SharedDtor(); }

void SdkGetIfAll::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetIfAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetIfAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetIfAll_descriptor_;
}

const SdkGetIfAll& SdkGetIfAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetIfAll* SdkGetIfAll::default_instance_ = NULL;

SdkGetIfAll* SdkGetIfAll::New() const { return new SdkGetIfAll; }

void SdkGetIfAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    strict_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetIfAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Strict;
        break;
      }

      // required bool Strict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_Strict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &strict_)));
          set_has_strict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetIfAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // required bool Strict = 4;
  if (has_strict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->strict(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetIfAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bool Strict = 4;
  if (has_strict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        4, this->strict(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetIfAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bool Strict = 4;
    if (has_strict()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetIfAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetIfAll* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkGetIfAll*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetIfAll::MergeFrom(const SdkGetIfAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_strict()) {
      set_strict(from.strict());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetIfAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetIfAll::CopyFrom(const SdkGetIfAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetIfAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkGetIfAll::Swap(SdkGetIfAll* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(strict_, other->strict_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetIfAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetIfAll_descriptor_;
  metadata.reflection = SdkGetIfAll_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetIfAllRet::kOpcodeFieldNumber;
const int SdkGetIfAllRet::kValueFieldNumber;
const int SdkGetIfAllRet::kVersionFieldNumber;
const int SdkGetIfAllRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetIfAllRet::SdkGetIfAllRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetIfAllRet::InitAsDefaultInstance() {}

SdkGetIfAllRet::SdkGetIfAllRet(const SdkGetIfAllRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetIfAllRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetIfAllRet::~SdkGetIfAllRet() { SharedDtor(); }

void SdkGetIfAllRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetIfAllRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetIfAllRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetIfAllRet_descriptor_;
}

const SdkGetIfAllRet& SdkGetIfAllRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetIfAllRet* SdkGetIfAllRet::default_instance_ = NULL;

SdkGetIfAllRet* SdkGetIfAllRet::New() const { return new SdkGetIfAllRet; }

void SdkGetIfAllRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetIfAllRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_master;
        break;
      }

      // optional string master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetIfAllRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(),
                                                             output);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(4, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetIfAllRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->version(), target);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetIfAllRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->version());
    }

    // optional string master = 4;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetIfAllRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetIfAllRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkGetIfAllRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetIfAllRet::MergeFrom(const SdkGetIfAllRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetIfAllRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetIfAllRet::CopyFrom(const SdkGetIfAllRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetIfAllRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetIfAllRet::Swap(SdkGetIfAllRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetIfAllRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetIfAllRet_descriptor_;
  metadata.reflection = SdkGetIfAllRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkMGet::kOpcodeFieldNumber;
const int SdkMGet::kTableFieldNumber;
const int SdkMGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkMGet::SdkMGet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkMGet::InitAsDefaultInstance() {}

SdkMGet::SdkMGet(const SdkMGet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGet::~SdkMGet() { SharedDtor(); }

void SdkMGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGet_descriptor_;
}

const SdkMGet& SdkMGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGet* SdkMGet::default_instance_ = NULL;

SdkMGet* SdkMGet::New() const { return new SdkMGet; }

void SdkMGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // repeated bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(i),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }
  }
  // repeated bytes key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::BytesSize(this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkMGet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGet::MergeFrom(const SdkMGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGet::CopyFrom(const SdkMGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkMGet::Swap(SdkMGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGet_descriptor_;
  metadata.reflection = SdkMGet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkMGetRet_KeyValue::kKeyFieldNumber;
const int SdkMGetRet_KeyValue::kValueFieldNumber;
const int SdkMGetRet_KeyValue::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkMGetRet_KeyValue::SdkMGetRet_KeyValue() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMGetRet_KeyValue::InitAsDefaultInstance() {}

SdkMGetRet_KeyValue::SdkMGetRet_KeyValue(const SdkMGetRet_KeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGetRet_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGetRet_KeyValue::~SdkMGetRet_KeyValue() { SharedDtor(); }

void SdkMGetRet_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGetRet_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGetRet_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGetRet_KeyValue_descriptor_;
}

const SdkMGetRet_KeyValue& SdkMGetRet_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGetRet_KeyValue* SdkMGetRet_KeyValue::default_instance_ = NULL;

SdkMGetRet_KeyValue* SdkMGetRet_KeyValue::New() const {
  return new SdkMGetRet_KeyValue;
}

void SdkMGetRet_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGetRet_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGetRet_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGetRet_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMGetRet_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->status());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGetRet_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGetRet_KeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkMGetRet_KeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGetRet_KeyValue::MergeFrom(const SdkMGetRet_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGetRet_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGetRet_KeyValue::CopyFrom(const SdkMGetRet_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGetRet_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkMGetRet_KeyValue::Swap(SdkMGetRet_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGetRet_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGetRet_KeyValue_descriptor_;
  metadata.reflection = SdkMGetRet_KeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkMGetRet::kOpcodeFieldNumber;
const int SdkMGetRet::kRetsFieldNumber;
const int SdkMGetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkMGetRet::SdkMGetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkMGetRet::InitAsDefaultInstance() {}

SdkMGetRet::SdkMGetRet(const SdkMGetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGetRet::~SdkMGetRet() { SharedDtor(); }

void SdkMGetRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGetRet_descriptor_;
}

const SdkMGetRet& SdkMGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGetRet* SdkMGetRet::default_instance_ = NULL;

SdkMGetRet* SdkMGetRet::New() const { return new SdkMGetRet; }

void SdkMGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  rets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        break;
      }

      // repeated .SdkMGetRet.KeyValue rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_rets:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_rets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkMGetRet.KeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->rets(i), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkMGetRet.KeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->rets(i), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  // repeated .SdkMGetRet.KeyValue rets = 2;
  total_size += 1 * this->rets_size();
  for (int i = 0; i < this->rets_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->rets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkMGetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGetRet::MergeFrom(const SdkMGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rets_.MergeFrom(from.rets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGetRet::CopyFrom(const SdkMGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rets_size(); i++) {
    if (!this->rets(i).IsInitialized()) return false;
  }
  return true;
}

void SdkMGetRet::Swap(SdkMGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    rets_.Swap(&other->rets_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGetRet_descriptor_;
  metadata.reflection = SdkMGetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkMSet_KeyValue::kKeyFieldNumber;
const int SdkMSet_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkMSet_KeyValue::SdkMSet_KeyValue() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMSet_KeyValue::InitAsDefaultInstance() {}

SdkMSet_KeyValue::SdkMSet_KeyValue(const SdkMSet_KeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMSet_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMSet_KeyValue::~SdkMSet_KeyValue() { SharedDtor(); }

void SdkMSet_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkMSet_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMSet_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMSet_KeyValue_descriptor_;
}

const SdkMSet_KeyValue& SdkMSet_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMSet_KeyValue* SdkMSet_KeyValue::default_instance_ = NULL;

SdkMSet_KeyValue* SdkMSet_KeyValue::New() const { return new SdkMSet_KeyValue; }

void SdkMSet_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMSet_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMSet_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMSet_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMSet_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMSet_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMSet_KeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkMSet_KeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMSet_KeyValue::MergeFrom(const SdkMSet_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMSet_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMSet_KeyValue::CopyFrom(const SdkMSet_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMSet_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkMSet_KeyValue::Swap(SdkMSet_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMSet_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMSet_KeyValue_descriptor_;
  metadata.reflection = SdkMSet_KeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkMSet::kOpcodeFieldNumber;
const int SdkMSet::kTableFieldNumber;
const int SdkMSet::kKvsFieldNumber;
const int SdkMSet::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkMSet::SdkMSet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkMSet::InitAsDefaultInstance() {}

SdkMSet::SdkMSet(const SdkMSet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMSet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMSet::~SdkMSet() { SharedDtor(); }

void SdkMSet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void SdkMSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMSet_descriptor_;
}

const SdkMSet& SdkMSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMSet* SdkMSet::default_instance_ = NULL;

SdkMSet* SdkMSet::New() const { return new SdkMSet; }

void SdkMSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    writesrc_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kvs;
        break;
      }

      // repeated .SdkMSet.KeyValue kvs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kvs;
        if (input->ExpectTag(32)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // repeated .SdkMSet.KeyValue kvs = 3;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->kvs(i), output);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        4, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // repeated .SdkMSet.KeyValue kvs = 3;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->kvs(i), target);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        4, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // optional int32 writesrc = 4 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  // repeated .SdkMSet.KeyValue kvs = 3;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMSet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkMSet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMSet::MergeFrom(const SdkMSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMSet::CopyFrom(const SdkMSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkMSet::Swap(SdkMSet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    kvs_.Swap(&other->kvs_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMSet_descriptor_;
  metadata.reflection = SdkMSet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkMSetRet_KeyRetval::kKeyFieldNumber;
const int SdkMSetRet_KeyRetval::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkMSetRet_KeyRetval::SdkMSetRet_KeyRetval() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMSetRet_KeyRetval::InitAsDefaultInstance() {}

SdkMSetRet_KeyRetval::SdkMSetRet_KeyRetval(const SdkMSetRet_KeyRetval& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMSetRet_KeyRetval::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMSetRet_KeyRetval::~SdkMSetRet_KeyRetval() { SharedDtor(); }

void SdkMSetRet_KeyRetval::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkMSetRet_KeyRetval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMSetRet_KeyRetval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMSetRet_KeyRetval_descriptor_;
}

const SdkMSetRet_KeyRetval& SdkMSetRet_KeyRetval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMSetRet_KeyRetval* SdkMSetRet_KeyRetval::default_instance_ = NULL;

SdkMSetRet_KeyRetval* SdkMSetRet_KeyRetval::New() const {
  return new SdkMSetRet_KeyRetval;
}

void SdkMSetRet_KeyRetval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMSetRet_KeyRetval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retval;
        break;
      }

      // required int32 retval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMSetRet_KeyRetval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retval(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkMSetRet_KeyRetval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMSetRet_KeyRetval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required int32 retval = 2;
    if (has_retval()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->retval());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMSetRet_KeyRetval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMSetRet_KeyRetval* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkMSetRet_KeyRetval*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMSetRet_KeyRetval::MergeFrom(const SdkMSetRet_KeyRetval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMSetRet_KeyRetval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMSetRet_KeyRetval::CopyFrom(const SdkMSetRet_KeyRetval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMSetRet_KeyRetval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkMSetRet_KeyRetval::Swap(SdkMSetRet_KeyRetval* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMSetRet_KeyRetval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMSetRet_KeyRetval_descriptor_;
  metadata.reflection = SdkMSetRet_KeyRetval_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkMSetRet::kOpcodeFieldNumber;
const int SdkMSetRet::kKrvsFieldNumber;
#endif  // !_MSC_VER

SdkMSetRet::SdkMSetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkMSetRet::InitAsDefaultInstance() {}

SdkMSetRet::SdkMSetRet(const SdkMSetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMSetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMSetRet::~SdkMSetRet() { SharedDtor(); }

void SdkMSetRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkMSetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMSetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMSetRet_descriptor_;
}

const SdkMSetRet& SdkMSetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMSetRet* SdkMSetRet::default_instance_ = NULL;

SdkMSetRet* SdkMSetRet::New() const { return new SdkMSetRet; }

void SdkMSetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  krvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMSetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        break;
      }

      // repeated .SdkMSetRet.KeyRetval krvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_krvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_krvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMSetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkMSetRet.KeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->krvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMSetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkMSetRet.KeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->krvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkMSetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkMSetRet.KeyRetval krvs = 2;
  total_size += 1 * this->krvs_size();
  for (int i = 0; i < this->krvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->krvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMSetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMSetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkMSetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMSetRet::MergeFrom(const SdkMSetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  krvs_.MergeFrom(from.krvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMSetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMSetRet::CopyFrom(const SdkMSetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMSetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < krvs_size(); i++) {
    if (!this->krvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkMSetRet::Swap(SdkMSetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    krvs_.Swap(&other->krvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMSetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMSetRet_descriptor_;
  metadata.reflection = SdkMSetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetMetadata4SDK2::kCmdFieldNumber;
const int GetMetadata4SDK2::kTableFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK2::GetMetadata4SDK2() : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK2::InitAsDefaultInstance() {}

GetMetadata4SDK2::GetMetadata4SDK2(const GetMetadata4SDK2& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK2::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK2::~GetMetadata4SDK2() { SharedDtor(); }

void GetMetadata4SDK2::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK2_descriptor_;
}

const GetMetadata4SDK2& GetMetadata4SDK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK2* GetMetadata4SDK2::default_instance_ = NULL;

GetMetadata4SDK2* GetMetadata4SDK2::New() const { return new GetMetadata4SDK2; }

void GetMetadata4SDK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required string table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->table().data(), this->table().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(),
                                                             output);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->table().data(), this->table().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(2, this->table(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadata4SDK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->cmd(), target);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->table().data(), this->table().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->cmd());
    }

    // required string table = 2;
    if (has_table()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->table());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK2* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const GetMetadata4SDK2*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK2::MergeFrom(const GetMetadata4SDK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK2::CopyFrom(const GetMetadata4SDK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetMetadata4SDK2::Swap(GetMetadata4SDK2* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK2_descriptor_;
  metadata.reflection = GetMetadata4SDK2_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int Rint32::kIdFieldNumber;
#endif  // !_MSC_VER

Rint32::Rint32() : ::google::protobuf::Message() { SharedCtor(); }

void Rint32::InitAsDefaultInstance() {}

Rint32::Rint32(const Rint32& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rint32::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rint32::~Rint32() { SharedDtor(); }

void Rint32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rint32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rint32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rint32_descriptor_;
}

const Rint32& Rint32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

Rint32* Rint32::default_instance_ = NULL;

Rint32* Rint32::New() const { return new Rint32; }

void Rint32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rint32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(input,
                                                                        &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rint32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rint32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int Rint32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->id());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rint32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rint32* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Rint32*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rint32::MergeFrom(const Rint32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rint32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rint32::CopyFrom(const Rint32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rint32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Rint32::Swap(Rint32* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rint32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rint32_descriptor_;
  metadata.reflection = Rint32_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetMetadata4SDK3_NPs::kHostFieldNumber;
const int GetMetadata4SDK3_NPs::kPortFieldNumber;
const int GetMetadata4SDK3_NPs::kPartitionsFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK3_NPs::GetMetadata4SDK3_NPs() : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK3_NPs::InitAsDefaultInstance() {}

GetMetadata4SDK3_NPs::GetMetadata4SDK3_NPs(const GetMetadata4SDK3_NPs& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK3_NPs::SharedCtor() {
  _cached_size_ = 0;
  host_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK3_NPs::~GetMetadata4SDK3_NPs() { SharedDtor(); }

void GetMetadata4SDK3_NPs::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK3_NPs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK3_NPs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK3_NPs_descriptor_;
}

const GetMetadata4SDK3_NPs& GetMetadata4SDK3_NPs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK3_NPs* GetMetadata4SDK3_NPs::default_instance_ = NULL;

GetMetadata4SDK3_NPs* GetMetadata4SDK3_NPs::New() const {
  return new GetMetadata4SDK3_NPs;
}

void GetMetadata4SDK3_NPs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK3_NPs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->host().data(), this->host().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_partitions;
        break;
      }

      // repeated .Rint32 partitions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_partitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_partitions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK3_NPs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->host().data(), this->host().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(1, this->host(),
                                                              output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(),
                                                             output);
  }

  // repeated .Rint32 partitions = 3;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
GetMetadata4SDK3_NPs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->host().data(), this->host().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->port(), target);
  }

  // repeated .Rint32 partitions = 3;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK3_NPs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->port());
    }
  }
  // repeated .Rint32 partitions = 3;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->partitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK3_NPs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK3_NPs* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const GetMetadata4SDK3_NPs*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK3_NPs::MergeFrom(const GetMetadata4SDK3_NPs& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK3_NPs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK3_NPs::CopyFrom(const GetMetadata4SDK3_NPs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK3_NPs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < partitions_size(); i++) {
    if (!this->partitions(i).IsInitialized()) return false;
  }
  return true;
}

void GetMetadata4SDK3_NPs::Swap(GetMetadata4SDK3_NPs* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK3_NPs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK3_NPs_descriptor_;
  metadata.reflection = GetMetadata4SDK3_NPs_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetMetadata4SDK3::kCmdFieldNumber;
const int GetMetadata4SDK3::kNpsFieldNumber;
const int GetMetadata4SDK3::kPcntFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK3::GetMetadata4SDK3() : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK3::InitAsDefaultInstance() {}

GetMetadata4SDK3::GetMetadata4SDK3(const GetMetadata4SDK3& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK3::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  pcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK3::~GetMetadata4SDK3() { SharedDtor(); }

void GetMetadata4SDK3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK3_descriptor_;
}

const GetMetadata4SDK3& GetMetadata4SDK3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK3* GetMetadata4SDK3::default_instance_ = NULL;

GetMetadata4SDK3* GetMetadata4SDK3::New() const { return new GetMetadata4SDK3; }

void GetMetadata4SDK3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    pcnt_ = 0;
  }
  nps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nps;
        break;
      }

      // repeated .GetMetadata4SDK3.NPs nps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_nps:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_nps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nps;
        if (input->ExpectTag(24)) goto parse_pcnt;
        break;
      }

      // required int32 pcnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_pcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &pcnt_)));
          set_has_pcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(),
                                                             output);
  }

  // repeated .GetMetadata4SDK3.NPs nps = 2;
  for (int i = 0; i < this->nps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->nps(i), output);
  }

  // required int32 pcnt = 3;
  if (has_pcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pcnt(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadata4SDK3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->cmd(), target);
  }

  // repeated .GetMetadata4SDK3.NPs nps = 2;
  for (int i = 0; i < this->nps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->nps(i), target);
  }

  // required int32 pcnt = 3;
  if (has_pcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->pcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->cmd());
    }

    // required int32 pcnt = 3;
    if (has_pcnt()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->pcnt());
    }
  }
  // repeated .GetMetadata4SDK3.NPs nps = 2;
  total_size += 1 * this->nps_size();
  for (int i = 0; i < this->nps_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->nps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK3* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const GetMetadata4SDK3*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK3::MergeFrom(const GetMetadata4SDK3& from) {
  GOOGLE_CHECK_NE(&from, this);
  nps_.MergeFrom(from.nps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_pcnt()) {
      set_pcnt(from.pcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK3::CopyFrom(const GetMetadata4SDK3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < nps_size(); i++) {
    if (!this->nps(i).IsInitialized()) return false;
  }
  return true;
}

void GetMetadata4SDK3::Swap(GetMetadata4SDK3* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    nps_.Swap(&other->nps_);
    std::swap(pcnt_, other->pcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK3_descriptor_;
  metadata.reflection = GetMetadata4SDK3_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetPrimary4SDK2::kCmdFieldNumber;
const int GetPrimary4SDK2::kTableFieldNumber;
const int GetPrimary4SDK2::kPartitionFieldNumber;
#endif  // !_MSC_VER

GetPrimary4SDK2::GetPrimary4SDK2() : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimary4SDK2::InitAsDefaultInstance() {}

GetPrimary4SDK2::GetPrimary4SDK2(const GetPrimary4SDK2& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimary4SDK2::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimary4SDK2::~GetPrimary4SDK2() { SharedDtor(); }

void GetPrimary4SDK2::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void GetPrimary4SDK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimary4SDK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimary4SDK2_descriptor_;
}

const GetPrimary4SDK2& GetPrimary4SDK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetPrimary4SDK2* GetPrimary4SDK2::default_instance_ = NULL;

GetPrimary4SDK2* GetPrimary4SDK2::New() const { return new GetPrimary4SDK2; }

void GetPrimary4SDK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    partition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimary4SDK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required string table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->table().data(), this->table().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partition;
        break;
      }

      // required int32 partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimary4SDK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(),
                                                             output);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->table().data(), this->table().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(2, this->table(),
                                                              output);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        3, this->partition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimary4SDK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->cmd(), target);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->table().data(), this->table().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->partition(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int GetPrimary4SDK2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->cmd());
    }

    // required string table = 2;
    if (has_table()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->table());
    }

    // required int32 partition = 3;
    if (has_partition()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->partition());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimary4SDK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimary4SDK2* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const GetPrimary4SDK2*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimary4SDK2::MergeFrom(const GetPrimary4SDK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimary4SDK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimary4SDK2::CopyFrom(const GetPrimary4SDK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimary4SDK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetPrimary4SDK2::Swap(GetPrimary4SDK2* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(table_, other->table_);
    std::swap(partition_, other->partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimary4SDK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimary4SDK2_descriptor_;
  metadata.reflection = GetPrimary4SDK2_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetPrimary4SDK3::kCmdFieldNumber;
const int GetPrimary4SDK3::kHostFieldNumber;
const int GetPrimary4SDK3::kPortFieldNumber;
#endif  // !_MSC_VER

GetPrimary4SDK3::GetPrimary4SDK3() : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimary4SDK3::InitAsDefaultInstance() {}

GetPrimary4SDK3::GetPrimary4SDK3(const GetPrimary4SDK3& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimary4SDK3::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  host_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimary4SDK3::~GetPrimary4SDK3() { SharedDtor(); }

void GetPrimary4SDK3::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void GetPrimary4SDK3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimary4SDK3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimary4SDK3_descriptor_;
}

const GetPrimary4SDK3& GetPrimary4SDK3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetPrimary4SDK3* GetPrimary4SDK3::default_instance_ = NULL;

GetPrimary4SDK3* GetPrimary4SDK3::New() const { return new GetPrimary4SDK3; }

void GetPrimary4SDK3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimary4SDK3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // required string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->host().data(), this->host().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimary4SDK3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(),
                                                             output);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->host().data(), this->host().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(2, this->host(),
                                                              output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimary4SDK3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->cmd(), target);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->host().data(), this->host().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int GetPrimary4SDK3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->cmd());
    }

    // required string host = 2;
    if (has_host()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->host());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->port());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimary4SDK3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimary4SDK3* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const GetPrimary4SDK3*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimary4SDK3::MergeFrom(const GetPrimary4SDK3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimary4SDK3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimary4SDK3::CopyFrom(const GetPrimary4SDK3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimary4SDK3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetPrimary4SDK3::Swap(GetPrimary4SDK3* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimary4SDK3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimary4SDK3_descriptor_;
  metadata.reflection = GetPrimary4SDK3_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGet::kOpcodeFieldNumber;
const int SdkHGet::kTableFieldNumber;
const int SdkHGet::kHnameFieldNumber;
const int SdkHGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkHGet::SdkHGet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHGet::InitAsDefaultInstance() {}

SdkHGet::SdkHGet(const SdkHGet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGet::~SdkHGet() { SharedDtor(); }

void SdkHGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGet_descriptor_;
}

const SdkHGet& SdkHGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGet* SdkHGet::default_instance_ = NULL;

SdkHGet* SdkHGet::New() const { return new SdkHGet; }

void SdkHGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGet::MergeFrom(const SdkHGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGet::CopyFrom(const SdkHGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkHGet::Swap(SdkHGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGet_descriptor_;
  metadata.reflection = SdkHGet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGetRet::kOpcodeFieldNumber;
const int SdkHGetRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHGetRet::SdkHGetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHGetRet::InitAsDefaultInstance() {}

SdkHGetRet::SdkHGetRet(const SdkHGetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetRet::~SdkHGetRet() { SharedDtor(); }

void SdkHGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetRet_descriptor_;
}

const SdkHGetRet& SdkHGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetRet* SdkHGetRet::default_instance_ = NULL;

SdkHGetRet* SdkHGetRet::New() const { return new SdkHGetRet; }

void SdkHGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetRet::MergeFrom(const SdkHGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetRet::CopyFrom(const SdkHGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHGetRet::Swap(SdkHGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetRet_descriptor_;
  metadata.reflection = SdkHGetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHLen::kOpcodeFieldNumber;
const int SdkHLen::kTableFieldNumber;
const int SdkHLen::kHnameFieldNumber;
#endif  // !_MSC_VER

SdkHLen::SdkHLen() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHLen::InitAsDefaultInstance() {}

SdkHLen::SdkHLen(const SdkHLen& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHLen::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHLen::~SdkHLen() { SharedDtor(); }

void SdkHLen::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHLen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHLen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHLen_descriptor_;
}

const SdkHLen& SdkHLen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHLen* SdkHLen::default_instance_ = NULL;

SdkHLen* SdkHLen::New() const { return new SdkHLen; }

void SdkHLen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHLen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHLen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHLen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHLen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHLen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHLen* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHLen*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHLen::MergeFrom(const SdkHLen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHLen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHLen::CopyFrom(const SdkHLen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHLen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHLen::Swap(SdkHLen* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHLen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHLen_descriptor_;
  metadata.reflection = SdkHLen_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHLenRet::kOpcodeFieldNumber;
const int SdkHLenRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHLenRet::SdkHLenRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHLenRet::InitAsDefaultInstance() {}

SdkHLenRet::SdkHLenRet(const SdkHLenRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHLenRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHLenRet::~SdkHLenRet() { SharedDtor(); }

void SdkHLenRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHLenRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHLenRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHLenRet_descriptor_;
}

const SdkHLenRet& SdkHLenRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHLenRet* SdkHLenRet::default_instance_ = NULL;

SdkHLenRet* SdkHLenRet::New() const { return new SdkHLenRet; }

void SdkHLenRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHLenRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHLenRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHLenRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHLenRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHLenRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHLenRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHLenRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHLenRet::MergeFrom(const SdkHLenRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHLenRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHLenRet::CopyFrom(const SdkHLenRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHLenRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHLenRet::Swap(SdkHLenRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHLenRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHLenRet_descriptor_;
  metadata.reflection = SdkHLenRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHPut::kOpcodeFieldNumber;
const int SdkHPut::kTableFieldNumber;
const int SdkHPut::kHnameFieldNumber;
const int SdkHPut::kKeyFieldNumber;
const int SdkHPut::kValueFieldNumber;
const int SdkHPut::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHPut::SdkHPut() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHPut::InitAsDefaultInstance() {}

SdkHPut::SdkHPut(const SdkHPut& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHPut::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHPut::~SdkHPut() { SharedDtor(); }

void SdkHPut::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHPut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHPut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHPut_descriptor_;
}

const SdkHPut& SdkHPut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHPut* SdkHPut::default_instance_ = NULL;

SdkHPut* SdkHPut::New() const { return new SdkHPut; }

void SdkHPut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHPut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required bytes value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHPut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  // required bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->value(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHPut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // required bytes value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHPut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 5;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHPut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHPut* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHPut*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHPut::MergeFrom(const SdkHPut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHPut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHPut::CopyFrom(const SdkHPut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHPut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkHPut::Swap(SdkHPut* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHPut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHPut_descriptor_;
  metadata.reflection = SdkHPut_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHPutRet::kOpcodeFieldNumber;
const int SdkHPutRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkHPutRet::SdkHPutRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHPutRet::InitAsDefaultInstance() {}

SdkHPutRet::SdkHPutRet(const SdkHPutRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHPutRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHPutRet::~SdkHPutRet() { SharedDtor(); }

void SdkHPutRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHPutRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHPutRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHPutRet_descriptor_;
}

const SdkHPutRet& SdkHPutRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHPutRet* SdkHPutRet::default_instance_ = NULL;

SdkHPutRet* SdkHPutRet::New() const { return new SdkHPutRet; }

void SdkHPutRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHPutRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHPutRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHPutRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHPutRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHPutRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHPutRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHPutRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHPutRet::MergeFrom(const SdkHPutRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHPutRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHPutRet::CopyFrom(const SdkHPutRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHPutRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHPutRet::Swap(SdkHPutRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHPutRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHPutRet_descriptor_;
  metadata.reflection = SdkHPutRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHDelete::kOpcodeFieldNumber;
const int SdkHDelete::kTableFieldNumber;
const int SdkHDelete::kHnameFieldNumber;
const int SdkHDelete::kKeyFieldNumber;
const int SdkHDelete::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHDelete::SdkHDelete() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHDelete::InitAsDefaultInstance() {}

SdkHDelete::SdkHDelete(const SdkHDelete& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHDelete::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHDelete::~SdkHDelete() { SharedDtor(); }

void SdkHDelete::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHDelete_descriptor_;
}

const SdkHDelete& SdkHDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHDelete* SdkHDelete::default_instance_ = NULL;

SdkHDelete* SdkHDelete::New() const { return new SdkHDelete; }

void SdkHDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHDelete* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHDelete*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHDelete::MergeFrom(const SdkHDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHDelete::CopyFrom(const SdkHDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkHDelete::Swap(SdkHDelete* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHDelete_descriptor_;
  metadata.reflection = SdkHDelete_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHDeleteRet::kOpcodeFieldNumber;
const int SdkHDeleteRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkHDeleteRet::SdkHDeleteRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHDeleteRet::InitAsDefaultInstance() {}

SdkHDeleteRet::SdkHDeleteRet(const SdkHDeleteRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHDeleteRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHDeleteRet::~SdkHDeleteRet() { SharedDtor(); }

void SdkHDeleteRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHDeleteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHDeleteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHDeleteRet_descriptor_;
}

const SdkHDeleteRet& SdkHDeleteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHDeleteRet* SdkHDeleteRet::default_instance_ = NULL;

SdkHDeleteRet* SdkHDeleteRet::New() const { return new SdkHDeleteRet; }

void SdkHDeleteRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHDeleteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHDeleteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHDeleteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHDeleteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHDeleteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHDeleteRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHDeleteRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHDeleteRet::MergeFrom(const SdkHDeleteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHDeleteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHDeleteRet::CopyFrom(const SdkHDeleteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHDeleteRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHDeleteRet::Swap(SdkHDeleteRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHDeleteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHDeleteRet_descriptor_;
  metadata.reflection = SdkHDeleteRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKeysByName::kOpcodeFieldNumber;
const int SdkHGetAllKeysByName::kTableFieldNumber;
const int SdkHGetAllKeysByName::kHnameFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKeysByName::SdkHGetAllKeysByName() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKeysByName::InitAsDefaultInstance() {}

SdkHGetAllKeysByName::SdkHGetAllKeysByName(const SdkHGetAllKeysByName& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKeysByName::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKeysByName::~SdkHGetAllKeysByName() { SharedDtor(); }

void SdkHGetAllKeysByName::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKeysByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKeysByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKeysByName_descriptor_;
}

const SdkHGetAllKeysByName& SdkHGetAllKeysByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKeysByName* SdkHGetAllKeysByName::default_instance_ = NULL;

SdkHGetAllKeysByName* SdkHGetAllKeysByName::New() const {
  return new SdkHGetAllKeysByName;
}

void SdkHGetAllKeysByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKeysByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKeysByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHGetAllKeysByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKeysByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKeysByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKeysByName* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetAllKeysByName*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKeysByName::MergeFrom(const SdkHGetAllKeysByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKeysByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKeysByName::CopyFrom(const SdkHGetAllKeysByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKeysByName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHGetAllKeysByName::Swap(SdkHGetAllKeysByName* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKeysByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKeysByName_descriptor_;
  metadata.reflection = SdkHGetAllKeysByName_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKeysByNameRet::kOpcodeFieldNumber;
const int SdkHGetAllKeysByNameRet::kKeysFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKeysByNameRet::SdkHGetAllKeysByNameRet()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKeysByNameRet::InitAsDefaultInstance() {}

SdkHGetAllKeysByNameRet::SdkHGetAllKeysByNameRet(
    const SdkHGetAllKeysByNameRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKeysByNameRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKeysByNameRet::~SdkHGetAllKeysByNameRet() { SharedDtor(); }

void SdkHGetAllKeysByNameRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHGetAllKeysByNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKeysByNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKeysByNameRet_descriptor_;
}

const SdkHGetAllKeysByNameRet& SdkHGetAllKeysByNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKeysByNameRet* SdkHGetAllKeysByNameRet::default_instance_ = NULL;

SdkHGetAllKeysByNameRet* SdkHGetAllKeysByNameRet::New() const {
  return new SdkHGetAllKeysByNameRet;
}

void SdkHGetAllKeysByNameRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKeysByNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKeysByNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->keys(i),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHGetAllKeysByNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKeysByNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated bytes keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::BytesSize(this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKeysByNameRet::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKeysByNameRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetAllKeysByNameRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKeysByNameRet::MergeFrom(const SdkHGetAllKeysByNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKeysByNameRet::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKeysByNameRet::CopyFrom(const SdkHGetAllKeysByNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKeysByNameRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkHGetAllKeysByNameRet::Swap(SdkHGetAllKeysByNameRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKeysByNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKeysByNameRet_descriptor_;
  metadata.reflection = SdkHGetAllKeysByNameRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKVsByName::kOpcodeFieldNumber;
const int SdkHGetAllKVsByName::kTableFieldNumber;
const int SdkHGetAllKVsByName::kHnameFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByName::SdkHGetAllKVsByName() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByName::InitAsDefaultInstance() {}

SdkHGetAllKVsByName::SdkHGetAllKVsByName(const SdkHGetAllKVsByName& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByName::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByName::~SdkHGetAllKVsByName() { SharedDtor(); }

void SdkHGetAllKVsByName::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKVsByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByName_descriptor_;
}

const SdkHGetAllKVsByName& SdkHGetAllKVsByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByName* SdkHGetAllKVsByName::default_instance_ = NULL;

SdkHGetAllKVsByName* SdkHGetAllKVsByName::New() const {
  return new SdkHGetAllKVsByName;
}

void SdkHGetAllKVsByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKVsByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByName* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetAllKVsByName*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByName::MergeFrom(const SdkHGetAllKVsByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByName::CopyFrom(const SdkHGetAllKVsByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHGetAllKVsByName::Swap(SdkHGetAllKVsByName* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByName_descriptor_;
  metadata.reflection = SdkHGetAllKVsByName_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKVsByNameRet_HKeyValue::kKeyFieldNumber;
const int SdkHGetAllKVsByNameRet_HKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByNameRet_HKeyValue::SdkHGetAllKVsByNameRet_HKeyValue()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByNameRet_HKeyValue::InitAsDefaultInstance() {}

SdkHGetAllKVsByNameRet_HKeyValue::SdkHGetAllKVsByNameRet_HKeyValue(
    const SdkHGetAllKVsByNameRet_HKeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByNameRet_HKeyValue::~SdkHGetAllKVsByNameRet_HKeyValue() {
  SharedDtor();
}

void SdkHGetAllKVsByNameRet_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByNameRet_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor*
SdkHGetAllKVsByNameRet_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByNameRet_HKeyValue_descriptor_;
}

const SdkHGetAllKVsByNameRet_HKeyValue&
SdkHGetAllKVsByNameRet_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByNameRet_HKeyValue*
    SdkHGetAllKVsByNameRet_HKeyValue::default_instance_ = NULL;

SdkHGetAllKVsByNameRet_HKeyValue* SdkHGetAllKVsByNameRet_HKeyValue::New()
    const {
  return new SdkHGetAllKVsByNameRet_HKeyValue;
}

void SdkHGetAllKVsByNameRet_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByNameRet_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByNameRet_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHGetAllKVsByNameRet_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByNameRet_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByNameRet_HKeyValue::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByNameRet_HKeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetAllKVsByNameRet_HKeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByNameRet_HKeyValue::MergeFrom(
    const SdkHGetAllKVsByNameRet_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByNameRet_HKeyValue::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet_HKeyValue::CopyFrom(
    const SdkHGetAllKVsByNameRet_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByNameRet_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHGetAllKVsByNameRet_HKeyValue::Swap(
    SdkHGetAllKVsByNameRet_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByNameRet_HKeyValue::GetMetadata()
    const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByNameRet_HKeyValue_descriptor_;
  metadata.reflection = SdkHGetAllKVsByNameRet_HKeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHGetAllKVsByNameRet::kOpcodeFieldNumber;
const int SdkHGetAllKVsByNameRet::kRetsFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByNameRet::SdkHGetAllKVsByNameRet()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByNameRet::InitAsDefaultInstance() {}

SdkHGetAllKVsByNameRet::SdkHGetAllKVsByNameRet(
    const SdkHGetAllKVsByNameRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByNameRet::~SdkHGetAllKVsByNameRet() { SharedDtor(); }

void SdkHGetAllKVsByNameRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByNameRet_descriptor_;
}

const SdkHGetAllKVsByNameRet& SdkHGetAllKVsByNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByNameRet* SdkHGetAllKVsByNameRet::default_instance_ = NULL;

SdkHGetAllKVsByNameRet* SdkHGetAllKVsByNameRet::New() const {
  return new SdkHGetAllKVsByNameRet;
}

void SdkHGetAllKVsByNameRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  rets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        break;
      }

      // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_rets:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_rets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->rets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHGetAllKVsByNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->rets(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  total_size += 1 * this->rets_size();
  for (int i = 0; i < this->rets_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->rets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByNameRet::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByNameRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHGetAllKVsByNameRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByNameRet::MergeFrom(const SdkHGetAllKVsByNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rets_.MergeFrom(from.rets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByNameRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet::CopyFrom(const SdkHGetAllKVsByNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByNameRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rets_size(); i++) {
    if (!this->rets(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHGetAllKVsByNameRet::Swap(SdkHGetAllKVsByNameRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    rets_.Swap(&other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByNameRet_descriptor_;
  metadata.reflection = SdkHGetAllKVsByNameRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHMput_HKeyValue::kKeyFieldNumber;
const int SdkHMput_HKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHMput_HKeyValue::SdkHMput_HKeyValue() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMput_HKeyValue::InitAsDefaultInstance() {}

SdkHMput_HKeyValue::SdkHMput_HKeyValue(const SdkHMput_HKeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMput_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMput_HKeyValue::~SdkHMput_HKeyValue() { SharedDtor(); }

void SdkHMput_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMput_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMput_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMput_HKeyValue_descriptor_;
}

const SdkHMput_HKeyValue& SdkHMput_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMput_HKeyValue* SdkHMput_HKeyValue::default_instance_ = NULL;

SdkHMput_HKeyValue* SdkHMput_HKeyValue::New() const {
  return new SdkHMput_HKeyValue;
}

void SdkHMput_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMput_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMput_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMput_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMput_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMput_HKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMput_HKeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHMput_HKeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMput_HKeyValue::MergeFrom(const SdkHMput_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMput_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMput_HKeyValue::CopyFrom(const SdkHMput_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMput_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHMput_HKeyValue::Swap(SdkHMput_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMput_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMput_HKeyValue_descriptor_;
  metadata.reflection = SdkHMput_HKeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMput::kOpcodeFieldNumber;
const int SdkHMput::kTableFieldNumber;
const int SdkHMput::kHnameFieldNumber;
const int SdkHMput::kKvsFieldNumber;
const int SdkHMput::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHMput::SdkHMput() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHMput::InitAsDefaultInstance() {}

SdkHMput::SdkHMput(const SdkHMput& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMput::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMput::~SdkHMput() { SharedDtor(); }

void SdkHMput::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMput_descriptor_;
}

const SdkHMput& SdkHMput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMput* SdkHMput::default_instance_ = NULL;

SdkHMput* SdkHMput::New() const { return new SdkHMput; }

void SdkHMput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    writesrc_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kvs;
        break;
      }

      // repeated .SdkHMput.HKeyValue kvs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kvs;
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // repeated .SdkHMput.HKeyValue kvs = 4;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->kvs(i), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // repeated .SdkHMput.HKeyValue kvs = 4;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(4, this->kvs(i), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  // repeated .SdkHMput.HKeyValue kvs = 4;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMput* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMput*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMput::MergeFrom(const SdkHMput& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMput::CopyFrom(const SdkHMput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMput::Swap(SdkHMput* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    kvs_.Swap(&other->kvs_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMput_descriptor_;
  metadata.reflection = SdkHMput_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHMputRet_HKeyRetval::kKeyFieldNumber;
const int SdkHMputRet_HKeyRetval::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkHMputRet_HKeyRetval::SdkHMputRet_HKeyRetval()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMputRet_HKeyRetval::InitAsDefaultInstance() {}

SdkHMputRet_HKeyRetval::SdkHMputRet_HKeyRetval(
    const SdkHMputRet_HKeyRetval& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMputRet_HKeyRetval::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMputRet_HKeyRetval::~SdkHMputRet_HKeyRetval() { SharedDtor(); }

void SdkHMputRet_HKeyRetval::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMputRet_HKeyRetval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMputRet_HKeyRetval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMputRet_HKeyRetval_descriptor_;
}

const SdkHMputRet_HKeyRetval& SdkHMputRet_HKeyRetval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMputRet_HKeyRetval* SdkHMputRet_HKeyRetval::default_instance_ = NULL;

SdkHMputRet_HKeyRetval* SdkHMputRet_HKeyRetval::New() const {
  return new SdkHMputRet_HKeyRetval;
}

void SdkHMputRet_HKeyRetval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMputRet_HKeyRetval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retval;
        break;
      }

      // required int32 retval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMputRet_HKeyRetval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retval(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHMputRet_HKeyRetval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMputRet_HKeyRetval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required int32 retval = 2;
    if (has_retval()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->retval());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMputRet_HKeyRetval::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMputRet_HKeyRetval* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHMputRet_HKeyRetval*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMputRet_HKeyRetval::MergeFrom(const SdkHMputRet_HKeyRetval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMputRet_HKeyRetval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMputRet_HKeyRetval::CopyFrom(const SdkHMputRet_HKeyRetval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMputRet_HKeyRetval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHMputRet_HKeyRetval::Swap(SdkHMputRet_HKeyRetval* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMputRet_HKeyRetval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMputRet_HKeyRetval_descriptor_;
  metadata.reflection = SdkHMputRet_HKeyRetval_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMputRet::kOpcodeFieldNumber;
const int SdkHMputRet::kKrvsFieldNumber;
#endif  // !_MSC_VER

SdkHMputRet::SdkHMputRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHMputRet::InitAsDefaultInstance() {}

SdkHMputRet::SdkHMputRet(const SdkHMputRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMputRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMputRet::~SdkHMputRet() { SharedDtor(); }

void SdkHMputRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHMputRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMputRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMputRet_descriptor_;
}

const SdkHMputRet& SdkHMputRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMputRet* SdkHMputRet::default_instance_ = NULL;

SdkHMputRet* SdkHMputRet::New() const { return new SdkHMputRet; }

void SdkHMputRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  krvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMputRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        break;
      }

      // repeated .SdkHMputRet.HKeyRetval krvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_krvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_krvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMputRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->krvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMputRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->krvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMputRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  total_size += 1 * this->krvs_size();
  for (int i = 0; i < this->krvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->krvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMputRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMputRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHMputRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMputRet::MergeFrom(const SdkHMputRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  krvs_.MergeFrom(from.krvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMputRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMputRet::CopyFrom(const SdkHMputRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMputRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < krvs_size(); i++) {
    if (!this->krvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMputRet::Swap(SdkHMputRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    krvs_.Swap(&other->krvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMputRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMputRet_descriptor_;
  metadata.reflection = SdkHMputRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHMget::kOpcodeFieldNumber;
const int SdkHMget::kTableFieldNumber;
const int SdkHMget::kHnameFieldNumber;
const int SdkHMget::kKeysFieldNumber;
#endif  // !_MSC_VER

SdkHMget::SdkHMget() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHMget::InitAsDefaultInstance() {}

SdkHMget::SdkHMget(const SdkHMget& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMget::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMget::~SdkHMget() { SharedDtor(); }

void SdkHMget::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMget_descriptor_;
}

const SdkHMget& SdkHMget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMget* SdkHMget::default_instance_ = NULL;

SdkHMget* SdkHMget::New() const { return new SdkHMget; }

void SdkHMget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // repeated bytes keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->keys(i),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // repeated bytes keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }
  }
  // repeated bytes keys = 4;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::BytesSize(this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMget* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMget*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMget::MergeFrom(const SdkHMget& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMget::CopyFrom(const SdkHMget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHMget::Swap(SdkHMget* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMget_descriptor_;
  metadata.reflection = SdkHMget_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHMgetRet_HKeyValue::kKeyFieldNumber;
const int SdkHMgetRet_HKeyValue::kValueFieldNumber;
const int SdkHMgetRet_HKeyValue::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkHMgetRet_HKeyValue::SdkHMgetRet_HKeyValue() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMgetRet_HKeyValue::InitAsDefaultInstance() {}

SdkHMgetRet_HKeyValue::SdkHMgetRet_HKeyValue(const SdkHMgetRet_HKeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMgetRet_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMgetRet_HKeyValue::~SdkHMgetRet_HKeyValue() { SharedDtor(); }

void SdkHMgetRet_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMgetRet_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMgetRet_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMgetRet_HKeyValue_descriptor_;
}

const SdkHMgetRet_HKeyValue& SdkHMgetRet_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMgetRet_HKeyValue* SdkHMgetRet_HKeyValue::default_instance_ = NULL;

SdkHMgetRet_HKeyValue* SdkHMgetRet_HKeyValue::New() const {
  return new SdkHMgetRet_HKeyValue;
}

void SdkHMgetRet_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMgetRet_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retval;
        break;
      }

      // required int32 retval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMgetRet_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  // required int32 retval = 3;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retval(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHMgetRet_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 retval = 3;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMgetRet_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 retval = 3;
    if (has_retval()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->retval());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMgetRet_HKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMgetRet_HKeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHMgetRet_HKeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMgetRet_HKeyValue::MergeFrom(const SdkHMgetRet_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMgetRet_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMgetRet_HKeyValue::CopyFrom(const SdkHMgetRet_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMgetRet_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHMgetRet_HKeyValue::Swap(SdkHMgetRet_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMgetRet_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMgetRet_HKeyValue_descriptor_;
  metadata.reflection = SdkHMgetRet_HKeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMgetRet::kOpcodeFieldNumber;
const int SdkHMgetRet::kKvsFieldNumber;
#endif  // !_MSC_VER

SdkHMgetRet::SdkHMgetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHMgetRet::InitAsDefaultInstance() {}

SdkHMgetRet::SdkHMgetRet(const SdkHMgetRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMgetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMgetRet::~SdkHMgetRet() { SharedDtor(); }

void SdkHMgetRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHMgetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMgetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMgetRet_descriptor_;
}

const SdkHMgetRet& SdkHMgetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMgetRet* SdkHMgetRet::default_instance_ = NULL;

SdkHMgetRet* SdkHMgetRet::New() const { return new SdkHMgetRet; }

void SdkHMgetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMgetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .SdkHMgetRet.HKeyValue kvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMgetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMgetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHMgetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMgetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMgetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHMgetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMgetRet::MergeFrom(const SdkHMgetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMgetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMgetRet::CopyFrom(const SdkHMgetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMgetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMgetRet::Swap(SdkHMgetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kvs_.Swap(&other->kvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMgetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMgetRet_descriptor_;
  metadata.reflection = SdkHMgetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHRange::kOpcodeFieldNumber;
const int SdkHRange::kTableFieldNumber;
const int SdkHRange::kNameFieldNumber;
const int SdkHRange::kStartFieldNumber;
const int SdkHRange::kEndFieldNumber;
#endif  // !_MSC_VER

SdkHRange::SdkHRange() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHRange::InitAsDefaultInstance() {}

SdkHRange::SdkHRange(const SdkHRange& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHRange::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHRange::~SdkHRange() { SharedDtor(); }

void SdkHRange::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkHRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHRange_descriptor_;
}

const SdkHRange& SdkHRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHRange* SdkHRange::default_instance_ = NULL;

SdkHRange* SdkHRange::New() const { return new SdkHRange; }

void SdkHRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHRange* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHRange*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHRange::MergeFrom(const SdkHRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHRange::CopyFrom(const SdkHRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkHRange::Swap(SdkHRange* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHRange_descriptor_;
  metadata.reflection = SdkHRange_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHRangeRet_HKeyValue::kKeyFieldNumber;
const int SdkHRangeRet_HKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHRangeRet_HKeyValue::SdkHRangeRet_HKeyValue()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHRangeRet_HKeyValue::InitAsDefaultInstance() {}

SdkHRangeRet_HKeyValue::SdkHRangeRet_HKeyValue(
    const SdkHRangeRet_HKeyValue& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHRangeRet_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHRangeRet_HKeyValue::~SdkHRangeRet_HKeyValue() { SharedDtor(); }

void SdkHRangeRet_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHRangeRet_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHRangeRet_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHRangeRet_HKeyValue_descriptor_;
}

const SdkHRangeRet_HKeyValue& SdkHRangeRet_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHRangeRet_HKeyValue* SdkHRangeRet_HKeyValue::default_instance_ = NULL;

SdkHRangeRet_HKeyValue* SdkHRangeRet_HKeyValue::New() const {
  return new SdkHRangeRet_HKeyValue;
}

void SdkHRangeRet_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHRangeRet_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHRangeRet_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkHRangeRet_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHRangeRet_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHRangeRet_HKeyValue::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHRangeRet_HKeyValue* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHRangeRet_HKeyValue*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHRangeRet_HKeyValue::MergeFrom(const SdkHRangeRet_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHRangeRet_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHRangeRet_HKeyValue::CopyFrom(const SdkHRangeRet_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHRangeRet_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHRangeRet_HKeyValue::Swap(SdkHRangeRet_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHRangeRet_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHRangeRet_HKeyValue_descriptor_;
  metadata.reflection = SdkHRangeRet_HKeyValue_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHRangeRet::kOpcodeFieldNumber;
const int SdkHRangeRet::kKvsFieldNumber;
#endif  // !_MSC_VER

SdkHRangeRet::SdkHRangeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHRangeRet::InitAsDefaultInstance() {}

SdkHRangeRet::SdkHRangeRet(const SdkHRangeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHRangeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHRangeRet::~SdkHRangeRet() { SharedDtor(); }

void SdkHRangeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHRangeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHRangeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHRangeRet_descriptor_;
}

const SdkHRangeRet& SdkHRangeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHRangeRet* SdkHRangeRet::default_instance_ = NULL;

SdkHRangeRet* SdkHRangeRet::New() const { return new SdkHRangeRet; }

void SdkHRangeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHRangeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .SdkHRangeRet.HKeyValue kvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHRangeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkHRangeRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHRangeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkHRangeRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHRangeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkHRangeRet.HKeyValue kvs = 2;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHRangeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHRangeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHRangeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHRangeRet::MergeFrom(const SdkHRangeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHRangeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHRangeRet::CopyFrom(const SdkHRangeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHRangeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHRangeRet::Swap(SdkHRangeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kvs_.Swap(&other->kvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHRangeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHRangeRet_descriptor_;
  metadata.reflection = SdkHRangeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHTrim::kOpcodeFieldNumber;
const int SdkHTrim::kTableFieldNumber;
const int SdkHTrim::kHnameFieldNumber;
const int SdkHTrim::kStartFieldNumber;
const int SdkHTrim::kEndFieldNumber;
const int SdkHTrim::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHTrim::SdkHTrim() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHTrim::InitAsDefaultInstance() {}

SdkHTrim::SdkHTrim(const SdkHTrim& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHTrim::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHTrim::~SdkHTrim() { SharedDtor(); }

void SdkHTrim::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkHTrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHTrim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHTrim_descriptor_;
}

const SdkHTrim& SdkHTrim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHTrim* SdkHTrim::default_instance_ = NULL;

SdkHTrim* SdkHTrim::New() const { return new SdkHTrim; }

void SdkHTrim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHTrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHTrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->hname(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHTrim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHTrim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->hname());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHTrim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHTrim* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkHTrim*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHTrim::MergeFrom(const SdkHTrim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHTrim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHTrim::CopyFrom(const SdkHTrim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHTrim::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkHTrim::Swap(SdkHTrim* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHTrim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHTrim_descriptor_;
  metadata.reflection = SdkHTrim_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkHTrimRet::kOpcodeFieldNumber;
const int SdkHTrimRet::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkHTrimRet::SdkHTrimRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkHTrimRet::InitAsDefaultInstance() {}

SdkHTrimRet::SdkHTrimRet(const SdkHTrimRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHTrimRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHTrimRet::~SdkHTrimRet() { SharedDtor(); }

void SdkHTrimRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHTrimRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHTrimRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHTrimRet_descriptor_;
}

const SdkHTrimRet& SdkHTrimRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHTrimRet* SdkHTrimRet::default_instance_ = NULL;

SdkHTrimRet* SdkHTrimRet::New() const { return new SdkHTrimRet; }

void SdkHTrimRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHTrimRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retval;
        break;
      }

      // required int32 retval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHTrimRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retval(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHTrimRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkHTrimRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int32 retval = 2;
    if (has_retval()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->retval());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHTrimRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHTrimRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkHTrimRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHTrimRet::MergeFrom(const SdkHTrimRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHTrimRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHTrimRet::CopyFrom(const SdkHTrimRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHTrimRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHTrimRet::Swap(SdkHTrimRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHTrimRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHTrimRet_descriptor_;
  metadata.reflection = SdkHTrimRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkSetWithTTL::kOpcodeFieldNumber;
const int SdkSetWithTTL::kTableFieldNumber;
const int SdkSetWithTTL::kKeyFieldNumber;
const int SdkSetWithTTL::kValueFieldNumber;
const int SdkSetWithTTL::kTtlFieldNumber;
const int SdkSetWithTTL::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkSetWithTTL::SdkSetWithTTL() : ::google::protobuf::Message() { SharedCtor(); }

void SdkSetWithTTL::InitAsDefaultInstance() {}

SdkSetWithTTL::SdkSetWithTTL(const SdkSetWithTTL& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetWithTTL::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ttl_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetWithTTL::~SdkSetWithTTL() { SharedDtor(); }

void SdkSetWithTTL::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetWithTTL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetWithTTL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetWithTTL_descriptor_;
}

const SdkSetWithTTL& SdkSetWithTTL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetWithTTL* SdkSetWithTTL::default_instance_ = NULL;

SdkSetWithTTL* SdkSetWithTTL::New() const { return new SdkSetWithTTL; }

void SdkSetWithTTL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    ttl_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetWithTTL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ttl;
        break;
      }

      // required int32 ttl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetWithTTL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->value(),
                                                             output);
  }

  // required int32 ttl = 5;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ttl(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetWithTTL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 ttl = 5;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->ttl(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkSetWithTTL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 ttl = 5;
    if (has_ttl()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->ttl());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetWithTTL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetWithTTL* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkSetWithTTL*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetWithTTL::MergeFrom(const SdkSetWithTTL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetWithTTL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetWithTTL::CopyFrom(const SdkSetWithTTL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetWithTTL::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkSetWithTTL::Swap(SdkSetWithTTL* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(ttl_, other->ttl_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetWithTTL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetWithTTL_descriptor_;
  metadata.reflection = SdkSetWithTTL_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkSetWithTTLRet::kOpcodeFieldNumber;
const int SdkSetWithTTLRet::kStatusFieldNumber;
const int SdkSetWithTTLRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkSetWithTTLRet::SdkSetWithTTLRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkSetWithTTLRet::InitAsDefaultInstance() {}

SdkSetWithTTLRet::SdkSetWithTTLRet(const SdkSetWithTTLRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetWithTTLRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetWithTTLRet::~SdkSetWithTTLRet() { SharedDtor(); }

void SdkSetWithTTLRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetWithTTLRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetWithTTLRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetWithTTLRet_descriptor_;
}

const SdkSetWithTTLRet& SdkSetWithTTLRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetWithTTLRet* SdkSetWithTTLRet::default_instance_ = NULL;

SdkSetWithTTLRet* SdkSetWithTTLRet::New() const { return new SdkSetWithTTLRet; }

void SdkSetWithTTLRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetWithTTLRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetWithTTLRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetWithTTLRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkSetWithTTLRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetWithTTLRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetWithTTLRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkSetWithTTLRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetWithTTLRet::MergeFrom(const SdkSetWithTTLRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetWithTTLRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetWithTTLRet::CopyFrom(const SdkSetWithTTLRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetWithTTLRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkSetWithTTLRet::Swap(SdkSetWithTTLRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetWithTTLRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetWithTTLRet_descriptor_;
  metadata.reflection = SdkSetWithTTLRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLSize::kOpcodeFieldNumber;
const int SdkLSize::kTableFieldNumber;
const int SdkLSize::kNameFieldNumber;
#endif  // !_MSC_VER

SdkLSize::SdkLSize() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLSize::InitAsDefaultInstance() {}

SdkLSize::SdkLSize(const SdkLSize& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSize::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSize::~SdkLSize() { SharedDtor(); }

void SdkLSize::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSize_descriptor_;
}

const SdkLSize& SdkLSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSize* SdkLSize::default_instance_ = NULL;

SdkLSize* SdkLSize::New() const { return new SdkLSize; }

void SdkLSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLSize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSize* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLSize*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSize::MergeFrom(const SdkLSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSize::CopyFrom(const SdkLSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkLSize::Swap(SdkLSize* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSize_descriptor_;
  metadata.reflection = SdkLSize_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLSizeRet::kOpcodeFieldNumber;
const int SdkLSizeRet::kSizeRFieldNumber;
#endif  // !_MSC_VER

SdkLSizeRet::SdkLSizeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLSizeRet::InitAsDefaultInstance() {}

SdkLSizeRet::SdkLSizeRet(const SdkLSizeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSizeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  size_r_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSizeRet::~SdkLSizeRet() { SharedDtor(); }

void SdkLSizeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLSizeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSizeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSizeRet_descriptor_;
}

const SdkLSizeRet& SdkLSizeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSizeRet* SdkLSizeRet::default_instance_ = NULL;

SdkLSizeRet* SdkLSizeRet::New() const { return new SdkLSizeRet; }

void SdkLSizeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    size_r_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSizeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_r;
        break;
      }

      // required uint64 size_r = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_size_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &size_r_)));
          set_has_size_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSizeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required uint64 size_r = 2;
  if (has_size_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_r(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSizeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required uint64 size_r = 2;
  if (has_size_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        2, this->size_r(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLSizeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required uint64 size_r = 2;
    if (has_size_r()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->size_r());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSizeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSizeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLSizeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSizeRet::MergeFrom(const SdkLSizeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_size_r()) {
      set_size_r(from.size_r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSizeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSizeRet::CopyFrom(const SdkLSizeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSizeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLSizeRet::Swap(SdkLSizeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(size_r_, other->size_r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSizeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSizeRet_descriptor_;
  metadata.reflection = SdkLSizeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLGet::kOpcodeFieldNumber;
const int SdkLGet::kTableFieldNumber;
const int SdkLGet::kNameFieldNumber;
const int SdkLGet::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLGet::SdkLGet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLGet::InitAsDefaultInstance() {}

SdkLGet::SdkLGet(const SdkLGet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLGet::~SdkLGet() { SharedDtor(); }

void SdkLGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLGet_descriptor_;
}

const SdkLGet& SdkLGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLGet* SdkLGet::default_instance_ = NULL;

SdkLGet* SdkLGet::New() const { return new SdkLGet; }

void SdkLGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        4, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        4, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int32 frontorback = 4;
    if (has_frontorback()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frontorback());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLGet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLGet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLGet::MergeFrom(const SdkLGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLGet::CopyFrom(const SdkLGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkLGet::Swap(SdkLGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLGet_descriptor_;
  metadata.reflection = SdkLGet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLGetRet::kOpcodeFieldNumber;
const int SdkLGetRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLGetRet::SdkLGetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLGetRet::InitAsDefaultInstance() {}

SdkLGetRet::SdkLGetRet(const SdkLGetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLGetRet::~SdkLGetRet() { SharedDtor(); }

void SdkLGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLGetRet_descriptor_;
}

const SdkLGetRet& SdkLGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLGetRet* SdkLGetRet::default_instance_ = NULL;

SdkLGetRet* SdkLGetRet::New() const { return new SdkLGetRet; }

void SdkLGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLGetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLGetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLGetRet::MergeFrom(const SdkLGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLGetRet::CopyFrom(const SdkLGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLGetRet::Swap(SdkLGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLGetRet_descriptor_;
  metadata.reflection = SdkLGetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLPut::kOpcodeFieldNumber;
const int SdkLPut::kTableFieldNumber;
const int SdkLPut::kNameFieldNumber;
const int SdkLPut::kValueFieldNumber;
const int SdkLPut::kFrontorbackFieldNumber;
const int SdkLPut::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLPut::SdkLPut() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLPut::InitAsDefaultInstance() {}

SdkLPut::SdkLPut(const SdkLPut& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPut::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPut::~SdkLPut() { SharedDtor(); }

void SdkLPut::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPut_descriptor_;
}

const SdkLPut& SdkLPut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPut* SdkLPut::default_instance_ = NULL;

SdkLPut* SdkLPut::New() const { return new SdkLPut; }

void SdkLPut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    frontorback_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->value(),
                                                             output);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->frontorback(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->frontorback(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLPut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // required int32 frontorback = 5;
    if (has_frontorback()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frontorback());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPut* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPut*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPut::MergeFrom(const SdkLPut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPut::CopyFrom(const SdkLPut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkLPut::Swap(SdkLPut* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPut_descriptor_;
  metadata.reflection = SdkLPut_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLPutRet::kOpcodeFieldNumber;
const int SdkLPutRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkLPutRet::SdkLPutRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLPutRet::InitAsDefaultInstance() {}

SdkLPutRet::SdkLPutRet(const SdkLPutRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPutRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPutRet::~SdkLPutRet() { SharedDtor(); }

void SdkLPutRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLPutRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPutRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPutRet_descriptor_;
}

const SdkLPutRet& SdkLPutRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPutRet* SdkLPutRet::default_instance_ = NULL;

SdkLPutRet* SdkLPutRet::New() const { return new SdkLPutRet; }

void SdkLPutRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPutRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPutRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPutRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLPutRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPutRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPutRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLPutRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPutRet::MergeFrom(const SdkLPutRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPutRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPutRet::CopyFrom(const SdkLPutRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPutRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLPutRet::Swap(SdkLPutRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPutRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPutRet_descriptor_;
  metadata.reflection = SdkLPutRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLSet::kOpcodeFieldNumber;
const int SdkLSet::kTableFieldNumber;
const int SdkLSet::kIndexFieldNumber;
const int SdkLSet::kValueFieldNumber;
const int SdkLSet::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLSet::SdkLSet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLSet::InitAsDefaultInstance() {}

SdkLSet::SdkLSet(const SdkLSet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSet::~SdkLSet() { SharedDtor(); }

void SdkLSet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSet_descriptor_;
}

const SdkLSet& SdkLSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSet* SdkLSet::default_instance_ = NULL;

SdkLSet* SdkLSet::New() const { return new SdkLSet; }

void SdkLSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    index_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(),
                                                             output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->value(),
                                                             output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->index(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->index());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLSet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSet::MergeFrom(const SdkLSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSet::CopyFrom(const SdkLSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkLSet::Swap(SdkLSet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSet_descriptor_;
  metadata.reflection = SdkLSet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLSetRet::kOpcodeFieldNumber;
const int SdkLSetRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkLSetRet::SdkLSetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLSetRet::InitAsDefaultInstance() {}

SdkLSetRet::SdkLSetRet(const SdkLSetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSetRet::~SdkLSetRet() { SharedDtor(); }

void SdkLSetRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLSetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSetRet_descriptor_;
}

const SdkLSetRet& SdkLSetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSetRet* SdkLSetRet::default_instance_ = NULL;

SdkLSetRet* SdkLSetRet::New() const { return new SdkLSetRet; }

void SdkLSetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLSetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLSetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSetRet::MergeFrom(const SdkLSetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSetRet::CopyFrom(const SdkLSetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLSetRet::Swap(SdkLSetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSetRet_descriptor_;
  metadata.reflection = SdkLSetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLPop::kOpcodeFieldNumber;
const int SdkLPop::kTableFieldNumber;
const int SdkLPop::kNameFieldNumber;
const int SdkLPop::kFrontorbackFieldNumber;
const int SdkLPop::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLPop::SdkLPop() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLPop::InitAsDefaultInstance() {}

SdkLPop::SdkLPop(const SdkLPop& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPop::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPop::~SdkLPop() { SharedDtor(); }

void SdkLPop::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPop_descriptor_;
}

const SdkLPop& SdkLPop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPop* SdkLPop::default_instance_ = NULL;

SdkLPop* SdkLPop::New() const { return new SdkLPop; }

void SdkLPop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    frontorback_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        4, this->frontorback(), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        4, this->frontorback(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLPop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int32 frontorback = 4;
    if (has_frontorback()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frontorback());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPop* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPop*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPop::MergeFrom(const SdkLPop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPop::CopyFrom(const SdkLPop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkLPop::Swap(SdkLPop* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPop_descriptor_;
  metadata.reflection = SdkLPop_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLPopRet::kOpcodeFieldNumber;
const int SdkLPopRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLPopRet::SdkLPopRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLPopRet::InitAsDefaultInstance() {}

SdkLPopRet::SdkLPopRet(const SdkLPopRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPopRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPopRet::~SdkLPopRet() { SharedDtor(); }

void SdkLPopRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPopRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPopRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPopRet_descriptor_;
}

const SdkLPopRet& SdkLPopRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPopRet* SdkLPopRet::default_instance_ = NULL;

SdkLPopRet* SdkLPopRet::New() const { return new SdkLPopRet; }

void SdkLPopRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPopRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPopRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPopRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLPopRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPopRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPopRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLPopRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPopRet::MergeFrom(const SdkLPopRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPopRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPopRet::CopyFrom(const SdkLPopRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPopRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLPopRet::Swap(SdkLPopRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPopRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPopRet_descriptor_;
  metadata.reflection = SdkLPopRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLIndex::kOpcodeFieldNumber;
const int SdkLIndex::kTableFieldNumber;
const int SdkLIndex::kNameFieldNumber;
const int SdkLIndex::kIndexFieldNumber;
const int SdkLIndex::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLIndex::SdkLIndex() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLIndex::InitAsDefaultInstance() {}

SdkLIndex::SdkLIndex(const SdkLIndex& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLIndex::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = GOOGLE_ULONGLONG(0);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLIndex::~SdkLIndex() { SharedDtor(); }

void SdkLIndex::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLIndex_descriptor_;
}

const SdkLIndex& SdkLIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLIndex* SdkLIndex::default_instance_ = NULL;

SdkLIndex* SdkLIndex::New() const { return new SdkLIndex; }

void SdkLIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    index_ = GOOGLE_ULONGLONG(0);
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint64 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required uint64 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->index(),
                                                              output);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint64 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        4, this->index(), target);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required uint64 index = 4;
    if (has_index()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->index());
    }

    // required int32 frontorback = 5;
    if (has_frontorback()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frontorback());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLIndex* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLIndex*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLIndex::MergeFrom(const SdkLIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLIndex::CopyFrom(const SdkLIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkLIndex::Swap(SdkLIndex* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLIndex_descriptor_;
  metadata.reflection = SdkLIndex_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLIndexRet::kOpcodeFieldNumber;
const int SdkLIndexRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLIndexRet::SdkLIndexRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLIndexRet::InitAsDefaultInstance() {}

SdkLIndexRet::SdkLIndexRet(const SdkLIndexRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLIndexRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLIndexRet::~SdkLIndexRet() { SharedDtor(); }

void SdkLIndexRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLIndexRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLIndexRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLIndexRet_descriptor_;
}

const SdkLIndexRet& SdkLIndexRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLIndexRet* SdkLIndexRet::default_instance_ = NULL;

SdkLIndexRet* SdkLIndexRet::New() const { return new SdkLIndexRet; }

void SdkLIndexRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLIndexRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLIndexRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLIndexRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLIndexRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLIndexRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLIndexRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLIndexRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLIndexRet::MergeFrom(const SdkLIndexRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLIndexRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLIndexRet::CopyFrom(const SdkLIndexRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLIndexRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLIndexRet::Swap(SdkLIndexRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLIndexRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLIndexRet_descriptor_;
  metadata.reflection = SdkLIndexRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLRange::kOpcodeFieldNumber;
const int SdkLRange::kTableFieldNumber;
const int SdkLRange::kNameFieldNumber;
const int SdkLRange::kFromFieldNumber;
const int SdkLRange::kToFieldNumber;
const int SdkLRange::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLRange::SdkLRange() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLRange::InitAsDefaultInstance() {}

SdkLRange::SdkLRange(const SdkLRange& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLRange::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = GOOGLE_ULONGLONG(0);
  to_ = GOOGLE_ULONGLONG(0);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLRange::~SdkLRange() { SharedDtor(); }

void SdkLRange::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLRange_descriptor_;
}

const SdkLRange& SdkLRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLRange* SdkLRange::default_instance_ = NULL;

SdkLRange* SdkLRange::New() const { return new SdkLRange; }

void SdkLRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    from_ = GOOGLE_ULONGLONG(0);
    to_ = GOOGLE_ULONGLONG(0);
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }

      // required uint64 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to;
        break;
      }

      // required uint64 to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required uint64 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->from(),
                                                              output);
  }

  // required uint64 to = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->to(),
                                                              output);
  }

  // required int32 frontorback = 6;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint64 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        4, this->from(), target);
  }

  // required uint64 to = 5;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        5, this->to(), target);
  }

  // required int32 frontorback = 6;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required uint64 from = 4;
    if (has_from()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->from());
    }

    // required uint64 to = 5;
    if (has_to()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::UInt64Size(this->to());
    }

    // required int32 frontorback = 6;
    if (has_frontorback()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frontorback());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLRange* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLRange*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLRange::MergeFrom(const SdkLRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLRange::CopyFrom(const SdkLRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SdkLRange::Swap(SdkLRange* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLRange_descriptor_;
  metadata.reflection = SdkLRange_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLRangeRet::kOpcodeFieldNumber;
const int SdkLRangeRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLRangeRet::SdkLRangeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLRangeRet::InitAsDefaultInstance() {}

SdkLRangeRet::SdkLRangeRet(const SdkLRangeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLRangeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLRangeRet::~SdkLRangeRet() { SharedDtor(); }

void SdkLRangeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLRangeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLRangeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLRangeRet_descriptor_;
}

const SdkLRangeRet& SdkLRangeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLRangeRet* SdkLRangeRet::default_instance_ = NULL;

SdkLRangeRet* SdkLRangeRet::New() const { return new SdkLRangeRet; }

void SdkLRangeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLRangeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLRangeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(i),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLRangeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLRangeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated bytes value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::BytesSize(this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLRangeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLRangeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLRangeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLRangeRet::MergeFrom(const SdkLRangeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLRangeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLRangeRet::CopyFrom(const SdkLRangeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLRangeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkLRangeRet::Swap(SdkLRangeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLRangeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLRangeRet_descriptor_;
  metadata.reflection = SdkLRangeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLTrim::kOpcodeFieldNumber;
const int SdkLTrim::kTableFieldNumber;
const int SdkLTrim::kNameFieldNumber;
const int SdkLTrim::kFromFieldNumber;
const int SdkLTrim::kToFieldNumber;
const int SdkLTrim::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLTrim::SdkLTrim() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLTrim::InitAsDefaultInstance() {}

SdkLTrim::SdkLTrim(const SdkLTrim& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLTrim::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = GOOGLE_LONGLONG(0);
  to_ = GOOGLE_LONGLONG(0);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLTrim::~SdkLTrim() { SharedDtor(); }

void SdkLTrim::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLTrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLTrim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLTrim_descriptor_;
}

const SdkLTrim& SdkLTrim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLTrim* SdkLTrim::default_instance_ = NULL;

SdkLTrim* SdkLTrim::New() const { return new SdkLTrim; }

void SdkLTrim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    from_ = GOOGLE_LONGLONG(0);
    to_ = GOOGLE_LONGLONG(0);
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLTrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }

      // required int64 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to;
        break;
      }

      // required int64 to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(input,
                                                                        &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLTrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int64 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->from(),
                                                             output);
  }

  // required int64 to = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->to(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLTrim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int64 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->from(), target);
  }

  // required int64 to = 5;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->to(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLTrim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int64 from = 4;
    if (has_from()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->from());
    }

    // required int64 to = 5;
    if (has_to()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->to());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLTrim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLTrim* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkLTrim*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLTrim::MergeFrom(const SdkLTrim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLTrim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLTrim::CopyFrom(const SdkLTrim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLTrim::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkLTrim::Swap(SdkLTrim* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLTrim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLTrim_descriptor_;
  metadata.reflection = SdkLTrim_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkLTrimRet::kOpcodeFieldNumber;
const int SdkLTrimRet::kSizeFieldNumber;
#endif  // !_MSC_VER

SdkLTrimRet::SdkLTrimRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkLTrimRet::InitAsDefaultInstance() {}

SdkLTrimRet::SdkLTrimRet(const SdkLTrimRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLTrimRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLTrimRet::~SdkLTrimRet() { SharedDtor(); }

void SdkLTrimRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLTrimRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLTrimRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLTrimRet_descriptor_;
}

const SdkLTrimRet& SdkLTrimRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLTrimRet* SdkLTrimRet::default_instance_ = NULL;

SdkLTrimRet* SdkLTrimRet::New() const { return new SdkLTrimRet; }

void SdkLTrimRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLTrimRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLTrimRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLTrimRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkLTrimRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 size = 2;
    if (has_size()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->size());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLTrimRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLTrimRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkLTrimRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLTrimRet::MergeFrom(const SdkLTrimRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLTrimRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLTrimRet::CopyFrom(const SdkLTrimRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLTrimRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLTrimRet::Swap(SdkLTrimRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLTrimRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLTrimRet_descriptor_;
  metadata.reflection = SdkLTrimRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetTTL::kOpcodeFieldNumber;
const int SdkGetTTL::kTableFieldNumber;
const int SdkGetTTL::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkGetTTL::SdkGetTTL() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetTTL::InitAsDefaultInstance() {}

SdkGetTTL::SdkGetTTL(const SdkGetTTL& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetTTL::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetTTL::~SdkGetTTL() { SharedDtor(); }

void SdkGetTTL::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetTTL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetTTL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetTTL_descriptor_;
}

const SdkGetTTL& SdkGetTTL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetTTL* SdkGetTTL::default_instance_ = NULL;

SdkGetTTL* SdkGetTTL::New() const { return new SdkGetTTL; }

void SdkGetTTL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetTTL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetTTL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetTTL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetTTL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetTTL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetTTL* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetTTL*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetTTL::MergeFrom(const SdkGetTTL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetTTL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetTTL::CopyFrom(const SdkGetTTL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetTTL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetTTL::Swap(SdkGetTTL* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetTTL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetTTL_descriptor_;
  metadata.reflection = SdkGetTTL_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkGetTTLRet::kOpcodeFieldNumber;
const int SdkGetTTLRet::kTtlFieldNumber;
const int SdkGetTTLRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetTTLRet::SdkGetTTLRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkGetTTLRet::InitAsDefaultInstance() {}

SdkGetTTLRet::SdkGetTTLRet(const SdkGetTTLRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetTTLRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ttl_ = 0;
  master_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetTTLRet::~SdkGetTTLRet() { SharedDtor(); }

void SdkGetTTLRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetTTLRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetTTLRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetTTLRet_descriptor_;
}

const SdkGetTTLRet& SdkGetTTLRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetTTLRet* SdkGetTTLRet::default_instance_ = NULL;

SdkGetTTLRet* SdkGetTTLRet::New() const { return new SdkGetTTLRet; }

void SdkGetTTLRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    ttl_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetTTLRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ttl;
        break;
      }

      // required int32 ttl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
              this->master().data(), this->master().length(),
              ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetTTLRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int32 ttl = 2;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ttl(),
                                                             output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(3, this->master(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetTTLRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int32 ttl = 2;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->ttl(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
        this->master().data(), this->master().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkGetTTLRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int32 ttl = 2;
    if (has_ttl()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->ttl());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->master());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetTTLRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetTTLRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkGetTTLRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetTTLRet::MergeFrom(const SdkGetTTLRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetTTLRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetTTLRet::CopyFrom(const SdkGetTTLRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetTTLRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkGetTTLRet::Swap(SdkGetTTLRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(ttl_, other->ttl_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetTTLRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetTTLRet_descriptor_;
  metadata.reflection = SdkGetTTLRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZAdd::kOpcodeFieldNumber;
const int SdkZAdd::kTableFieldNumber;
const int SdkZAdd::kNameFieldNumber;
const int SdkZAdd::kScoreFieldNumber;
const int SdkZAdd::kKeyFieldNumber;
const int SdkZAdd::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZAdd::SdkZAdd() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZAdd::InitAsDefaultInstance() {}

SdkZAdd::SdkZAdd(const SdkZAdd& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZAdd::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZAdd::~SdkZAdd() { SharedDtor(); }

void SdkZAdd::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZAdd_descriptor_;
}

const SdkZAdd& SdkZAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZAdd* SdkZAdd::default_instance_ = NULL;

SdkZAdd* SdkZAdd::New() const { return new SdkZAdd; }

void SdkZAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_score;
        break;
      }

      // required bytes score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // required bytes key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->score(),
                                                             output);
  }

  // required bytes key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->key(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->score(), target);
  }

  // required bytes key = 5;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->key(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes score = 4;
    if (has_score()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->score());
    }

    // required bytes key = 5;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZAdd* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZAdd*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZAdd::MergeFrom(const SdkZAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZAdd::CopyFrom(const SdkZAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZAdd::Swap(SdkZAdd* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZAdd_descriptor_;
  metadata.reflection = SdkZAdd_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZAddRet::kOpcodeFieldNumber;
const int SdkZAddRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkZAddRet::SdkZAddRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZAddRet::InitAsDefaultInstance() {}

SdkZAddRet::SdkZAddRet(const SdkZAddRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZAddRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZAddRet::~SdkZAddRet() { SharedDtor(); }

void SdkZAddRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZAddRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZAddRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZAddRet_descriptor_;
}

const SdkZAddRet& SdkZAddRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZAddRet* SdkZAddRet::default_instance_ = NULL;

SdkZAddRet* SdkZAddRet::New() const { return new SdkZAddRet; }

void SdkZAddRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZAddRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZAddRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZAddRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZAddRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZAddRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZAddRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZAddRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZAddRet::MergeFrom(const SdkZAddRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZAddRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZAddRet::CopyFrom(const SdkZAddRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZAddRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZAddRet::Swap(SdkZAddRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZAddRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZAddRet_descriptor_;
  metadata.reflection = SdkZAddRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZGet::kOpcodeFieldNumber;
const int SdkZGet::kTableFieldNumber;
const int SdkZGet::kNameFieldNumber;
const int SdkZGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkZGet::SdkZGet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZGet::InitAsDefaultInstance() {}

SdkZGet::SdkZGet(const SdkZGet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZGet::~SdkZGet() { SharedDtor(); }

void SdkZGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZGet_descriptor_;
}

const SdkZGet& SdkZGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZGet* SdkZGet::default_instance_ = NULL;

SdkZGet* SdkZGet::New() const { return new SdkZGet; }

void SdkZGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZGet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZGet*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZGet::MergeFrom(const SdkZGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZGet::CopyFrom(const SdkZGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkZGet::Swap(SdkZGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZGet_descriptor_;
  metadata.reflection = SdkZGet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZGetRet::kOpcodeFieldNumber;
const int SdkZGetRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZGetRet::SdkZGetRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZGetRet::InitAsDefaultInstance() {}

SdkZGetRet::SdkZGetRet(const SdkZGetRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZGetRet::~SdkZGetRet() { SharedDtor(); }

void SdkZGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkZGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZGetRet_descriptor_;
}

const SdkZGetRet& SdkZGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZGetRet* SdkZGetRet::default_instance_ = NULL;

SdkZGetRet* SdkZGetRet::New() const { return new SdkZGetRet; }

void SdkZGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZGetRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZGetRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZGetRet::MergeFrom(const SdkZGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZGetRet::CopyFrom(const SdkZGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZGetRet::Swap(SdkZGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZGetRet_descriptor_;
  metadata.reflection = SdkZGetRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZSize::kOpcodeFieldNumber;
const int SdkZSize::kTableFieldNumber;
const int SdkZSize::kNameFieldNumber;
#endif  // !_MSC_VER

SdkZSize::SdkZSize() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZSize::InitAsDefaultInstance() {}

SdkZSize::SdkZSize(const SdkZSize& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZSize::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZSize::~SdkZSize() { SharedDtor(); }

void SdkZSize::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkZSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZSize_descriptor_;
}

const SdkZSize& SdkZSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZSize* SdkZSize::default_instance_ = NULL;

SdkZSize* SdkZSize::New() const { return new SdkZSize; }

void SdkZSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZSize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZSize* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZSize*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZSize::MergeFrom(const SdkZSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZSize::CopyFrom(const SdkZSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkZSize::Swap(SdkZSize* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZSize_descriptor_;
  metadata.reflection = SdkZSize_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZSizeRet::kOpcodeFieldNumber;
const int SdkZSizeRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZSizeRet::SdkZSizeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZSizeRet::InitAsDefaultInstance() {}

SdkZSizeRet::SdkZSizeRet(const SdkZSizeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZSizeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZSizeRet::~SdkZSizeRet() { SharedDtor(); }

void SdkZSizeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZSizeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZSizeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZSizeRet_descriptor_;
}

const SdkZSizeRet& SdkZSizeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZSizeRet* SdkZSizeRet::default_instance_ = NULL;

SdkZSizeRet* SdkZSizeRet::New() const { return new SdkZSizeRet; }

void SdkZSizeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZSizeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZSizeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZSizeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZSizeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZSizeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZSizeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZSizeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZSizeRet::MergeFrom(const SdkZSizeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZSizeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZSizeRet::CopyFrom(const SdkZSizeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZSizeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZSizeRet::Swap(SdkZSizeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZSizeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZSizeRet_descriptor_;
  metadata.reflection = SdkZSizeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZCount::kOpcodeFieldNumber;
const int SdkZCount::kTableFieldNumber;
const int SdkZCount::kNameFieldNumber;
const int SdkZCount::kStartFieldNumber;
const int SdkZCount::kEndFieldNumber;
#endif  // !_MSC_VER

SdkZCount::SdkZCount() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZCount::InitAsDefaultInstance() {}

SdkZCount::SdkZCount(const SdkZCount& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZCount::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZCount::~SdkZCount() { SharedDtor(); }

void SdkZCount::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkZCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZCount_descriptor_;
}

const SdkZCount& SdkZCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZCount* SdkZCount::default_instance_ = NULL;

SdkZCount* SdkZCount::New() const { return new SdkZCount; }

void SdkZCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZCount* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZCount*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZCount::MergeFrom(const SdkZCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZCount::CopyFrom(const SdkZCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZCount::Swap(SdkZCount* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZCount_descriptor_;
  metadata.reflection = SdkZCount_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZCountRet::kOpcodeFieldNumber;
const int SdkZCountRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZCountRet::SdkZCountRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZCountRet::InitAsDefaultInstance() {}

SdkZCountRet::SdkZCountRet(const SdkZCountRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZCountRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZCountRet::~SdkZCountRet() { SharedDtor(); }

void SdkZCountRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZCountRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZCountRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZCountRet_descriptor_;
}

const SdkZCountRet& SdkZCountRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZCountRet* SdkZCountRet::default_instance_ = NULL;

SdkZCountRet* SdkZCountRet::New() const { return new SdkZCountRet; }

void SdkZCountRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZCountRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZCountRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZCountRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZCountRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZCountRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZCountRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZCountRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZCountRet::MergeFrom(const SdkZCountRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZCountRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZCountRet::CopyFrom(const SdkZCountRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZCountRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZCountRet::Swap(SdkZCountRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZCountRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZCountRet_descriptor_;
  metadata.reflection = SdkZCountRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZIncr::kOpcodeFieldNumber;
const int SdkZIncr::kTableFieldNumber;
const int SdkZIncr::kNameFieldNumber;
const int SdkZIncr::kKeyFieldNumber;
const int SdkZIncr::kByFieldNumber;
const int SdkZIncr::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZIncr::SdkZIncr() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZIncr::InitAsDefaultInstance() {}

SdkZIncr::SdkZIncr(const SdkZIncr& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZIncr::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  by_ = GOOGLE_LONGLONG(0);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZIncr::~SdkZIncr() { SharedDtor(); }

void SdkZIncr::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZIncr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZIncr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZIncr_descriptor_;
}

const SdkZIncr& SdkZIncr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZIncr* SdkZIncr::default_instance_ = NULL;

SdkZIncr* SdkZIncr::New() const { return new SdkZIncr; }

void SdkZIncr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    by_ = GOOGLE_LONGLONG(0);
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZIncr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_by;
        break;
      }

      // required int64 by = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(input,
                                                                        &by_)));
          set_has_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZIncr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  // required int64 by = 5;
  if (has_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->by(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZIncr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // required int64 by = 5;
  if (has_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->by(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZIncr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required int64 by = 5;
    if (has_by()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->by());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZIncr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZIncr* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZIncr*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZIncr::MergeFrom(const SdkZIncr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_by()) {
      set_by(from.by());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZIncr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZIncr::CopyFrom(const SdkZIncr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZIncr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZIncr::Swap(SdkZIncr* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(by_, other->by_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZIncr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZIncr_descriptor_;
  metadata.reflection = SdkZIncr_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZIncrRet::kOpcodeFieldNumber;
const int SdkZIncrRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZIncrRet::SdkZIncrRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZIncrRet::InitAsDefaultInstance() {}

SdkZIncrRet::SdkZIncrRet(const SdkZIncrRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZIncrRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZIncrRet::~SdkZIncrRet() { SharedDtor(); }

void SdkZIncrRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkZIncrRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZIncrRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZIncrRet_descriptor_;
}

const SdkZIncrRet& SdkZIncrRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZIncrRet* SdkZIncrRet::default_instance_ = NULL;

SdkZIncrRet* SdkZIncrRet::New() const { return new SdkZIncrRet; }

void SdkZIncrRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZIncrRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZIncrRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZIncrRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZIncrRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZIncrRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZIncrRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZIncrRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZIncrRet::MergeFrom(const SdkZIncrRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZIncrRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZIncrRet::CopyFrom(const SdkZIncrRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZIncrRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZIncrRet::Swap(SdkZIncrRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZIncrRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZIncrRet_descriptor_;
  metadata.reflection = SdkZIncrRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZIncrByFloat::kOpcodeFieldNumber;
const int SdkZIncrByFloat::kTableFieldNumber;
const int SdkZIncrByFloat::kNameFieldNumber;
const int SdkZIncrByFloat::kKeyFieldNumber;
const int SdkZIncrByFloat::kByFieldNumber;
const int SdkZIncrByFloat::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZIncrByFloat::SdkZIncrByFloat() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZIncrByFloat::InitAsDefaultInstance() {}

SdkZIncrByFloat::SdkZIncrByFloat(const SdkZIncrByFloat& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZIncrByFloat::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  by_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZIncrByFloat::~SdkZIncrByFloat() { SharedDtor(); }

void SdkZIncrByFloat::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (by_ != &::google::protobuf::internal::kEmptyString) {
    delete by_;
  }
  if (this != default_instance_) {
  }
}

void SdkZIncrByFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZIncrByFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZIncrByFloat_descriptor_;
}

const SdkZIncrByFloat& SdkZIncrByFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZIncrByFloat* SdkZIncrByFloat::default_instance_ = NULL;

SdkZIncrByFloat* SdkZIncrByFloat::New() const { return new SdkZIncrByFloat; }

void SdkZIncrByFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_by()) {
      if (by_ != &::google::protobuf::internal::kEmptyString) {
        by_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZIncrByFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_by;
        break;
      }

      // required bytes by = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_by()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZIncrByFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  // required bytes by = 5;
  if (has_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->by(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZIncrByFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // required bytes by = 5;
  if (has_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->by(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZIncrByFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes by = 5;
    if (has_by()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->by());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZIncrByFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZIncrByFloat* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZIncrByFloat*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZIncrByFloat::MergeFrom(const SdkZIncrByFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_by()) {
      set_by(from.by());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZIncrByFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZIncrByFloat::CopyFrom(const SdkZIncrByFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZIncrByFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZIncrByFloat::Swap(SdkZIncrByFloat* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(by_, other->by_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZIncrByFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZIncrByFloat_descriptor_;
  metadata.reflection = SdkZIncrByFloat_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZIncrByFloatRet::kOpcodeFieldNumber;
const int SdkZIncrByFloatRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZIncrByFloatRet::SdkZIncrByFloatRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZIncrByFloatRet::InitAsDefaultInstance() {}

SdkZIncrByFloatRet::SdkZIncrByFloatRet(const SdkZIncrByFloatRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZIncrByFloatRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZIncrByFloatRet::~SdkZIncrByFloatRet() { SharedDtor(); }

void SdkZIncrByFloatRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkZIncrByFloatRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZIncrByFloatRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZIncrByFloatRet_descriptor_;
}

const SdkZIncrByFloatRet& SdkZIncrByFloatRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZIncrByFloatRet* SdkZIncrByFloatRet::default_instance_ = NULL;

SdkZIncrByFloatRet* SdkZIncrByFloatRet::New() const {
  return new SdkZIncrByFloatRet;
}

void SdkZIncrByFloatRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZIncrByFloatRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZIncrByFloatRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZIncrByFloatRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZIncrByFloatRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZIncrByFloatRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZIncrByFloatRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZIncrByFloatRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZIncrByFloatRet::MergeFrom(const SdkZIncrByFloatRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZIncrByFloatRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZIncrByFloatRet::CopyFrom(const SdkZIncrByFloatRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZIncrByFloatRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZIncrByFloatRet::Swap(SdkZIncrByFloatRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZIncrByFloatRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZIncrByFloatRet_descriptor_;
  metadata.reflection = SdkZIncrByFloatRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRank::kOpcodeFieldNumber;
const int SdkZRank::kTableFieldNumber;
const int SdkZRank::kNameFieldNumber;
const int SdkZRank::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkZRank::SdkZRank() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRank::InitAsDefaultInstance() {}

SdkZRank::SdkZRank(const SdkZRank& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRank::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRank::~SdkZRank() { SharedDtor(); }

void SdkZRank::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRank_descriptor_;
}

const SdkZRank& SdkZRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRank* SdkZRank::default_instance_ = NULL;

SdkZRank* SdkZRank::New() const { return new SdkZRank; }

void SdkZRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRank* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZRank*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRank::MergeFrom(const SdkZRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRank::CopyFrom(const SdkZRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkZRank::Swap(SdkZRank* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRank_descriptor_;
  metadata.reflection = SdkZRank_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRankRet::kOpcodeFieldNumber;
const int SdkZRankRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZRankRet::SdkZRankRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRankRet::InitAsDefaultInstance() {}

SdkZRankRet::SdkZRankRet(const SdkZRankRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRankRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRankRet::~SdkZRankRet() { SharedDtor(); }

void SdkZRankRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRankRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRankRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRankRet_descriptor_;
}

const SdkZRankRet& SdkZRankRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRankRet* SdkZRankRet::default_instance_ = NULL;

SdkZRankRet* SdkZRankRet::New() const { return new SdkZRankRet; }

void SdkZRankRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRankRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRankRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRankRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRankRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRankRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRankRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRankRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRankRet::MergeFrom(const SdkZRankRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRankRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRankRet::CopyFrom(const SdkZRankRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRankRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRankRet::Swap(SdkZRankRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRankRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRankRet_descriptor_;
  metadata.reflection = SdkZRankRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRank::kOpcodeFieldNumber;
const int SdkZRRank::kTableFieldNumber;
const int SdkZRRank::kNameFieldNumber;
const int SdkZRRank::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkZRRank::SdkZRRank() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRRank::InitAsDefaultInstance() {}

SdkZRRank::SdkZRRank(const SdkZRRank& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRank::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRank::~SdkZRRank() { SharedDtor(); }

void SdkZRRank::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRank_descriptor_;
}

const SdkZRRank& SdkZRRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRank* SdkZRRank::default_instance_ = NULL;

SdkZRRank* SdkZRRank::New() const { return new SdkZRRank; }

void SdkZRRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRank* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZRRank*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRank::MergeFrom(const SdkZRRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRank::CopyFrom(const SdkZRRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkZRRank::Swap(SdkZRRank* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRank_descriptor_;
  metadata.reflection = SdkZRRank_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRankRet::kOpcodeFieldNumber;
const int SdkZRRankRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZRRankRet::SdkZRRankRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRRankRet::InitAsDefaultInstance() {}

SdkZRRankRet::SdkZRRankRet(const SdkZRRankRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRankRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRankRet::~SdkZRRankRet() { SharedDtor(); }

void SdkZRRankRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRRankRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRankRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRankRet_descriptor_;
}

const SdkZRRankRet& SdkZRRankRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRankRet* SdkZRRankRet::default_instance_ = NULL;

SdkZRRankRet* SdkZRRankRet::New() const { return new SdkZRRankRet; }

void SdkZRRankRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRankRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRankRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRRankRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRankRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRankRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRankRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRankRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRankRet::MergeFrom(const SdkZRRankRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRankRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRankRet::CopyFrom(const SdkZRRankRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRankRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRRankRet::Swap(SdkZRRankRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRankRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRankRet_descriptor_;
  metadata.reflection = SdkZRRankRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRange::kOpcodeFieldNumber;
const int SdkZRange::kTableFieldNumber;
const int SdkZRange::kNameFieldNumber;
const int SdkZRange::kStartFieldNumber;
const int SdkZRange::kEndFieldNumber;
#endif  // !_MSC_VER

SdkZRange::SdkZRange() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRange::InitAsDefaultInstance() {}

SdkZRange::SdkZRange(const SdkZRange& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRange::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRange::~SdkZRange() { SharedDtor(); }

void SdkZRange::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRange_descriptor_;
}

const SdkZRange& SdkZRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRange* SdkZRange::default_instance_ = NULL;

SdkZRange* SdkZRange::New() const { return new SdkZRange; }

void SdkZRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    start_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // required int64 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // required int64 end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int64 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(),
                                                             output);
  }

  // required int64 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int64 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->start(), target);
  }

  // required int64 end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int64 start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->start());
    }

    // required int64 end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRange* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZRange*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRange::MergeFrom(const SdkZRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRange::CopyFrom(const SdkZRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZRange::Swap(SdkZRange* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRange_descriptor_;
  metadata.reflection = SdkZRange_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRangeRet_ZKeyScore::kKeyFieldNumber;
const int SdkZRangeRet_ZKeyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

SdkZRangeRet_ZKeyScore::SdkZRangeRet_ZKeyScore()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRangeRet_ZKeyScore::InitAsDefaultInstance() {}

SdkZRangeRet_ZKeyScore::SdkZRangeRet_ZKeyScore(
    const SdkZRangeRet_ZKeyScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRangeRet_ZKeyScore::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRangeRet_ZKeyScore::~SdkZRangeRet_ZKeyScore() { SharedDtor(); }

void SdkZRangeRet_ZKeyScore::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRangeRet_ZKeyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRangeRet_ZKeyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRangeRet_ZKeyScore_descriptor_;
}

const SdkZRangeRet_ZKeyScore& SdkZRangeRet_ZKeyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRangeRet_ZKeyScore* SdkZRangeRet_ZKeyScore::default_instance_ = NULL;

SdkZRangeRet_ZKeyScore* SdkZRangeRet_ZKeyScore::New() const {
  return new SdkZRangeRet_ZKeyScore;
}

void SdkZRangeRet_ZKeyScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRangeRet_ZKeyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // required bytes score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRangeRet_ZKeyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->score(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkZRangeRet_ZKeyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRangeRet_ZKeyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes score = 2;
    if (has_score()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRangeRet_ZKeyScore::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRangeRet_ZKeyScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRangeRet_ZKeyScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRangeRet_ZKeyScore::MergeFrom(const SdkZRangeRet_ZKeyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRangeRet_ZKeyScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRangeRet_ZKeyScore::CopyFrom(const SdkZRangeRet_ZKeyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRangeRet_ZKeyScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRangeRet_ZKeyScore::Swap(SdkZRangeRet_ZKeyScore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRangeRet_ZKeyScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRangeRet_ZKeyScore_descriptor_;
  metadata.reflection = SdkZRangeRet_ZKeyScore_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkZRangeRet::kOpcodeFieldNumber;
const int SdkZRangeRet::kKssFieldNumber;
#endif  // !_MSC_VER

SdkZRangeRet::SdkZRangeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRangeRet::InitAsDefaultInstance() {}

SdkZRangeRet::SdkZRangeRet(const SdkZRangeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRangeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRangeRet::~SdkZRangeRet() { SharedDtor(); }

void SdkZRangeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRangeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRangeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRangeRet_descriptor_;
}

const SdkZRangeRet& SdkZRangeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRangeRet* SdkZRangeRet::default_instance_ = NULL;

SdkZRangeRet* SdkZRangeRet::New() const { return new SdkZRangeRet; }

void SdkZRangeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRangeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        break;
      }

      // repeated .SdkZRangeRet.ZKeyScore kss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kss:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRangeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkZRangeRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRangeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkZRangeRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kss(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRangeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkZRangeRet.ZKeyScore kss = 2;
  total_size += 1 * this->kss_size();
  for (int i = 0; i < this->kss_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRangeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRangeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRangeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRangeRet::MergeFrom(const SdkZRangeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kss_.MergeFrom(from.kss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRangeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRangeRet::CopyFrom(const SdkZRangeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRangeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kss_size(); i++) {
    if (!this->kss(i).IsInitialized()) return false;
  }
  return true;
}

void SdkZRangeRet::Swap(SdkZRangeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kss_.Swap(&other->kss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRangeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRangeRet_descriptor_;
  metadata.reflection = SdkZRangeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRangeByScore::kOpcodeFieldNumber;
const int SdkZRangeByScore::kTableFieldNumber;
const int SdkZRangeByScore::kNameFieldNumber;
const int SdkZRangeByScore::kStartFieldNumber;
const int SdkZRangeByScore::kEndFieldNumber;
#endif  // !_MSC_VER

SdkZRangeByScore::SdkZRangeByScore() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRangeByScore::InitAsDefaultInstance() {}

SdkZRangeByScore::SdkZRangeByScore(const SdkZRangeByScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRangeByScore::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRangeByScore::~SdkZRangeByScore() { SharedDtor(); }

void SdkZRangeByScore::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRangeByScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRangeByScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRangeByScore_descriptor_;
}

const SdkZRangeByScore& SdkZRangeByScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRangeByScore* SdkZRangeByScore::default_instance_ = NULL;

SdkZRangeByScore* SdkZRangeByScore::New() const { return new SdkZRangeByScore; }

void SdkZRangeByScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRangeByScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRangeByScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRangeByScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRangeByScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRangeByScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRangeByScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRangeByScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRangeByScore::MergeFrom(const SdkZRangeByScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRangeByScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRangeByScore::CopyFrom(const SdkZRangeByScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRangeByScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZRangeByScore::Swap(SdkZRangeByScore* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRangeByScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRangeByScore_descriptor_;
  metadata.reflection = SdkZRangeByScore_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRangeByScoreRet_ZKeyScore::kKeyFieldNumber;
const int SdkZRangeByScoreRet_ZKeyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

SdkZRangeByScoreRet_ZKeyScore::SdkZRangeByScoreRet_ZKeyScore()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRangeByScoreRet_ZKeyScore::InitAsDefaultInstance() {}

SdkZRangeByScoreRet_ZKeyScore::SdkZRangeByScoreRet_ZKeyScore(
    const SdkZRangeByScoreRet_ZKeyScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRangeByScoreRet_ZKeyScore::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRangeByScoreRet_ZKeyScore::~SdkZRangeByScoreRet_ZKeyScore() {
  SharedDtor();
}

void SdkZRangeByScoreRet_ZKeyScore::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRangeByScoreRet_ZKeyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor*
SdkZRangeByScoreRet_ZKeyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRangeByScoreRet_ZKeyScore_descriptor_;
}

const SdkZRangeByScoreRet_ZKeyScore&
SdkZRangeByScoreRet_ZKeyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRangeByScoreRet_ZKeyScore*
    SdkZRangeByScoreRet_ZKeyScore::default_instance_ = NULL;

SdkZRangeByScoreRet_ZKeyScore* SdkZRangeByScoreRet_ZKeyScore::New() const {
  return new SdkZRangeByScoreRet_ZKeyScore;
}

void SdkZRangeByScoreRet_ZKeyScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRangeByScoreRet_ZKeyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // required bytes score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRangeByScoreRet_ZKeyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->score(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkZRangeByScoreRet_ZKeyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRangeByScoreRet_ZKeyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes score = 2;
    if (has_score()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRangeByScoreRet_ZKeyScore::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRangeByScoreRet_ZKeyScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRangeByScoreRet_ZKeyScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRangeByScoreRet_ZKeyScore::MergeFrom(
    const SdkZRangeByScoreRet_ZKeyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRangeByScoreRet_ZKeyScore::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRangeByScoreRet_ZKeyScore::CopyFrom(
    const SdkZRangeByScoreRet_ZKeyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRangeByScoreRet_ZKeyScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRangeByScoreRet_ZKeyScore::Swap(SdkZRangeByScoreRet_ZKeyScore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRangeByScoreRet_ZKeyScore::GetMetadata()
    const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRangeByScoreRet_ZKeyScore_descriptor_;
  metadata.reflection = SdkZRangeByScoreRet_ZKeyScore_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkZRangeByScoreRet::kOpcodeFieldNumber;
const int SdkZRangeByScoreRet::kKssFieldNumber;
#endif  // !_MSC_VER

SdkZRangeByScoreRet::SdkZRangeByScoreRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRangeByScoreRet::InitAsDefaultInstance() {}

SdkZRangeByScoreRet::SdkZRangeByScoreRet(const SdkZRangeByScoreRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRangeByScoreRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRangeByScoreRet::~SdkZRangeByScoreRet() { SharedDtor(); }

void SdkZRangeByScoreRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRangeByScoreRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRangeByScoreRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRangeByScoreRet_descriptor_;
}

const SdkZRangeByScoreRet& SdkZRangeByScoreRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRangeByScoreRet* SdkZRangeByScoreRet::default_instance_ = NULL;

SdkZRangeByScoreRet* SdkZRangeByScoreRet::New() const {
  return new SdkZRangeByScoreRet;
}

void SdkZRangeByScoreRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRangeByScoreRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        break;
      }

      // repeated .SdkZRangeByScoreRet.ZKeyScore kss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kss:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRangeByScoreRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkZRangeByScoreRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRangeByScoreRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkZRangeByScoreRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kss(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRangeByScoreRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkZRangeByScoreRet.ZKeyScore kss = 2;
  total_size += 1 * this->kss_size();
  for (int i = 0; i < this->kss_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRangeByScoreRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRangeByScoreRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRangeByScoreRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRangeByScoreRet::MergeFrom(const SdkZRangeByScoreRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kss_.MergeFrom(from.kss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRangeByScoreRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRangeByScoreRet::CopyFrom(const SdkZRangeByScoreRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRangeByScoreRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kss_size(); i++) {
    if (!this->kss(i).IsInitialized()) return false;
  }
  return true;
}

void SdkZRangeByScoreRet::Swap(SdkZRangeByScoreRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kss_.Swap(&other->kss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRangeByScoreRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRangeByScoreRet_descriptor_;
  metadata.reflection = SdkZRangeByScoreRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRange::kOpcodeFieldNumber;
const int SdkZRRange::kTableFieldNumber;
const int SdkZRRange::kNameFieldNumber;
const int SdkZRRange::kStartFieldNumber;
const int SdkZRRange::kEndFieldNumber;
#endif  // !_MSC_VER

SdkZRRange::SdkZRRange() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRRange::InitAsDefaultInstance() {}

SdkZRRange::SdkZRRange(const SdkZRRange& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRange::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRange::~SdkZRRange() { SharedDtor(); }

void SdkZRRange::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRange_descriptor_;
}

const SdkZRRange& SdkZRRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRange* SdkZRRange::default_instance_ = NULL;

SdkZRRange* SdkZRRange::New() const { return new SdkZRRange; }

void SdkZRRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    start_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // required int64 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // required int64 end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int64 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(),
                                                             output);
  }

  // required int64 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int64 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->start(), target);
  }

  // required int64 end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int64 start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->start());
    }

    // required int64 end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRange* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRange*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRange::MergeFrom(const SdkZRRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRange::CopyFrom(const SdkZRRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZRRange::Swap(SdkZRRange* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRange_descriptor_;
  metadata.reflection = SdkZRRange_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRangeRet_ZKeyScore::kKeyFieldNumber;
const int SdkZRRangeRet_ZKeyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

SdkZRRangeRet_ZKeyScore::SdkZRRangeRet_ZKeyScore()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRRangeRet_ZKeyScore::InitAsDefaultInstance() {}

SdkZRRangeRet_ZKeyScore::SdkZRRangeRet_ZKeyScore(
    const SdkZRRangeRet_ZKeyScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRangeRet_ZKeyScore::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRangeRet_ZKeyScore::~SdkZRRangeRet_ZKeyScore() { SharedDtor(); }

void SdkZRRangeRet_ZKeyScore::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRRangeRet_ZKeyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRangeRet_ZKeyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRangeRet_ZKeyScore_descriptor_;
}

const SdkZRRangeRet_ZKeyScore& SdkZRRangeRet_ZKeyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRangeRet_ZKeyScore* SdkZRRangeRet_ZKeyScore::default_instance_ = NULL;

SdkZRRangeRet_ZKeyScore* SdkZRRangeRet_ZKeyScore::New() const {
  return new SdkZRRangeRet_ZKeyScore;
}

void SdkZRRangeRet_ZKeyScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRangeRet_ZKeyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // required bytes score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRangeRet_ZKeyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->score(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkZRRangeRet_ZKeyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRangeRet_ZKeyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes score = 2;
    if (has_score()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRangeRet_ZKeyScore::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRangeRet_ZKeyScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRangeRet_ZKeyScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRangeRet_ZKeyScore::MergeFrom(const SdkZRRangeRet_ZKeyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRangeRet_ZKeyScore::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRangeRet_ZKeyScore::CopyFrom(const SdkZRRangeRet_ZKeyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRangeRet_ZKeyScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRRangeRet_ZKeyScore::Swap(SdkZRRangeRet_ZKeyScore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRangeRet_ZKeyScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRangeRet_ZKeyScore_descriptor_;
  metadata.reflection = SdkZRRangeRet_ZKeyScore_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkZRRangeRet::kOpcodeFieldNumber;
const int SdkZRRangeRet::kKssFieldNumber;
#endif  // !_MSC_VER

SdkZRRangeRet::SdkZRRangeRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZRRangeRet::InitAsDefaultInstance() {}

SdkZRRangeRet::SdkZRRangeRet(const SdkZRRangeRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRangeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRangeRet::~SdkZRRangeRet() { SharedDtor(); }

void SdkZRRangeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRRangeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRangeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRangeRet_descriptor_;
}

const SdkZRRangeRet& SdkZRRangeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRangeRet* SdkZRRangeRet::default_instance_ = NULL;

SdkZRRangeRet* SdkZRRangeRet::New() const { return new SdkZRRangeRet; }

void SdkZRRangeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRangeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        break;
      }

      // repeated .SdkZRRangeRet.ZKeyScore kss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kss:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRangeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkZRRangeRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRRangeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkZRRangeRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kss(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRangeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkZRRangeRet.ZKeyScore kss = 2;
  total_size += 1 * this->kss_size();
  for (int i = 0; i < this->kss_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRangeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRangeRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRangeRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRangeRet::MergeFrom(const SdkZRRangeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kss_.MergeFrom(from.kss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRangeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRangeRet::CopyFrom(const SdkZRRangeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRangeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kss_size(); i++) {
    if (!this->kss(i).IsInitialized()) return false;
  }
  return true;
}

void SdkZRRangeRet::Swap(SdkZRRangeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kss_.Swap(&other->kss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRangeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRangeRet_descriptor_;
  metadata.reflection = SdkZRRangeRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRangeByScore::kOpcodeFieldNumber;
const int SdkZRRangeByScore::kTableFieldNumber;
const int SdkZRRangeByScore::kNameFieldNumber;
const int SdkZRRangeByScore::kStartFieldNumber;
const int SdkZRRangeByScore::kEndFieldNumber;
#endif  // !_MSC_VER

SdkZRRangeByScore::SdkZRRangeByScore() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRRangeByScore::InitAsDefaultInstance() {}

SdkZRRangeByScore::SdkZRRangeByScore(const SdkZRRangeByScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRangeByScore::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRangeByScore::~SdkZRRangeByScore() { SharedDtor(); }

void SdkZRRangeByScore::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRRangeByScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRangeByScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRangeByScore_descriptor_;
}

const SdkZRRangeByScore& SdkZRRangeByScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRangeByScore* SdkZRRangeByScore::default_instance_ = NULL;

SdkZRRangeByScore* SdkZRRangeByScore::New() const {
  return new SdkZRRangeByScore;
}

void SdkZRRangeByScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRangeByScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRangeByScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZRRangeByScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRangeByScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRangeByScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRangeByScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRangeByScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRangeByScore::MergeFrom(const SdkZRRangeByScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRangeByScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRangeByScore::CopyFrom(const SdkZRRangeByScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRangeByScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZRRangeByScore::Swap(SdkZRRangeByScore* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRangeByScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRangeByScore_descriptor_;
  metadata.reflection = SdkZRRangeByScore_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZRRangeByScoreRet_ZKeyScore::kKeyFieldNumber;
const int SdkZRRangeByScoreRet_ZKeyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

SdkZRRangeByScoreRet_ZKeyScore::SdkZRRangeByScoreRet_ZKeyScore()
    : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRRangeByScoreRet_ZKeyScore::InitAsDefaultInstance() {}

SdkZRRangeByScoreRet_ZKeyScore::SdkZRRangeByScoreRet_ZKeyScore(
    const SdkZRRangeByScoreRet_ZKeyScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRangeByScoreRet_ZKeyScore::SharedCtor() {
  _cached_size_ = 0;
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRangeByScoreRet_ZKeyScore::~SdkZRRangeByScoreRet_ZKeyScore() {
  SharedDtor();
}

void SdkZRRangeByScoreRet_ZKeyScore::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void SdkZRRangeByScoreRet_ZKeyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor*
SdkZRRangeByScoreRet_ZKeyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRangeByScoreRet_ZKeyScore_descriptor_;
}

const SdkZRRangeByScoreRet_ZKeyScore&
SdkZRRangeByScoreRet_ZKeyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRangeByScoreRet_ZKeyScore*
    SdkZRRangeByScoreRet_ZKeyScore::default_instance_ = NULL;

SdkZRRangeByScoreRet_ZKeyScore* SdkZRRangeByScoreRet_ZKeyScore::New() const {
  return new SdkZRRangeByScoreRet_ZKeyScore;
}

void SdkZRRangeByScoreRet_ZKeyScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRangeByScoreRet_ZKeyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // required bytes score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRangeByScoreRet_ZKeyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->key(),
                                                             output);
  }

  // required bytes score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->score(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkZRRangeByScoreRet_ZKeyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRangeByScoreRet_ZKeyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // required bytes score = 2;
    if (has_score()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRangeByScoreRet_ZKeyScore::MergeFrom(
    const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRangeByScoreRet_ZKeyScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRangeByScoreRet_ZKeyScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRangeByScoreRet_ZKeyScore::MergeFrom(
    const SdkZRRangeByScoreRet_ZKeyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRangeByScoreRet_ZKeyScore::CopyFrom(
    const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRangeByScoreRet_ZKeyScore::CopyFrom(
    const SdkZRRangeByScoreRet_ZKeyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRangeByScoreRet_ZKeyScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZRRangeByScoreRet_ZKeyScore::Swap(
    SdkZRRangeByScoreRet_ZKeyScore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRangeByScoreRet_ZKeyScore::GetMetadata()
    const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRangeByScoreRet_ZKeyScore_descriptor_;
  metadata.reflection = SdkZRRangeByScoreRet_ZKeyScore_reflection_;
  return metadata;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkZRRangeByScoreRet::kOpcodeFieldNumber;
const int SdkZRRangeByScoreRet::kKssFieldNumber;
#endif  // !_MSC_VER

SdkZRRangeByScoreRet::SdkZRRangeByScoreRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZRRangeByScoreRet::InitAsDefaultInstance() {}

SdkZRRangeByScoreRet::SdkZRRangeByScoreRet(const SdkZRRangeByScoreRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZRRangeByScoreRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZRRangeByScoreRet::~SdkZRRangeByScoreRet() { SharedDtor(); }

void SdkZRRangeByScoreRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZRRangeByScoreRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZRRangeByScoreRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZRRangeByScoreRet_descriptor_;
}

const SdkZRRangeByScoreRet& SdkZRRangeByScoreRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZRRangeByScoreRet* SdkZRRangeByScoreRet::default_instance_ = NULL;

SdkZRRangeByScoreRet* SdkZRRangeByScoreRet::New() const {
  return new SdkZRRangeByScoreRet;
}

void SdkZRRangeByScoreRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZRRangeByScoreRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        break;
      }

      // repeated .SdkZRRangeByScoreRet.ZKeyScore kss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_kss:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_kss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZRRangeByScoreRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // repeated .SdkZRRangeByScoreRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->kss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
SdkZRRangeByScoreRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // repeated .SdkZRRangeByScoreRet.ZKeyScore kss = 2;
  for (int i = 0; i < this->kss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->kss(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZRRangeByScoreRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }
  }
  // repeated .SdkZRRangeByScoreRet.ZKeyScore kss = 2;
  total_size += 1 * this->kss_size();
  for (int i = 0; i < this->kss_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->kss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZRRangeByScoreRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZRRangeByScoreRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZRRangeByScoreRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZRRangeByScoreRet::MergeFrom(const SdkZRRangeByScoreRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kss_.MergeFrom(from.kss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZRRangeByScoreRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZRRangeByScoreRet::CopyFrom(const SdkZRRangeByScoreRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZRRangeByScoreRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kss_size(); i++) {
    if (!this->kss(i).IsInitialized()) return false;
  }
  return true;
}

void SdkZRRangeByScoreRet::Swap(SdkZRRangeByScoreRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kss_.Swap(&other->kss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZRRangeByScoreRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZRRangeByScoreRet_descriptor_;
  metadata.reflection = SdkZRRangeByScoreRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDel::kOpcodeFieldNumber;
const int SdkZDel::kTableFieldNumber;
const int SdkZDel::kNameFieldNumber;
const int SdkZDel::kKeyFieldNumber;
const int SdkZDel::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZDel::SdkZDel() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZDel::InitAsDefaultInstance() {}

SdkZDel::SdkZDel(const SdkZDel& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDel::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDel::~SdkZDel() { SharedDtor(); }

void SdkZDel::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkZDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDel_descriptor_;
}

const SdkZDel& SdkZDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDel* SdkZDel::default_instance_ = NULL;

SdkZDel* SdkZDel::New() const { return new SdkZDel; }

void SdkZDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->key(),
                                                             output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDel* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SdkZDel*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDel::MergeFrom(const SdkZDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDel::CopyFrom(const SdkZDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkZDel::Swap(SdkZDel* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDel_descriptor_;
  metadata.reflection = SdkZDel_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDelRet::kOpcodeFieldNumber;
const int SdkZDelRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZDelRet::SdkZDelRet() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZDelRet::InitAsDefaultInstance() {}

SdkZDelRet::SdkZDelRet(const SdkZDelRet& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDelRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDelRet::~SdkZDelRet() { SharedDtor(); }

void SdkZDelRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZDelRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDelRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDelRet_descriptor_;
}

const SdkZDelRet& SdkZDelRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDelRet* SdkZDelRet::default_instance_ = NULL;

SdkZDelRet* SdkZDelRet::New() const { return new SdkZDelRet; }

void SdkZDelRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDelRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDelRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDelRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDelRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDelRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDelRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZDelRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDelRet::MergeFrom(const SdkZDelRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDelRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDelRet::CopyFrom(const SdkZDelRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDelRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZDelRet::Swap(SdkZDelRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDelRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDelRet_descriptor_;
  metadata.reflection = SdkZDelRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDelByRank::kOpcodeFieldNumber;
const int SdkZDelByRank::kTableFieldNumber;
const int SdkZDelByRank::kNameFieldNumber;
const int SdkZDelByRank::kStartFieldNumber;
const int SdkZDelByRank::kEndFieldNumber;
const int SdkZDelByRank::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZDelByRank::SdkZDelByRank() : ::google::protobuf::Message() { SharedCtor(); }

void SdkZDelByRank::InitAsDefaultInstance() {}

SdkZDelByRank::SdkZDelByRank(const SdkZDelByRank& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDelByRank::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDelByRank::~SdkZDelByRank() { SharedDtor(); }

void SdkZDelByRank::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkZDelByRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDelByRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDelByRank_descriptor_;
}

const SdkZDelByRank& SdkZDelByRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDelByRank* SdkZDelByRank::default_instance_ = NULL;

SdkZDelByRank* SdkZDelByRank::New() const { return new SdkZDelByRank; }

void SdkZDelByRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    start_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDelByRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // required int64 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // required int64 end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDelByRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required int64 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(),
                                                             output);
  }

  // required int64 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDelByRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int64 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->start(), target);
  }

  // required int64 end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->end(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDelByRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required int64 start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->start());
    }

    // required int64 end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->end());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDelByRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDelByRank* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZDelByRank*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDelByRank::MergeFrom(const SdkZDelByRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDelByRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDelByRank::CopyFrom(const SdkZDelByRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDelByRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZDelByRank::Swap(SdkZDelByRank* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDelByRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDelByRank_descriptor_;
  metadata.reflection = SdkZDelByRank_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDelByRankRet::kOpcodeFieldNumber;
const int SdkZDelByRankRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZDelByRankRet::SdkZDelByRankRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZDelByRankRet::InitAsDefaultInstance() {}

SdkZDelByRankRet::SdkZDelByRankRet(const SdkZDelByRankRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDelByRankRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDelByRankRet::~SdkZDelByRankRet() { SharedDtor(); }

void SdkZDelByRankRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZDelByRankRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDelByRankRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDelByRankRet_descriptor_;
}

const SdkZDelByRankRet& SdkZDelByRankRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDelByRankRet* SdkZDelByRankRet::default_instance_ = NULL;

SdkZDelByRankRet* SdkZDelByRankRet::New() const { return new SdkZDelByRankRet; }

void SdkZDelByRankRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDelByRankRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDelByRankRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDelByRankRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDelByRankRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDelByRankRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDelByRankRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZDelByRankRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDelByRankRet::MergeFrom(const SdkZDelByRankRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDelByRankRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDelByRankRet::CopyFrom(const SdkZDelByRankRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDelByRankRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZDelByRankRet::Swap(SdkZDelByRankRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDelByRankRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDelByRankRet_descriptor_;
  metadata.reflection = SdkZDelByRankRet_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDelByScore::kOpcodeFieldNumber;
const int SdkZDelByScore::kTableFieldNumber;
const int SdkZDelByScore::kNameFieldNumber;
const int SdkZDelByScore::kStartFieldNumber;
const int SdkZDelByScore::kEndFieldNumber;
const int SdkZDelByScore::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkZDelByScore::SdkZDelByScore() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZDelByScore::InitAsDefaultInstance() {}

SdkZDelByScore::SdkZDelByScore(const SdkZDelByScore& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDelByScore::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDelByScore::~SdkZDelByScore() { SharedDtor(); }

void SdkZDelByScore::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void SdkZDelByScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDelByScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDelByScore_descriptor_;
}

const SdkZDelByScore& SdkZDelByScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDelByScore* SdkZDelByScore::default_instance_ = NULL;

SdkZDelByScore* SdkZDelByScore::New() const { return new SdkZDelByScore; }

void SdkZDelByScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDelByScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // required bytes start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // required bytes end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDelByScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(2, this->table(),
                                                             output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->name(),
                                                             output);
  }

  // required bytes start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(4, this->start(),
                                                             output);
  }

  // required bytes end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(5, this->end(),
                                                             output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDelByScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start(), target);
  }

  // required bytes end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDelByScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->name());
    }

    // required bytes start = 4;
    if (has_start()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->start());
    }

    // required bytes end = 5;
    if (has_end()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->end());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->writesrc());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDelByScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDelByScore* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZDelByScore*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDelByScore::MergeFrom(const SdkZDelByScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDelByScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDelByScore::CopyFrom(const SdkZDelByScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDelByScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkZDelByScore::Swap(SdkZDelByScore* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDelByScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDelByScore_descriptor_;
  metadata.reflection = SdkZDelByScore_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SdkZDelByScoreRet::kOpcodeFieldNumber;
const int SdkZDelByScoreRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkZDelByScoreRet::SdkZDelByScoreRet() : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkZDelByScoreRet::InitAsDefaultInstance() {}

SdkZDelByScoreRet::SdkZDelByScoreRet(const SdkZDelByScoreRet& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkZDelByScoreRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkZDelByScoreRet::~SdkZDelByScoreRet() { SharedDtor(); }

void SdkZDelByScoreRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkZDelByScoreRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkZDelByScoreRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkZDelByScoreRet_descriptor_;
}

const SdkZDelByScoreRet& SdkZDelByScoreRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkZDelByScoreRet* SdkZDelByScoreRet::default_instance_ = NULL;

SdkZDelByScoreRet* SdkZDelByScoreRet::New() const {
  return new SdkZDelByScoreRet;
}

void SdkZDelByScoreRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkZDelByScoreRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkZDelByScoreRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(),
                                                             output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkZDelByScoreRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->opcode(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int SdkZDelByScoreRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->opcode());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->value());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkZDelByScoreRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkZDelByScoreRet* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SdkZDelByScoreRet*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkZDelByScoreRet::MergeFrom(const SdkZDelByScoreRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkZDelByScoreRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkZDelByScoreRet::CopyFrom(const SdkZDelByScoreRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkZDelByScoreRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkZDelByScoreRet::Swap(SdkZDelByScoreRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkZDelByScoreRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkZDelByScoreRet_descriptor_;
  metadata.reflection = SdkZDelByScoreRet_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
