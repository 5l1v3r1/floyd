!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	csapp.cc	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
AddNewPeer	consensus/raft/raft.cc	/^void RaftConsensus::AddNewPeer(NodeInfo* ni) {$/;"	f	class:floyd::raft::RaftConsensus
AdvanceCommitIndex	consensus/raft/raft.cc	/^void RaftConsensus::AdvanceCommitIndex() {$/;"	f	class:floyd::raft::RaftConsensus
Alarm	csapp.cc	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Append	consensus/raft/memory_log.cc	/^MemoryLog::Append(std::vector<Entry*>& new_entries) {$/;"	f	class:floyd::raft::MemoryLog
Append	consensus/raft/raft.cc	/^void RaftConsensus::Append(std::vector<Log::Entry*>& entries) {$/;"	f	class:floyd::raft::RaftConsensus
Append	consensus/raft/simplefile_log.cc	/^SimpleFileLog::Append(std::vector<Entry*>& entries) {$/;"	f	class:floyd::raft::SimpleFileLog
AppendEntries	consensus/raft/raft.cc	/^void RaftConsensus::PeerThread::AppendEntries() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
AppendEntriesRequest	consensus/raft/raft.pb.cc	/^AppendEntriesRequest::AppendEntriesRequest()$/;"	f	class:floyd::raft::AppendEntriesRequest
AppendEntriesRequest	consensus/raft/raft.pb.cc	/^AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)$/;"	f	class:floyd::raft::AppendEntriesRequest
AppendEntriesRequest	consensus/raft/raft.pb.h	/^class AppendEntriesRequest : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft
AppendEntriesRequest_descriptor_	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* AppendEntriesRequest_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
AppendEntriesRequest_reflection_	consensus/raft/raft.pb.cc	/^  AppendEntriesRequest_reflection_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
AppendEntriesResponse	consensus/raft/raft.pb.cc	/^AppendEntriesResponse::AppendEntriesResponse()$/;"	f	class:floyd::raft::AppendEntriesResponse
AppendEntriesResponse	consensus/raft/raft.pb.cc	/^AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)$/;"	f	class:floyd::raft::AppendEntriesResponse
AppendEntriesResponse	consensus/raft/raft.pb.h	/^class AppendEntriesResponse : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft
AppendEntriesResponse_descriptor_	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* AppendEntriesResponse_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
AppendEntriesResponse_reflection_	consensus/raft/raft.pb.cc	/^  AppendEntriesResponse_reflection_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
Apply	consensus/raft/state_machine.cc	/^bool StateMachine::ApplyThread::Apply(StateMachine::Entry& entry) {$/;"	f	class:floyd::raft::StateMachine::ApplyThread
ApplyThread	consensus/raft/state_machine.cc	/^StateMachine::ApplyThread::ApplyThread(StateMachine* sm)$/;"	f	class:floyd::raft::StateMachine::ApplyThread
ApplyThread	consensus/raft/state_machine.h	/^	class ApplyThread : public Thread {$/;"	c	class:floyd::raft::StateMachine
BecomeLeader	consensus/raft/raft.cc	/^void RaftConsensus::BecomeLeader() {$/;"	f	class:floyd::raft::RaftConsensus
BeginLeaderShip	consensus/raft/raft.cc	/^void RaftConsensus::PeerThread::BeginLeaderShip() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
BeginRequestVote	consensus/raft/raft.cc	/^void RaftConsensus::PeerThread::BeginRequestVote() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
Bind	csapp.cc	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
BuildObuf	floyd_conn.cc	/^void FloydCliConn::BuildObuf() {$/;"	f	class:floyd::FloydCliConn
ByteSize	command.pb.cc	/^int Command::ByteSize() const {$/;"	f	class:command::Command
ByteSize	command.pb.cc	/^int CommandRes::ByteSize() const {$/;"	f	class:command::CommandRes
ByteSize	command.pb.cc	/^int CommandRes_KvRet::ByteSize() const {$/;"	f	class:command::CommandRes_KvRet
ByteSize	command.pb.cc	/^int Command_Kv::ByteSize() const {$/;"	f	class:command::Command_Kv
ByteSize	consensus/raft/log_meta.pb.cc	/^int MetaData::ByteSize() const {$/;"	f	class:floyd::raft::log::MetaData
ByteSize	consensus/raft/raft.pb.cc	/^int AppendEntriesRequest::ByteSize() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
ByteSize	consensus/raft/raft.pb.cc	/^int AppendEntriesResponse::ByteSize() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
ByteSize	consensus/raft/raft.pb.cc	/^int Entry::ByteSize() const {$/;"	f	class:floyd::raft::Entry
ByteSize	consensus/raft/raft.pb.cc	/^int RequestVote::ByteSize() const {$/;"	f	class:floyd::raft::RequestVote
ByteSize	consensus/raft/raft.pb.cc	/^int ResponseVote::ByteSize() const {$/;"	f	class:floyd::raft::ResponseVote
ByteSize	consensus/raft/simplelog_meta.pb.cc	/^int MetaData::ByteSize() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
ByteSize	meta.pb.cc	/^int Meta::ByteSize() const {$/;"	f	class:meta::Meta
ByteSize	meta.pb.cc	/^int MetaRes::ByteSize() const {$/;"	f	class:meta::MetaRes
ByteSize	meta.pb.cc	/^int MetaRes_Node::ByteSize() const {$/;"	f	class:meta::MetaRes_Node
ByteSize	meta.pb.cc	/^int Meta_Node::ByteSize() const {$/;"	f	class:meta::Meta_Node
CANDIDATE	consensus/raft/raft.h	/^		CANDIDATE,$/;"	m	class:floyd::raft::RaftConsensus::State
Calloc	csapp.cc	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Clear	command.pb.cc	/^void Command::Clear() {$/;"	f	class:command::Command
Clear	command.pb.cc	/^void CommandRes::Clear() {$/;"	f	class:command::CommandRes
Clear	command.pb.cc	/^void CommandRes_KvRet::Clear() {$/;"	f	class:command::CommandRes_KvRet
Clear	command.pb.cc	/^void Command_Kv::Clear() {$/;"	f	class:command::Command_Kv
Clear	consensus/raft/log_meta.pb.cc	/^void MetaData::Clear() {$/;"	f	class:floyd::raft::log::MetaData
Clear	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::Clear() {$/;"	f	class:floyd::raft::AppendEntriesRequest
Clear	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::Clear() {$/;"	f	class:floyd::raft::AppendEntriesResponse
Clear	consensus/raft/raft.pb.cc	/^void Entry::Clear() {$/;"	f	class:floyd::raft::Entry
Clear	consensus/raft/raft.pb.cc	/^void RequestVote::Clear() {$/;"	f	class:floyd::raft::RequestVote
Clear	consensus/raft/raft.pb.cc	/^void ResponseVote::Clear() {$/;"	f	class:floyd::raft::ResponseVote
Clear	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::Clear() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
Clear	meta.pb.cc	/^void Meta::Clear() {$/;"	f	class:meta::Meta
Clear	meta.pb.cc	/^void MetaRes::Clear() {$/;"	f	class:meta::MetaRes
Clear	meta.pb.cc	/^void MetaRes_Node::Clear() {$/;"	f	class:meta::MetaRes_Node
Clear	meta.pb.cc	/^void Meta_Node::Clear() {$/;"	f	class:meta::Meta_Node
Close	csapp.cc	/^void Close(int fd) $/;"	f
Command	command.pb.cc	/^Command::Command()$/;"	f	class:command::Command
Command	command.pb.cc	/^Command::Command(const Command& from)$/;"	f	class:command::Command
Command	command.pb.h	/^class Command : public ::google::protobuf::Message {$/;"	c	namespace:command
CommandRes	command.pb.cc	/^CommandRes::CommandRes()$/;"	f	class:command::CommandRes
CommandRes	command.pb.cc	/^CommandRes::CommandRes(const CommandRes& from)$/;"	f	class:command::CommandRes
CommandRes	command.pb.h	/^class CommandRes : public ::google::protobuf::Message {$/;"	c	namespace:command
CommandRes_KvRet	command.pb.cc	/^CommandRes_KvRet::CommandRes_KvRet()$/;"	f	class:command::CommandRes_KvRet
CommandRes_KvRet	command.pb.cc	/^CommandRes_KvRet::CommandRes_KvRet(const CommandRes_KvRet& from)$/;"	f	class:command::CommandRes_KvRet
CommandRes_KvRet	command.pb.h	/^class CommandRes_KvRet : public ::google::protobuf::Message {$/;"	c	namespace:command
CommandRes_KvRet_descriptor_	command.pb.cc	/^const ::google::protobuf::Descriptor* CommandRes_KvRet_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
CommandRes_KvRet_reflection_	command.pb.cc	/^  CommandRes_KvRet_reflection_ = NULL;$/;"	m	namespace:command::__anon1	file:
CommandRes_Type	command.pb.h	/^enum CommandRes_Type {$/;"	g	namespace:command
CommandRes_Type_IsValid	command.pb.cc	/^bool CommandRes_Type_IsValid(int value) {$/;"	f	namespace:command
CommandRes_Type_Name	command.pb.h	/^inline const ::std::string& CommandRes_Type_Name(CommandRes_Type value) {$/;"	f	namespace:command
CommandRes_Type_Parse	command.pb.h	/^inline bool CommandRes_Type_Parse($/;"	f	namespace:command
CommandRes_Type_RaftAppendEntries	command.pb.h	/^  CommandRes_Type_RaftAppendEntries = 3$/;"	e	enum:command::CommandRes_Type
CommandRes_Type_RaftVote	command.pb.h	/^  CommandRes_Type_RaftVote = 2,$/;"	e	enum:command::CommandRes_Type
CommandRes_Type_Read	command.pb.h	/^  CommandRes_Type_Read = 0,$/;"	e	enum:command::CommandRes_Type
CommandRes_Type_Type_ARRAYSIZE	command.pb.h	/^const int CommandRes_Type_Type_ARRAYSIZE = CommandRes_Type_Type_MAX + 1;$/;"	m	namespace:command
CommandRes_Type_Type_MAX	command.pb.h	/^const CommandRes_Type CommandRes_Type_Type_MAX = CommandRes_Type_RaftAppendEntries;$/;"	m	namespace:command
CommandRes_Type_Type_MIN	command.pb.h	/^const CommandRes_Type CommandRes_Type_Type_MIN = CommandRes_Type_Read;$/;"	m	namespace:command
CommandRes_Type_Write	command.pb.h	/^  CommandRes_Type_Write = 1,$/;"	e	enum:command::CommandRes_Type
CommandRes_Type_descriptor	command.pb.cc	/^const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor() {$/;"	f	namespace:command
CommandRes_Type_descriptor_	command.pb.cc	/^const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
CommandRes_descriptor_	command.pb.cc	/^const ::google::protobuf::Descriptor* CommandRes_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
CommandRes_reflection_	command.pb.cc	/^  CommandRes_reflection_ = NULL;$/;"	m	namespace:command::__anon1	file:
Command_Kv	command.pb.cc	/^Command_Kv::Command_Kv()$/;"	f	class:command::Command_Kv
Command_Kv	command.pb.cc	/^Command_Kv::Command_Kv(const Command_Kv& from)$/;"	f	class:command::Command_Kv
Command_Kv	command.pb.h	/^class Command_Kv : public ::google::protobuf::Message {$/;"	c	namespace:command
Command_Kv_descriptor_	command.pb.cc	/^const ::google::protobuf::Descriptor* Command_Kv_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
Command_Kv_reflection_	command.pb.cc	/^  Command_Kv_reflection_ = NULL;$/;"	m	namespace:command::__anon1	file:
Command_Type	command.pb.h	/^enum Command_Type {$/;"	g	namespace:command
Command_Type_DirtyWrite	command.pb.h	/^  Command_Type_DirtyWrite = 1,$/;"	e	enum:command::Command_Type
Command_Type_IsValid	command.pb.cc	/^bool Command_Type_IsValid(int value) {$/;"	f	namespace:command
Command_Type_Name	command.pb.h	/^inline const ::std::string& Command_Type_Name(Command_Type value) {$/;"	f	namespace:command
Command_Type_Parse	command.pb.h	/^inline bool Command_Type_Parse($/;"	f	namespace:command
Command_Type_RaftAppendEntries	command.pb.h	/^  Command_Type_RaftAppendEntries = 4$/;"	e	enum:command::Command_Type
Command_Type_RaftVote	command.pb.h	/^  Command_Type_RaftVote = 3,$/;"	e	enum:command::Command_Type
Command_Type_Read	command.pb.h	/^  Command_Type_Read = 0,$/;"	e	enum:command::Command_Type
Command_Type_Type_ARRAYSIZE	command.pb.h	/^const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;$/;"	m	namespace:command
Command_Type_Type_MAX	command.pb.h	/^const Command_Type Command_Type_Type_MAX = Command_Type_RaftAppendEntries;$/;"	m	namespace:command
Command_Type_Type_MIN	command.pb.h	/^const Command_Type Command_Type_Type_MIN = Command_Type_Read;$/;"	m	namespace:command
Command_Type_Write	command.pb.h	/^  Command_Type_Write = 2,$/;"	e	enum:command::Command_Type
Command_Type_descriptor	command.pb.cc	/^const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {$/;"	f	namespace:command
Command_Type_descriptor_	command.pb.cc	/^const ::google::protobuf::EnumDescriptor* Command_Type_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
Command_descriptor_	command.pb.cc	/^const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;$/;"	m	namespace:command::__anon1	file:
Command_reflection_	command.pb.cc	/^  Command_reflection_ = NULL;$/;"	m	namespace:command::__anon1	file:
CondVar	floyd_mutex.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:CondVar
Connect	csapp.cc	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
Connect	floyd_conn.cc	/^Status FloydCliConn::Connect() {$/;"	f	class:floyd::FloydCliConn
CopyFrom	command.pb.cc	/^void Command::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::Command
CopyFrom	command.pb.cc	/^void Command::CopyFrom(const Command& from) {$/;"	f	class:command::Command
CopyFrom	command.pb.cc	/^void CommandRes::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::CommandRes
CopyFrom	command.pb.cc	/^void CommandRes::CopyFrom(const CommandRes& from) {$/;"	f	class:command::CommandRes
CopyFrom	command.pb.cc	/^void CommandRes_KvRet::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::CommandRes_KvRet
CopyFrom	command.pb.cc	/^void CommandRes_KvRet::CopyFrom(const CommandRes_KvRet& from) {$/;"	f	class:command::CommandRes_KvRet
CopyFrom	command.pb.cc	/^void Command_Kv::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::Command_Kv
CopyFrom	command.pb.cc	/^void Command_Kv::CopyFrom(const Command_Kv& from) {$/;"	f	class:command::Command_Kv
CopyFrom	consensus/raft/log_meta.pb.cc	/^void MetaData::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::log::MetaData
CopyFrom	consensus/raft/log_meta.pb.cc	/^void MetaData::CopyFrom(const MetaData& from) {$/;"	f	class:floyd::raft::log::MetaData
CopyFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::AppendEntriesRequest
CopyFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {$/;"	f	class:floyd::raft::AppendEntriesRequest
CopyFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::AppendEntriesResponse
CopyFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {$/;"	f	class:floyd::raft::AppendEntriesResponse
CopyFrom	consensus/raft/raft.pb.cc	/^void Entry::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::Entry
CopyFrom	consensus/raft/raft.pb.cc	/^void Entry::CopyFrom(const Entry& from) {$/;"	f	class:floyd::raft::Entry
CopyFrom	consensus/raft/raft.pb.cc	/^void RequestVote::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::RequestVote
CopyFrom	consensus/raft/raft.pb.cc	/^void RequestVote::CopyFrom(const RequestVote& from) {$/;"	f	class:floyd::raft::RequestVote
CopyFrom	consensus/raft/raft.pb.cc	/^void ResponseVote::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::ResponseVote
CopyFrom	consensus/raft/raft.pb.cc	/^void ResponseVote::CopyFrom(const ResponseVote& from) {$/;"	f	class:floyd::raft::ResponseVote
CopyFrom	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
CopyFrom	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::CopyFrom(const MetaData& from) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
CopyFrom	meta.pb.cc	/^void Meta::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::Meta
CopyFrom	meta.pb.cc	/^void Meta::CopyFrom(const Meta& from) {$/;"	f	class:meta::Meta
CopyFrom	meta.pb.cc	/^void MetaRes::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::MetaRes
CopyFrom	meta.pb.cc	/^void MetaRes::CopyFrom(const MetaRes& from) {$/;"	f	class:meta::MetaRes
CopyFrom	meta.pb.cc	/^void MetaRes_Node::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::MetaRes_Node
CopyFrom	meta.pb.cc	/^void MetaRes_Node::CopyFrom(const MetaRes_Node& from) {$/;"	f	class:meta::MetaRes_Node
CopyFrom	meta.pb.cc	/^void Meta_Node::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::Meta_Node
CopyFrom	meta.pb.cc	/^void Meta_Node::CopyFrom(const Meta_Node& from) {$/;"	f	class:meta::Meta_Node
CopyState	status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:floyd::Status
DO_	command.pb.cc	1214;"	d	file:
DO_	command.pb.cc	1293;"	d	file:
DO_	command.pb.cc	306;"	d	file:
DO_	command.pb.cc	350;"	d	file:
DO_	command.pb.cc	575;"	d	file:
DO_	command.pb.cc	654;"	d	file:
DO_	command.pb.cc	948;"	d	file:
DO_	command.pb.cc	994;"	d	file:
DO_	consensus/raft/log_meta.pb.cc	181;"	d	file:
DO_	consensus/raft/log_meta.pb.cc	243;"	d	file:
DO_	consensus/raft/raft.pb.cc	1187;"	d	file:
DO_	consensus/raft/raft.pb.cc	1312;"	d	file:
DO_	consensus/raft/raft.pb.cc	1626;"	d	file:
DO_	consensus/raft/raft.pb.cc	1674;"	d	file:
DO_	consensus/raft/raft.pb.cc	292;"	d	file:
DO_	consensus/raft/raft.pb.cc	338;"	d	file:
DO_	consensus/raft/raft.pb.cc	558;"	d	file:
DO_	consensus/raft/raft.pb.cc	652;"	d	file:
DO_	consensus/raft/raft.pb.cc	919;"	d	file:
DO_	consensus/raft/raft.pb.cc	967;"	d	file:
DO_	consensus/raft/simplelog_meta.pb.cc	181;"	d	file:
DO_	consensus/raft/simplelog_meta.pb.cc	243;"	d	file:
DO_	meta.pb.cc	1034;"	d	file:
DO_	meta.pb.cc	1066;"	d	file:
DO_	meta.pb.cc	275;"	d	file:
DO_	meta.pb.cc	321;"	d	file:
DO_	meta.pb.cc	524;"	d	file:
DO_	meta.pb.cc	576;"	d	file:
DO_	meta.pb.cc	790;"	d	file:
DO_	meta.pb.cc	836;"	d	file:
DealMessage	floyd_meta.cc	/^Status FloydMetaCliConn::DealMessage() {$/;"	f	class:floyd::FloydMetaCliConn
DealMessage	floyd_meta.cc	/^int FloydMetaConn::DealMessage() {$/;"	f	class:floyd::FloydMetaConn
DealMessage	floyd_worker.cc	/^Status FloydWorkerCliConn::DealMessage() {$/;"	f	class:floyd::FloydWorkerCliConn
DealMessage	floyd_worker.cc	/^int FloydWorkerConn::DealMessage() {$/;"	f	class:floyd::FloydWorkerConn
DirtyRead	floyd.cc	/^Status Floyd::DirtyRead(std::string& key, std::string& value) {$/;"	f	class:floyd::Floyd
DirtyWrite	command.pb.cc	/^const Command_Type Command::DirtyWrite;$/;"	m	class:command::Command	file:
DirtyWrite	command.pb.h	/^  static const Type DirtyWrite = Command_Type_DirtyWrite;$/;"	m	class:command::Command
DirtyWrite	floyd.cc	/^Status Floyd::DirtyWrite(std::string& key, std::string& value) {$/;"	f	class:floyd::Floyd
Dup2	csapp.cc	/^int Dup2(int fd1, int fd2) $/;"	f
ElectLeaderThread	consensus/raft/raft.cc	/^RaftConsensus::ElectLeaderThread::ElectLeaderThread(RaftConsensus* raft_con)$/;"	f	class:floyd::raft::RaftConsensus::ElectLeaderThread
ElectLeaderThread	consensus/raft/raft.h	/^	class ElectLeaderThread : public Thread {$/;"	c	class:floyd::raft::RaftConsensus
Entry	consensus/raft/log.h	/^	typedef floyd::raft::Entry Entry;$/;"	t	class:floyd::raft::Log
Entry	consensus/raft/memory_log.h	/^	typedef floyd::raft::Entry Entry;$/;"	t	class:floyd::raft::MemoryLog
Entry	consensus/raft/raft.pb.cc	/^Entry::Entry()$/;"	f	class:floyd::raft::Entry
Entry	consensus/raft/raft.pb.cc	/^Entry::Entry(const Entry& from)$/;"	f	class:floyd::raft::Entry
Entry	consensus/raft/raft.pb.h	/^class Entry : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft
Entry	consensus/raft/simplefile_log.h	/^	typedef floyd::raft::Entry Entry;$/;"	t	class:floyd::raft::SimpleFileLog
Entry	consensus/raft/state_machine.h	/^	struct Entry {$/;"	s	class:floyd::raft::StateMachine
Entry_descriptor_	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
Entry_reflection_	consensus/raft/raft.pb.cc	/^  Entry_reflection_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
Execve	csapp.cc	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
FOLLOWER	consensus/raft/raft.h	/^		FOLLOWER,$/;"	m	class:floyd::raft::RaftConsensus::State
Fclose	csapp.cc	/^void Fclose(FILE *fp) $/;"	f
Fdopen	csapp.cc	/^FILE *Fdopen(int fd, const char *type) $/;"	f
FetchRemoteMap	floyd.cc	/^Status Floyd::FetchRemoteMap(const std::string& ip, const int port,$/;"	f	class:floyd::Floyd
Fgets	csapp.cc	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
FileToProtocol	consensus/raft/simplefile_log.cc	/^int SimpleFileLog::FileToProtocol(google::protobuf::Message& out,$/;"	f	class:floyd::raft::SimpleFileLog
Floyd	floyd.cc	/^Floyd::Floyd(const Options& options, const std::string& stname)$/;"	f	class:floyd::Floyd
FloydCliConn	floyd_conn.cc	/^FloydCliConn::FloydCliConn(const std::string& ip, const int port)$/;"	f	class:floyd::FloydCliConn
FloydHeartBeatThread	floyd_hb.cc	/^FloydHeartBeatThread::FloydHeartBeatThread(const std::string& ip, const int port, const struct timespec period)$/;"	f	class:floyd::FloydHeartBeatThread
FloydMetaCliConn	floyd_meta.cc	/^FloydMetaCliConn::FloydMetaCliConn(const std::string& ip, const int port)$/;"	f	class:floyd::FloydMetaCliConn
FloydMetaConn	floyd_meta.cc	/^FloydMetaConn::FloydMetaConn(int fd, Thread* thread)$/;"	f	class:floyd::FloydMetaConn
FloydMetaThread	floyd_meta.cc	/^FloydMetaThread::FloydMetaThread(int port)$/;"	f	class:floyd::FloydMetaThread
FloydWorkerCliConn	floyd_worker.cc	/^FloydWorkerCliConn::FloydWorkerCliConn(const std::string& ip, const int port)$/;"	f	class:floyd::FloydWorkerCliConn
FloydWorkerConn	floyd_worker.cc	/^FloydWorkerConn::FloydWorkerConn(int fd, Thread* thread)$/;"	f	class:floyd::FloydWorkerConn
FloydWorkerThread	floyd_worker.cc	/^FloydWorkerThread::FloydWorkerThread(int port)$/;"	f	class:floyd::FloydWorkerThread
Fopen	csapp.cc	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
ForEach	consensus/raft/raft.cc	/^void RaftConsensus::ForEach(const SideEffect& side_effect) {$/;"	f	class:floyd::raft::RaftConsensus
Fork	csapp.cc	/^pid_t Fork(void) $/;"	f
Fputs	csapp.cc	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	csapp.cc	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	csapp.cc	/^void Free(void *ptr) $/;"	f
Fstat	csapp.cc	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	csapp.cc	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Get	floyd_db.cc	/^Status LeveldbBackend::Get(std::string& key,std::string& value){$/;"	f	class:floyd::LeveldbBackend
GetCachedSize	command.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:command::Command
GetCachedSize	command.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:command::CommandRes
GetCachedSize	command.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:command::CommandRes_KvRet
GetCachedSize	command.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:command::Command_Kv
GetCachedSize	consensus/raft/log_meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::log::MetaData
GetCachedSize	consensus/raft/raft.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::AppendEntriesRequest
GetCachedSize	consensus/raft/raft.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::AppendEntriesResponse
GetCachedSize	consensus/raft/raft.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::Entry
GetCachedSize	consensus/raft/raft.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::RequestVote
GetCachedSize	consensus/raft/raft.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::ResponseVote
GetCachedSize	consensus/raft/simplelog_meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:floyd::raft::simplefilelog::MetaData
GetCachedSize	meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:meta::Meta
GetCachedSize	meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:meta::MetaRes
GetCachedSize	meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:meta::MetaRes_Node
GetCachedSize	meta.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:meta::Meta_Node
GetEntry	consensus/raft/memory_log.cc	/^Log::Entry& MemoryLog::GetEntry(uint64_t index) {$/;"	f	class:floyd::raft::MemoryLog
GetEntry	consensus/raft/simplefile_log.cc	/^SimpleFileLog::Entry& SimpleFileLog::GetEntry(uint64_t index) {$/;"	f	class:floyd::raft::SimpleFileLog
GetEntryIds	consensus/raft/simplefile_log.cc	/^std::vector<uint64_t> SimpleFileLog::GetEntryIds() {$/;"	f	class:floyd::raft::SimpleFileLog
GetEnumDescriptor	command.pb.h	/^inline const EnumDescriptor* GetEnumDescriptor< ::command::CommandRes_Type>() {$/;"	f	namespace:google::protobuf
GetEnumDescriptor	command.pb.h	/^inline const EnumDescriptor* GetEnumDescriptor< ::command::Command_Type>() {$/;"	f	namespace:google::protobuf
GetEnumDescriptor	meta.pb.h	/^inline const EnumDescriptor* GetEnumDescriptor< ::meta::Meta_Type>() {$/;"	f	namespace:google::protobuf
GetLastAgreeIndex	consensus/raft/raft.cc	/^uint64_t RaftConsensus::PeerThread::GetLastAgreeIndex() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
GetLastLogIndex	consensus/raft/memory_log.cc	/^uint64_t MemoryLog::GetLastLogIndex() {$/;"	f	class:floyd::raft::MemoryLog
GetLastLogIndex	consensus/raft/simplefile_log.cc	/^uint64_t SimpleFileLog::GetLastLogIndex() {$/;"	f	class:floyd::raft::SimpleFileLog
GetLastLogTerm	consensus/raft/raft.cc	/^uint64_t RaftConsensus::GetLastLogTerm() {$/;"	f	class:floyd::raft::RaftConsensus
GetLeaderNode	consensus/raft/raft.cc	/^RaftConsensus::GetLeaderNode() {$/;"	f	class:floyd::raft::RaftConsensus
GetMetadata	command.pb.cc	/^::google::protobuf::Metadata Command::GetMetadata() const {$/;"	f	class:command::Command
GetMetadata	command.pb.cc	/^::google::protobuf::Metadata CommandRes::GetMetadata() const {$/;"	f	class:command::CommandRes
GetMetadata	command.pb.cc	/^::google::protobuf::Metadata CommandRes_KvRet::GetMetadata() const {$/;"	f	class:command::CommandRes_KvRet
GetMetadata	command.pb.cc	/^::google::protobuf::Metadata Command_Kv::GetMetadata() const {$/;"	f	class:command::Command_Kv
GetMetadata	consensus/raft/log_meta.pb.cc	/^::google::protobuf::Metadata MetaData::GetMetadata() const {$/;"	f	class:floyd::raft::log::MetaData
GetMetadata	consensus/raft/raft.pb.cc	/^::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
GetMetadata	consensus/raft/raft.pb.cc	/^::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
GetMetadata	consensus/raft/raft.pb.cc	/^::google::protobuf::Metadata Entry::GetMetadata() const {$/;"	f	class:floyd::raft::Entry
GetMetadata	consensus/raft/raft.pb.cc	/^::google::protobuf::Metadata RequestVote::GetMetadata() const {$/;"	f	class:floyd::raft::RequestVote
GetMetadata	consensus/raft/raft.pb.cc	/^::google::protobuf::Metadata ResponseVote::GetMetadata() const {$/;"	f	class:floyd::raft::ResponseVote
GetMetadata	consensus/raft/simplelog_meta.pb.cc	/^::google::protobuf::Metadata MetaData::GetMetadata() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
GetMetadata	meta.pb.cc	/^::google::protobuf::Metadata Meta::GetMetadata() const {$/;"	f	class:meta::Meta
GetMetadata	meta.pb.cc	/^::google::protobuf::Metadata MetaRes::GetMetadata() const {$/;"	f	class:meta::MetaRes
GetMetadata	meta.pb.cc	/^::google::protobuf::Metadata MetaRes_Node::GetMetadata() const {$/;"	f	class:meta::MetaRes_Node
GetMetadata	meta.pb.cc	/^::google::protobuf::Metadata Meta_Node::GetMetadata() const {$/;"	f	class:meta::Meta_Node
GetNextCommitEntry	consensus/raft/raft.cc	/^StateMachine::Entry RaftConsensus::GetNextCommitEntry(uint64_t index) {$/;"	f	class:floyd::raft::RaftConsensus
GetNodeInfo	floyd_meta.cc	/^Status FloydMetaCliConn::GetNodeInfo(std::vector<NodeInfo*>* nis) {$/;"	f	class:floyd::FloydMetaCliConn
GetReply	floyd_conn.cc	/^Status FloydCliConn::GetReply() {$/;"	f	class:floyd::FloydCliConn
GetSizeBytes	consensus/raft/memory_log.cc	/^uint64_t MemoryLog::GetSizeBytes() {$/;"	f	class:floyd::raft::MemoryLog
GetSizeBytes	consensus/raft/simplefile_log.cc	/^uint64_t SimpleFileLog::GetSizeBytes() {$/;"	f	class:floyd::raft::SimpleFileLog
GetStartLogIndex	consensus/raft/memory_log.cc	/^uint64_t MemoryLog::GetStartLogIndex() {$/;"	f	class:floyd::raft::MemoryLog
GetStartLogIndex	consensus/raft/simplefile_log.cc	/^uint64_t SimpleFileLog::GetStartLogIndex() {$/;"	f	class:floyd::raft::SimpleFileLog
GetValue	consensus/raft/raft.h	/^	typedef std::function<uint64_t(PeerThread&)> GetValue;$/;"	t	class:floyd::raft::RaftConsensus
Gethostbyaddr	csapp.cc	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	csapp.cc	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getpgrp	csapp.cc	/^pid_t Getpgrp(void) {$/;"	f
HandleAppendEntries	consensus/raft/raft.cc	/^void RaftConsensus::HandleAppendEntries(command::Command& cmd,$/;"	f	class:floyd::raft::RaftConsensus
HandleRequestVote	consensus/raft/raft.cc	/^void RaftConsensus::HandleRequestVote(command::Command& cmd,$/;"	f	class:floyd::raft::RaftConsensus
HandleStateMachineCommand	consensus/raft/raft.cc	/^floyd::Status RaftConsensus::HandleStateMachineCommand(command::Command& cmd) {$/;"	f	class:floyd::raft::RaftConsensus
HaveVote	consensus/raft/raft.cc	/^bool RaftConsensus::PeerThread::HaveVote() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
HeartBeat	floyd_hb.cc	/^void FloydHeartBeatThread::HeartBeat() {$/;"	f	class:floyd::FloydHeartBeatThread
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	command.pb.cc	4;"	d	file:
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	consensus/raft/log_meta.pb.cc	4;"	d	file:
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	consensus/raft/raft.pb.cc	4;"	d	file:
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	consensus/raft/simplelog_meta.pb.cc	4;"	d	file:
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	meta.pb.cc	4;"	d	file:
Init	consensus/raft/raft.cc	/^RaftConsensus::Init() {$/;"	f	class:floyd::raft::RaftConsensus
Init	consensus/raft/state_machine.cc	/^void StateMachine::Init() {$/;"	f	class:floyd::raft::StateMachine
InitAsDefaultInstance	command.pb.cc	/^void Command::InitAsDefaultInstance() {$/;"	f	class:command::Command
InitAsDefaultInstance	command.pb.cc	/^void CommandRes::InitAsDefaultInstance() {$/;"	f	class:command::CommandRes
InitAsDefaultInstance	command.pb.cc	/^void CommandRes_KvRet::InitAsDefaultInstance() {$/;"	f	class:command::CommandRes_KvRet
InitAsDefaultInstance	command.pb.cc	/^void Command_Kv::InitAsDefaultInstance() {$/;"	f	class:command::Command_Kv
InitAsDefaultInstance	consensus/raft/log_meta.pb.cc	/^void MetaData::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::log::MetaData
InitAsDefaultInstance	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::AppendEntriesRequest
InitAsDefaultInstance	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::AppendEntriesResponse
InitAsDefaultInstance	consensus/raft/raft.pb.cc	/^void Entry::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::Entry
InitAsDefaultInstance	consensus/raft/raft.pb.cc	/^void RequestVote::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::RequestVote
InitAsDefaultInstance	consensus/raft/raft.pb.cc	/^void ResponseVote::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::ResponseVote
InitAsDefaultInstance	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::InitAsDefaultInstance() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
InitAsDefaultInstance	meta.pb.cc	/^void Meta::InitAsDefaultInstance() {$/;"	f	class:meta::Meta
InitAsDefaultInstance	meta.pb.cc	/^void MetaRes::InitAsDefaultInstance() {$/;"	f	class:meta::MetaRes
InitAsDefaultInstance	meta.pb.cc	/^void MetaRes_Node::InitAsDefaultInstance() {$/;"	f	class:meta::MetaRes_Node
InitAsDefaultInstance	meta.pb.cc	/^void Meta_Node::InitAsDefaultInstance() {$/;"	f	class:meta::Meta_Node
InitOnce	floyd_mutex.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f
InterruptAll	consensus/raft/raft.cc	/^void RaftConsensus::InterruptAll() {$/;"	f	class:floyd::raft::RaftConsensus
IsInitialized	command.pb.cc	/^bool Command::IsInitialized() const {$/;"	f	class:command::Command
IsInitialized	command.pb.cc	/^bool CommandRes::IsInitialized() const {$/;"	f	class:command::CommandRes
IsInitialized	command.pb.cc	/^bool CommandRes_KvRet::IsInitialized() const {$/;"	f	class:command::CommandRes_KvRet
IsInitialized	command.pb.cc	/^bool Command_Kv::IsInitialized() const {$/;"	f	class:command::Command_Kv
IsInitialized	consensus/raft/log_meta.pb.cc	/^bool MetaData::IsInitialized() const {$/;"	f	class:floyd::raft::log::MetaData
IsInitialized	consensus/raft/raft.pb.cc	/^bool AppendEntriesRequest::IsInitialized() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
IsInitialized	consensus/raft/raft.pb.cc	/^bool AppendEntriesResponse::IsInitialized() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
IsInitialized	consensus/raft/raft.pb.cc	/^bool Entry::IsInitialized() const {$/;"	f	class:floyd::raft::Entry
IsInitialized	consensus/raft/raft.pb.cc	/^bool RequestVote::IsInitialized() const {$/;"	f	class:floyd::raft::RequestVote
IsInitialized	consensus/raft/raft.pb.cc	/^bool ResponseVote::IsInitialized() const {$/;"	f	class:floyd::raft::ResponseVote
IsInitialized	consensus/raft/simplelog_meta.pb.cc	/^bool MetaData::IsInitialized() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
IsInitialized	meta.pb.cc	/^bool Meta::IsInitialized() const {$/;"	f	class:meta::Meta
IsInitialized	meta.pb.cc	/^bool MetaRes::IsInitialized() const {$/;"	f	class:meta::MetaRes
IsInitialized	meta.pb.cc	/^bool MetaRes_Node::IsInitialized() const {$/;"	f	class:meta::MetaRes_Node
IsInitialized	meta.pb.cc	/^bool Meta_Node::IsInitialized() const {$/;"	f	class:meta::Meta_Node
Kill	csapp.cc	/^void Kill(pid_t pid, int signum) $/;"	f
Kv	command.pb.h	/^  typedef Command_Kv Kv;$/;"	t	class:command::Command
KvRet	command.pb.h	/^  typedef CommandRes_KvRet KvRet;$/;"	t	class:command::CommandRes
LEADER	consensus/raft/raft.h	/^		LEADER,$/;"	m	class:floyd::raft::RaftConsensus::State
LeaderDiskThread	consensus/raft/raft.cc	/^RaftConsensus::LeaderDiskThread::LeaderDiskThread(RaftConsensus* raft_con)$/;"	f	class:floyd::raft::RaftConsensus::LeaderDiskThread
LeaderDiskThread	consensus/raft/raft.h	/^	class LeaderDiskThread : public Thread {$/;"	c	class:floyd::raft::RaftConsensus
Listen	csapp.cc	/^void Listen(int s, int backlog) $/;"	f
Lock	floyd_mutex.cc	/^void Mutex::Lock() { $/;"	f	class:Mutex
Log	consensus/raft/log.cc	/^Log::Log()$/;"	f	class:floyd::raft::Log
Log	consensus/raft/log.h	/^class Log {$/;"	c	namespace:floyd::raft
Lseek	csapp.cc	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
Malloc	csapp.cc	/^void *Malloc(size_t size) $/;"	f
MemoryLog	consensus/raft/memory_log.cc	/^MemoryLog::MemoryLog()$/;"	f	class:floyd::raft::MemoryLog
MemoryLog	consensus/raft/memory_log.h	/^class MemoryLog : public Log {$/;"	c	namespace:floyd::raft
MergeFrom	command.pb.cc	/^void Command::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::Command
MergeFrom	command.pb.cc	/^void Command::MergeFrom(const Command& from) {$/;"	f	class:command::Command
MergeFrom	command.pb.cc	/^void CommandRes::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::CommandRes
MergeFrom	command.pb.cc	/^void CommandRes::MergeFrom(const CommandRes& from) {$/;"	f	class:command::CommandRes
MergeFrom	command.pb.cc	/^void CommandRes_KvRet::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::CommandRes_KvRet
MergeFrom	command.pb.cc	/^void CommandRes_KvRet::MergeFrom(const CommandRes_KvRet& from) {$/;"	f	class:command::CommandRes_KvRet
MergeFrom	command.pb.cc	/^void Command_Kv::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:command::Command_Kv
MergeFrom	command.pb.cc	/^void Command_Kv::MergeFrom(const Command_Kv& from) {$/;"	f	class:command::Command_Kv
MergeFrom	consensus/raft/log_meta.pb.cc	/^void MetaData::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::log::MetaData
MergeFrom	consensus/raft/log_meta.pb.cc	/^void MetaData::MergeFrom(const MetaData& from) {$/;"	f	class:floyd::raft::log::MetaData
MergeFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::AppendEntriesRequest
MergeFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {$/;"	f	class:floyd::raft::AppendEntriesRequest
MergeFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::AppendEntriesResponse
MergeFrom	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {$/;"	f	class:floyd::raft::AppendEntriesResponse
MergeFrom	consensus/raft/raft.pb.cc	/^void Entry::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::Entry
MergeFrom	consensus/raft/raft.pb.cc	/^void Entry::MergeFrom(const Entry& from) {$/;"	f	class:floyd::raft::Entry
MergeFrom	consensus/raft/raft.pb.cc	/^void RequestVote::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::RequestVote
MergeFrom	consensus/raft/raft.pb.cc	/^void RequestVote::MergeFrom(const RequestVote& from) {$/;"	f	class:floyd::raft::RequestVote
MergeFrom	consensus/raft/raft.pb.cc	/^void ResponseVote::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::ResponseVote
MergeFrom	consensus/raft/raft.pb.cc	/^void ResponseVote::MergeFrom(const ResponseVote& from) {$/;"	f	class:floyd::raft::ResponseVote
MergeFrom	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
MergeFrom	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::MergeFrom(const MetaData& from) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
MergeFrom	meta.pb.cc	/^void Meta::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::Meta
MergeFrom	meta.pb.cc	/^void Meta::MergeFrom(const Meta& from) {$/;"	f	class:meta::Meta
MergeFrom	meta.pb.cc	/^void MetaRes::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::MetaRes
MergeFrom	meta.pb.cc	/^void MetaRes::MergeFrom(const MetaRes& from) {$/;"	f	class:meta::MetaRes
MergeFrom	meta.pb.cc	/^void MetaRes_Node::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::MetaRes_Node
MergeFrom	meta.pb.cc	/^void MetaRes_Node::MergeFrom(const MetaRes_Node& from) {$/;"	f	class:meta::MetaRes_Node
MergeFrom	meta.pb.cc	/^void Meta_Node::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:meta::Meta_Node
MergeFrom	meta.pb.cc	/^void Meta_Node::MergeFrom(const Meta_Node& from) {$/;"	f	class:meta::Meta_Node
MergePartialFromCodedStream	command.pb.cc	/^bool Command::MergePartialFromCodedStream($/;"	f	class:command::Command
MergePartialFromCodedStream	command.pb.cc	/^bool CommandRes::MergePartialFromCodedStream($/;"	f	class:command::CommandRes
MergePartialFromCodedStream	command.pb.cc	/^bool CommandRes_KvRet::MergePartialFromCodedStream($/;"	f	class:command::CommandRes_KvRet
MergePartialFromCodedStream	command.pb.cc	/^bool Command_Kv::MergePartialFromCodedStream($/;"	f	class:command::Command_Kv
MergePartialFromCodedStream	consensus/raft/log_meta.pb.cc	/^bool MetaData::MergePartialFromCodedStream($/;"	f	class:floyd::raft::log::MetaData
MergePartialFromCodedStream	consensus/raft/raft.pb.cc	/^bool AppendEntriesRequest::MergePartialFromCodedStream($/;"	f	class:floyd::raft::AppendEntriesRequest
MergePartialFromCodedStream	consensus/raft/raft.pb.cc	/^bool AppendEntriesResponse::MergePartialFromCodedStream($/;"	f	class:floyd::raft::AppendEntriesResponse
MergePartialFromCodedStream	consensus/raft/raft.pb.cc	/^bool Entry::MergePartialFromCodedStream($/;"	f	class:floyd::raft::Entry
MergePartialFromCodedStream	consensus/raft/raft.pb.cc	/^bool RequestVote::MergePartialFromCodedStream($/;"	f	class:floyd::raft::RequestVote
MergePartialFromCodedStream	consensus/raft/raft.pb.cc	/^bool ResponseVote::MergePartialFromCodedStream($/;"	f	class:floyd::raft::ResponseVote
MergePartialFromCodedStream	consensus/raft/simplelog_meta.pb.cc	/^bool MetaData::MergePartialFromCodedStream($/;"	f	class:floyd::raft::simplefilelog::MetaData
MergePartialFromCodedStream	meta.pb.cc	/^bool Meta::MergePartialFromCodedStream($/;"	f	class:meta::Meta
MergePartialFromCodedStream	meta.pb.cc	/^bool MetaRes::MergePartialFromCodedStream($/;"	f	class:meta::MetaRes
MergePartialFromCodedStream	meta.pb.cc	/^bool MetaRes_Node::MergePartialFromCodedStream($/;"	f	class:meta::MetaRes_Node
MergePartialFromCodedStream	meta.pb.cc	/^bool Meta_Node::MergePartialFromCodedStream($/;"	f	class:meta::Meta_Node
MergeRemoteMap	floyd.cc	/^Status Floyd::MergeRemoteMap(const std::string& ip, const int port) {$/;"	f	class:floyd::Floyd
Meta	meta.pb.cc	/^Meta::Meta()$/;"	f	class:meta::Meta
Meta	meta.pb.cc	/^Meta::Meta(const Meta& from)$/;"	f	class:meta::Meta
Meta	meta.pb.h	/^class Meta : public ::google::protobuf::Message {$/;"	c	namespace:meta
MetaData	consensus/raft/log_meta.pb.cc	/^MetaData::MetaData()$/;"	f	class:floyd::raft::log::MetaData
MetaData	consensus/raft/log_meta.pb.cc	/^MetaData::MetaData(const MetaData& from)$/;"	f	class:floyd::raft::log::MetaData
MetaData	consensus/raft/log_meta.pb.h	/^class MetaData : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft::log
MetaData	consensus/raft/simplelog_meta.pb.cc	/^MetaData::MetaData()$/;"	f	class:floyd::raft::simplefilelog::MetaData
MetaData	consensus/raft/simplelog_meta.pb.cc	/^MetaData::MetaData(const MetaData& from)$/;"	f	class:floyd::raft::simplefilelog::MetaData
MetaData	consensus/raft/simplelog_meta.pb.h	/^class MetaData : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft::simplefilelog
MetaData_descriptor_	consensus/raft/log_meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::log::__anon3	file:
MetaData_descriptor_	consensus/raft/simplelog_meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::simplefilelog::__anon7	file:
MetaData_reflection_	consensus/raft/log_meta.pb.cc	/^  MetaData_reflection_ = NULL;$/;"	m	namespace:floyd::raft::log::__anon3	file:
MetaData_reflection_	consensus/raft/simplelog_meta.pb.cc	/^  MetaData_reflection_ = NULL;$/;"	m	namespace:floyd::raft::simplefilelog::__anon7	file:
MetaRes	meta.pb.cc	/^MetaRes::MetaRes()$/;"	f	class:meta::MetaRes
MetaRes	meta.pb.cc	/^MetaRes::MetaRes(const MetaRes& from)$/;"	f	class:meta::MetaRes
MetaRes	meta.pb.h	/^class MetaRes : public ::google::protobuf::Message {$/;"	c	namespace:meta
MetaRes_Node	meta.pb.cc	/^MetaRes_Node::MetaRes_Node()$/;"	f	class:meta::MetaRes_Node
MetaRes_Node	meta.pb.cc	/^MetaRes_Node::MetaRes_Node(const MetaRes_Node& from)$/;"	f	class:meta::MetaRes_Node
MetaRes_Node	meta.pb.h	/^class MetaRes_Node : public ::google::protobuf::Message {$/;"	c	namespace:meta
MetaRes_Node_descriptor_	meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaRes_Node_descriptor_ = NULL;$/;"	m	namespace:meta::__anon9	file:
MetaRes_Node_reflection_	meta.pb.cc	/^  MetaRes_Node_reflection_ = NULL;$/;"	m	namespace:meta::__anon9	file:
MetaRes_descriptor_	meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaRes_descriptor_ = NULL;$/;"	m	namespace:meta::__anon9	file:
MetaRes_reflection_	meta.pb.cc	/^  MetaRes_reflection_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Meta_Node	meta.pb.cc	/^Meta_Node::Meta_Node()$/;"	f	class:meta::Meta_Node
Meta_Node	meta.pb.cc	/^Meta_Node::Meta_Node(const Meta_Node& from)$/;"	f	class:meta::Meta_Node
Meta_Node	meta.pb.h	/^class Meta_Node : public ::google::protobuf::Message {$/;"	c	namespace:meta
Meta_Node_descriptor_	meta.pb.cc	/^const ::google::protobuf::Descriptor* Meta_Node_descriptor_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Meta_Node_reflection_	meta.pb.cc	/^  Meta_Node_reflection_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Meta_Type	meta.pb.h	/^enum Meta_Type {$/;"	g	namespace:meta
Meta_Type_IsValid	meta.pb.cc	/^bool Meta_Type_IsValid(int value) {$/;"	f	namespace:meta
Meta_Type_NODE	meta.pb.h	/^  Meta_Type_NODE = 1$/;"	e	enum:meta::Meta_Type
Meta_Type_Name	meta.pb.h	/^inline const ::std::string& Meta_Type_Name(Meta_Type value) {$/;"	f	namespace:meta
Meta_Type_PING	meta.pb.h	/^  Meta_Type_PING = 0,$/;"	e	enum:meta::Meta_Type
Meta_Type_Parse	meta.pb.h	/^inline bool Meta_Type_Parse($/;"	f	namespace:meta
Meta_Type_Type_ARRAYSIZE	meta.pb.h	/^const int Meta_Type_Type_ARRAYSIZE = Meta_Type_Type_MAX + 1;$/;"	m	namespace:meta
Meta_Type_Type_MAX	meta.pb.h	/^const Meta_Type Meta_Type_Type_MAX = Meta_Type_NODE;$/;"	m	namespace:meta
Meta_Type_Type_MIN	meta.pb.h	/^const Meta_Type Meta_Type_Type_MIN = Meta_Type_PING;$/;"	m	namespace:meta
Meta_Type_descriptor	meta.pb.cc	/^const ::google::protobuf::EnumDescriptor* Meta_Type_descriptor() {$/;"	f	namespace:meta
Meta_Type_descriptor_	meta.pb.cc	/^const ::google::protobuf::EnumDescriptor* Meta_Type_descriptor_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Meta_descriptor_	meta.pb.cc	/^const ::google::protobuf::Descriptor* Meta_descriptor_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Meta_reflection_	meta.pb.cc	/^  Meta_reflection_ = NULL;$/;"	m	namespace:meta::__anon9	file:
Mmap	csapp.cc	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	csapp.cc	/^void Munmap(void *start, size_t length) $/;"	f
Mutex	floyd_mutex.cc	/^Mutex::Mutex() { $/;"	f	class:Mutex
NODE	meta.pb.cc	/^const Meta_Type Meta::NODE;$/;"	m	class:meta::Meta	file:
NODE	meta.pb.h	/^  static const Type NODE = Meta_Type_NODE;$/;"	m	class:meta::Meta
NOT_LEADER	consensus/raft/raft.h	/^		NOT_LEADER,$/;"	m	class:floyd::raft::RaftConsensus::Result
New	command.pb.cc	/^Command* Command::New() const {$/;"	f	class:command::Command
New	command.pb.cc	/^CommandRes* CommandRes::New() const {$/;"	f	class:command::CommandRes
New	command.pb.cc	/^CommandRes_KvRet* CommandRes_KvRet::New() const {$/;"	f	class:command::CommandRes_KvRet
New	command.pb.cc	/^Command_Kv* Command_Kv::New() const {$/;"	f	class:command::Command_Kv
New	consensus/raft/log_meta.pb.cc	/^MetaData* MetaData::New() const {$/;"	f	class:floyd::raft::log::MetaData
New	consensus/raft/raft.pb.cc	/^AppendEntriesRequest* AppendEntriesRequest::New() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
New	consensus/raft/raft.pb.cc	/^AppendEntriesResponse* AppendEntriesResponse::New() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
New	consensus/raft/raft.pb.cc	/^Entry* Entry::New() const {$/;"	f	class:floyd::raft::Entry
New	consensus/raft/raft.pb.cc	/^RequestVote* RequestVote::New() const {$/;"	f	class:floyd::raft::RequestVote
New	consensus/raft/raft.pb.cc	/^ResponseVote* ResponseVote::New() const {$/;"	f	class:floyd::raft::ResponseVote
New	consensus/raft/simplelog_meta.pb.cc	/^MetaData* MetaData::New() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
New	meta.pb.cc	/^Meta* Meta::New() const {$/;"	f	class:meta::Meta
New	meta.pb.cc	/^MetaRes* MetaRes::New() const {$/;"	f	class:meta::MetaRes
New	meta.pb.cc	/^MetaRes_Node* MetaRes_Node::New() const {$/;"	f	class:meta::MetaRes_Node
New	meta.pb.cc	/^Meta_Node* Meta_Node::New() const {$/;"	f	class:meta::Meta_Node
Node	meta.pb.h	/^  typedef MetaRes_Node Node;$/;"	t	class:meta::MetaRes
Node	meta.pb.h	/^  typedef Meta_Node Node;$/;"	t	class:meta::Meta
NodeInfo	floyd_meta.cc	/^NodeInfo::NodeInfo(const std::string& ip, const int port) {$/;"	f	class:floyd::NodeInfo
Open	csapp.cc	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open	floyd_db.cc	/^Status LeveldbBackend::Open(){$/;"	f	class:floyd::LeveldbBackend
Open_clientfd	csapp.cc	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	csapp.cc	/^int Open_listenfd(int port) $/;"	f
Options	floyd_util.cc	/^Options::Options()$/;"	f	class:floyd::Options
P	csapp.cc	/^void P(sem_t *sem) $/;"	f
PING	meta.pb.cc	/^const Meta_Type Meta::PING;$/;"	m	class:meta::Meta	file:
PING	meta.pb.h	/^  static const Type PING = Meta_Type_PING;$/;"	m	class:meta::Meta
PROTOBUF_command_2eproto__INCLUDED	command.pb.h	5;"	d
PROTOBUF_meta_2eproto__INCLUDED	meta.pb.h	5;"	d
PROTOBUF_raft_2flog_5fmeta_2eproto__INCLUDED	consensus/raft/log_meta.pb.h	5;"	d
PROTOBUF_raft_2fraft_2eproto__INCLUDED	consensus/raft/raft.pb.h	5;"	d
PROTOBUF_raft_2fsimplelog_5fmeta_2eproto__INCLUDED	consensus/raft/simplelog_meta.pb.h	5;"	d
Pause	csapp.cc	/^void Pause() $/;"	f
PeerThread	consensus/raft/raft.cc	/^RaftConsensus::PeerThread::PeerThread(RaftConsensus* raft_con, NodeInfo* ni)$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
PeerThread	consensus/raft/raft.h	/^	class PeerThread : public Thread {$/;"	c	class:floyd::raft::RaftConsensus
Predicate	consensus/raft/raft.h	/^	typedef std::function<bool(PeerThread&)> Predicate;$/;"	t	class:floyd::raft::RaftConsensus
ProtocolToFile	consensus/raft/simplefile_log.cc	/^int SimpleFileLog::ProtocolToFile(google::protobuf::Message& in,$/;"	f	class:floyd::raft::SimpleFileLog
PthreadCall	floyd_mutex.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	file:
Pthread_cancel	csapp.cc	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	csapp.cc	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	csapp.cc	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	csapp.cc	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	csapp.cc	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	csapp.cc	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	csapp.cc	/^pthread_t Pthread_self(void) {$/;"	f
QuorumAll	consensus/raft/raft.cc	/^bool RaftConsensus::QuorumAll(const Predicate& predicate) {$/;"	f	class:floyd::raft::RaftConsensus
QuorumMin	consensus/raft/raft.cc	/^uint64_t RaftConsensus::QuorumMin(const GetValue& getvalue) {$/;"	f	class:floyd::raft::RaftConsensus
RaftAppendEntries	command.pb.cc	/^const CommandRes_Type CommandRes::RaftAppendEntries;$/;"	m	class:command::CommandRes	file:
RaftAppendEntries	command.pb.cc	/^const Command_Type Command::RaftAppendEntries;$/;"	m	class:command::Command	file:
RaftAppendEntries	command.pb.h	/^  static const Type RaftAppendEntries = CommandRes_Type_RaftAppendEntries;$/;"	m	class:command::CommandRes
RaftAppendEntries	command.pb.h	/^  static const Type RaftAppendEntries = Command_Type_RaftAppendEntries;$/;"	m	class:command::Command
RaftConsensus	consensus/raft/raft.cc	/^RaftConsensus::RaftConsensus(const floyd::Options& options)$/;"	f	class:floyd::raft::RaftConsensus
RaftConsensus	consensus/raft/raft.h	/^class RaftConsensus {$/;"	c	namespace:floyd::raft
RaftVote	command.pb.cc	/^const CommandRes_Type CommandRes::RaftVote;$/;"	m	class:command::CommandRes	file:
RaftVote	command.pb.cc	/^const Command_Type Command::RaftVote;$/;"	m	class:command::Command	file:
RaftVote	command.pb.h	/^  static const Type RaftVote = CommandRes_Type_RaftVote;$/;"	m	class:command::CommandRes
RaftVote	command.pb.h	/^  static const Type RaftVote = Command_Type_RaftVote;$/;"	m	class:command::Command
Read	command.pb.cc	/^const CommandRes_Type CommandRes::Read;$/;"	m	class:command::CommandRes	file:
Read	command.pb.cc	/^const Command_Type Command::Read;$/;"	m	class:command::Command	file:
Read	command.pb.h	/^  static const Type Read = CommandRes_Type_Read;$/;"	m	class:command::CommandRes
Read	command.pb.h	/^  static const Type Read = Command_Type_Read;$/;"	m	class:command::Command
Read	consensus/raft/simplefile_log.cc	/^Log::Entry SimpleFileLog::Read(std::string& path) {$/;"	f	class:floyd::raft::SimpleFileLog
Read	csapp.cc	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
ReadMetadata	consensus/raft/simplefile_log.cc	/^bool SimpleFileLog::ReadMetadata(std::string& path,$/;"	f	class:floyd::raft::SimpleFileLog
Realloc	csapp.cc	/^void *Realloc(void *ptr, size_t size) $/;"	f
Replicate	consensus/raft/raft.cc	/^RaftConsensus::Replicate(const command::Command& cmd) {$/;"	f	class:floyd::raft::RaftConsensus
RequestVote	consensus/raft/raft.cc	/^void RaftConsensus::PeerThread::RequestVote() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
RequestVote	consensus/raft/raft.pb.cc	/^RequestVote::RequestVote()$/;"	f	class:floyd::raft::RequestVote
RequestVote	consensus/raft/raft.pb.cc	/^RequestVote::RequestVote(const RequestVote& from)$/;"	f	class:floyd::raft::RequestVote
RequestVote	consensus/raft/raft.pb.h	/^class RequestVote : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft
RequestVote_descriptor_	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* RequestVote_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
RequestVote_reflection_	consensus/raft/raft.pb.cc	/^  RequestVote_reflection_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
ResponseVote	consensus/raft/raft.pb.cc	/^ResponseVote::ResponseVote()$/;"	f	class:floyd::raft::ResponseVote
ResponseVote	consensus/raft/raft.pb.cc	/^ResponseVote::ResponseVote(const ResponseVote& from)$/;"	f	class:floyd::raft::ResponseVote
ResponseVote	consensus/raft/raft.pb.h	/^class ResponseVote : public ::google::protobuf::Message {$/;"	c	namespace:floyd::raft
ResponseVote_descriptor_	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* ResponseVote_descriptor_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
ResponseVote_reflection_	consensus/raft/raft.pb.cc	/^  ResponseVote_reflection_ = NULL;$/;"	m	namespace:floyd::raft::__anon5	file:
Result	consensus/raft/raft.h	/^	enum class Result {$/;"	c	class:floyd::raft::RaftConsensus
Rio_readinitb	csapp.cc	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	csapp.cc	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	csapp.cc	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	csapp.cc	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	csapp.cc	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SUCCESS	consensus/raft/raft.h	/^		SUCCESS,$/;"	m	class:floyd::raft::RaftConsensus::Result
Select	csapp.cc	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	csapp.cc	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
SendRequest	floyd_conn.cc	/^Status FloydCliConn::SendRequest(google::protobuf::Message* msg) {$/;"	f	class:floyd::FloydCliConn
SerializeWithCachedSizes	command.pb.cc	/^void Command::SerializeWithCachedSizes($/;"	f	class:command::Command
SerializeWithCachedSizes	command.pb.cc	/^void CommandRes::SerializeWithCachedSizes($/;"	f	class:command::CommandRes
SerializeWithCachedSizes	command.pb.cc	/^void CommandRes_KvRet::SerializeWithCachedSizes($/;"	f	class:command::CommandRes_KvRet
SerializeWithCachedSizes	command.pb.cc	/^void Command_Kv::SerializeWithCachedSizes($/;"	f	class:command::Command_Kv
SerializeWithCachedSizes	consensus/raft/log_meta.pb.cc	/^void MetaData::SerializeWithCachedSizes($/;"	f	class:floyd::raft::log::MetaData
SerializeWithCachedSizes	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::SerializeWithCachedSizes($/;"	f	class:floyd::raft::AppendEntriesRequest
SerializeWithCachedSizes	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::SerializeWithCachedSizes($/;"	f	class:floyd::raft::AppendEntriesResponse
SerializeWithCachedSizes	consensus/raft/raft.pb.cc	/^void Entry::SerializeWithCachedSizes($/;"	f	class:floyd::raft::Entry
SerializeWithCachedSizes	consensus/raft/raft.pb.cc	/^void RequestVote::SerializeWithCachedSizes($/;"	f	class:floyd::raft::RequestVote
SerializeWithCachedSizes	consensus/raft/raft.pb.cc	/^void ResponseVote::SerializeWithCachedSizes($/;"	f	class:floyd::raft::ResponseVote
SerializeWithCachedSizes	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::SerializeWithCachedSizes($/;"	f	class:floyd::raft::simplefilelog::MetaData
SerializeWithCachedSizes	meta.pb.cc	/^void Meta::SerializeWithCachedSizes($/;"	f	class:meta::Meta
SerializeWithCachedSizes	meta.pb.cc	/^void MetaRes::SerializeWithCachedSizes($/;"	f	class:meta::MetaRes
SerializeWithCachedSizes	meta.pb.cc	/^void MetaRes_Node::SerializeWithCachedSizes($/;"	f	class:meta::MetaRes_Node
SerializeWithCachedSizes	meta.pb.cc	/^void Meta_Node::SerializeWithCachedSizes($/;"	f	class:meta::Meta_Node
SerializeWithCachedSizesToArray	command.pb.cc	/^::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray($/;"	f	class:command::Command
SerializeWithCachedSizesToArray	command.pb.cc	/^::google::protobuf::uint8* CommandRes::SerializeWithCachedSizesToArray($/;"	f	class:command::CommandRes
SerializeWithCachedSizesToArray	command.pb.cc	/^::google::protobuf::uint8* CommandRes_KvRet::SerializeWithCachedSizesToArray($/;"	f	class:command::CommandRes_KvRet
SerializeWithCachedSizesToArray	command.pb.cc	/^::google::protobuf::uint8* Command_Kv::SerializeWithCachedSizesToArray($/;"	f	class:command::Command_Kv
SerializeWithCachedSizesToArray	consensus/raft/log_meta.pb.cc	/^::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::log::MetaData
SerializeWithCachedSizesToArray	consensus/raft/raft.pb.cc	/^::google::protobuf::uint8* AppendEntriesRequest::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::AppendEntriesRequest
SerializeWithCachedSizesToArray	consensus/raft/raft.pb.cc	/^::google::protobuf::uint8* AppendEntriesResponse::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::AppendEntriesResponse
SerializeWithCachedSizesToArray	consensus/raft/raft.pb.cc	/^::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::Entry
SerializeWithCachedSizesToArray	consensus/raft/raft.pb.cc	/^::google::protobuf::uint8* RequestVote::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::RequestVote
SerializeWithCachedSizesToArray	consensus/raft/raft.pb.cc	/^::google::protobuf::uint8* ResponseVote::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::ResponseVote
SerializeWithCachedSizesToArray	consensus/raft/simplelog_meta.pb.cc	/^::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray($/;"	f	class:floyd::raft::simplefilelog::MetaData
SerializeWithCachedSizesToArray	meta.pb.cc	/^::google::protobuf::uint8* Meta::SerializeWithCachedSizesToArray($/;"	f	class:meta::Meta
SerializeWithCachedSizesToArray	meta.pb.cc	/^::google::protobuf::uint8* MetaRes::SerializeWithCachedSizesToArray($/;"	f	class:meta::MetaRes
SerializeWithCachedSizesToArray	meta.pb.cc	/^::google::protobuf::uint8* MetaRes_Node::SerializeWithCachedSizesToArray($/;"	f	class:meta::MetaRes_Node
SerializeWithCachedSizesToArray	meta.pb.cc	/^::google::protobuf::uint8* Meta_Node::SerializeWithCachedSizesToArray($/;"	f	class:meta::Meta_Node
Set	floyd_db.cc	/^Status LeveldbBackend::Set(std::string& key,std::string& value){$/;"	f	class:floyd::LeveldbBackend
SetCachedSize	command.pb.cc	/^void Command::SetCachedSize(int size) const {$/;"	f	class:command::Command
SetCachedSize	command.pb.cc	/^void CommandRes::SetCachedSize(int size) const {$/;"	f	class:command::CommandRes
SetCachedSize	command.pb.cc	/^void CommandRes_KvRet::SetCachedSize(int size) const {$/;"	f	class:command::CommandRes_KvRet
SetCachedSize	command.pb.cc	/^void Command_Kv::SetCachedSize(int size) const {$/;"	f	class:command::Command_Kv
SetCachedSize	consensus/raft/log_meta.pb.cc	/^void MetaData::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::log::MetaData
SetCachedSize	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::AppendEntriesRequest
SetCachedSize	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::AppendEntriesResponse
SetCachedSize	consensus/raft/raft.pb.cc	/^void Entry::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::Entry
SetCachedSize	consensus/raft/raft.pb.cc	/^void RequestVote::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::RequestVote
SetCachedSize	consensus/raft/raft.pb.cc	/^void ResponseVote::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::ResponseVote
SetCachedSize	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::SetCachedSize(int size) const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
SetCachedSize	meta.pb.cc	/^void Meta::SetCachedSize(int size) const {$/;"	f	class:meta::Meta
SetCachedSize	meta.pb.cc	/^void MetaRes::SetCachedSize(int size) const {$/;"	f	class:meta::MetaRes
SetCachedSize	meta.pb.cc	/^void MetaRes_Node::SetCachedSize(int size) const {$/;"	f	class:meta::MetaRes_Node
SetCachedSize	meta.pb.cc	/^void Meta_Node::SetCachedSize(int size) const {$/;"	f	class:meta::Meta_Node
SetElectionTimer	consensus/raft/raft.cc	/^void RaftConsensus::SetElectionTimer() {$/;"	f	class:floyd::raft::RaftConsensus
SetMessage	floyd_meta.cc	/^Status FloydMetaCliConn::SetMessage(google::protobuf::Message* meta) {$/;"	f	class:floyd::FloydMetaCliConn
SetMessage	floyd_worker.cc	/^Status FloydWorkerCliConn::SetMessage(google::protobuf::Message* cmd) {$/;"	f	class:floyd::FloydWorkerCliConn
Setpgid	csapp.cc	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	csapp.cc	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
SharedCtor	command.pb.cc	/^void Command::SharedCtor() {$/;"	f	class:command::Command
SharedCtor	command.pb.cc	/^void CommandRes::SharedCtor() {$/;"	f	class:command::CommandRes
SharedCtor	command.pb.cc	/^void CommandRes_KvRet::SharedCtor() {$/;"	f	class:command::CommandRes_KvRet
SharedCtor	command.pb.cc	/^void Command_Kv::SharedCtor() {$/;"	f	class:command::Command_Kv
SharedCtor	consensus/raft/log_meta.pb.cc	/^void MetaData::SharedCtor() {$/;"	f	class:floyd::raft::log::MetaData
SharedCtor	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::SharedCtor() {$/;"	f	class:floyd::raft::AppendEntriesRequest
SharedCtor	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::SharedCtor() {$/;"	f	class:floyd::raft::AppendEntriesResponse
SharedCtor	consensus/raft/raft.pb.cc	/^void Entry::SharedCtor() {$/;"	f	class:floyd::raft::Entry
SharedCtor	consensus/raft/raft.pb.cc	/^void RequestVote::SharedCtor() {$/;"	f	class:floyd::raft::RequestVote
SharedCtor	consensus/raft/raft.pb.cc	/^void ResponseVote::SharedCtor() {$/;"	f	class:floyd::raft::ResponseVote
SharedCtor	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::SharedCtor() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
SharedCtor	meta.pb.cc	/^void Meta::SharedCtor() {$/;"	f	class:meta::Meta
SharedCtor	meta.pb.cc	/^void MetaRes::SharedCtor() {$/;"	f	class:meta::MetaRes
SharedCtor	meta.pb.cc	/^void MetaRes_Node::SharedCtor() {$/;"	f	class:meta::MetaRes_Node
SharedCtor	meta.pb.cc	/^void Meta_Node::SharedCtor() {$/;"	f	class:meta::Meta_Node
SharedDtor	command.pb.cc	/^void Command::SharedDtor() {$/;"	f	class:command::Command
SharedDtor	command.pb.cc	/^void CommandRes::SharedDtor() {$/;"	f	class:command::CommandRes
SharedDtor	command.pb.cc	/^void CommandRes_KvRet::SharedDtor() {$/;"	f	class:command::CommandRes_KvRet
SharedDtor	command.pb.cc	/^void Command_Kv::SharedDtor() {$/;"	f	class:command::Command_Kv
SharedDtor	consensus/raft/log_meta.pb.cc	/^void MetaData::SharedDtor() {$/;"	f	class:floyd::raft::log::MetaData
SharedDtor	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::SharedDtor() {$/;"	f	class:floyd::raft::AppendEntriesRequest
SharedDtor	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::SharedDtor() {$/;"	f	class:floyd::raft::AppendEntriesResponse
SharedDtor	consensus/raft/raft.pb.cc	/^void Entry::SharedDtor() {$/;"	f	class:floyd::raft::Entry
SharedDtor	consensus/raft/raft.pb.cc	/^void RequestVote::SharedDtor() {$/;"	f	class:floyd::raft::RequestVote
SharedDtor	consensus/raft/raft.pb.cc	/^void ResponseVote::SharedDtor() {$/;"	f	class:floyd::raft::ResponseVote
SharedDtor	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::SharedDtor() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
SharedDtor	meta.pb.cc	/^void Meta::SharedDtor() {$/;"	f	class:meta::Meta
SharedDtor	meta.pb.cc	/^void MetaRes::SharedDtor() {$/;"	f	class:meta::MetaRes
SharedDtor	meta.pb.cc	/^void MetaRes_Node::SharedDtor() {$/;"	f	class:meta::MetaRes_Node
SharedDtor	meta.pb.cc	/^void Meta_Node::SharedDtor() {$/;"	f	class:meta::Meta_Node
SideEffect	consensus/raft/raft.h	/^	typedef std::function<void(PeerThread&)> SideEffect;$/;"	t	class:floyd::raft::RaftConsensus
Sigaddset	csapp.cc	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	csapp.cc	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	csapp.cc	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	csapp.cc	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	csapp.cc	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	csapp.cc	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Signal	floyd_mutex.cc	/^void CondVar::Signal() {$/;"	f	class:CondVar
SignalAll	floyd_mutex.cc	/^void CondVar::SignalAll() {$/;"	f	class:CondVar
Sigprocmask	csapp.cc	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
SimpleFileLog	consensus/raft/simplefile_log.cc	/^SimpleFileLog::SimpleFileLog(const std::string& parent_dir)$/;"	f	class:floyd::raft::SimpleFileLog
SimpleFileLog	consensus/raft/simplefile_log.h	/^class SimpleFileLog : public Log {$/;"	c	namespace:floyd::raft
Sleep	csapp.cc	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	csapp.cc	/^int Socket(int domain, int type, int protocol) $/;"	f
Start	floyd.cc	/^Status Floyd::Start() {$/;"	f	class:floyd::Floyd
StartNewElection	consensus/raft/raft.cc	/^void RaftConsensus::ElectLeaderThread::StartNewElection() {$/;"	f	class:floyd::raft::RaftConsensus::ElectLeaderThread
Stat	csapp.cc	/^void Stat(const char *filename, struct stat *buf) $/;"	f
State	consensus/raft/raft.h	/^	enum class State {$/;"	c	class:floyd::raft::RaftConsensus
StateMachine	consensus/raft/state_machine.cc	/^StateMachine::StateMachine(RaftConsensus* raft_con)$/;"	f	class:floyd::raft::StateMachine
StateMachine	consensus/raft/state_machine.h	/^class StateMachine {$/;"	c	namespace:floyd::raft
StaticDescriptorInitializer_command_2eproto	command.pb.cc	/^  StaticDescriptorInitializer_command_2eproto() {$/;"	f	struct:command::StaticDescriptorInitializer_command_2eproto
StaticDescriptorInitializer_command_2eproto	command.pb.cc	/^struct StaticDescriptorInitializer_command_2eproto {$/;"	s	namespace:command	file:
StaticDescriptorInitializer_meta_2eproto	meta.pb.cc	/^  StaticDescriptorInitializer_meta_2eproto() {$/;"	f	struct:meta::StaticDescriptorInitializer_meta_2eproto
StaticDescriptorInitializer_meta_2eproto	meta.pb.cc	/^struct StaticDescriptorInitializer_meta_2eproto {$/;"	s	namespace:meta	file:
StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto	consensus/raft/log_meta.pb.cc	/^  StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto() {$/;"	f	struct:floyd::raft::log::StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto
StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto	consensus/raft/log_meta.pb.cc	/^struct StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto {$/;"	s	namespace:floyd::raft::log	file:
StaticDescriptorInitializer_raft_2fraft_2eproto	consensus/raft/raft.pb.cc	/^  StaticDescriptorInitializer_raft_2fraft_2eproto() {$/;"	f	struct:floyd::raft::StaticDescriptorInitializer_raft_2fraft_2eproto
StaticDescriptorInitializer_raft_2fraft_2eproto	consensus/raft/raft.pb.cc	/^struct StaticDescriptorInitializer_raft_2fraft_2eproto {$/;"	s	namespace:floyd::raft	file:
StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto	consensus/raft/simplelog_meta.pb.cc	/^  StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto() {$/;"	f	struct:floyd::raft::simplefilelog::StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto
StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto	consensus/raft/simplelog_meta.pb.cc	/^struct StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto {$/;"	s	namespace:floyd::raft::simplefilelog	file:
Status	status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:floyd::Status
Status	status.cc	/^Status::Status(leveldb::Status& leveldb_status) {$/;"	f	class:floyd::Status
StepDown	consensus/raft/raft.cc	/^void RaftConsensus::StepDown(uint64_t new_term) {$/;"	f	class:floyd::raft::RaftConsensus
Swap	command.pb.cc	/^void Command::Swap(Command* other) {$/;"	f	class:command::Command
Swap	command.pb.cc	/^void CommandRes::Swap(CommandRes* other) {$/;"	f	class:command::CommandRes
Swap	command.pb.cc	/^void CommandRes_KvRet::Swap(CommandRes_KvRet* other) {$/;"	f	class:command::CommandRes_KvRet
Swap	command.pb.cc	/^void Command_Kv::Swap(Command_Kv* other) {$/;"	f	class:command::Command_Kv
Swap	consensus/raft/log_meta.pb.cc	/^void MetaData::Swap(MetaData* other) {$/;"	f	class:floyd::raft::log::MetaData
Swap	consensus/raft/raft.pb.cc	/^void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {$/;"	f	class:floyd::raft::AppendEntriesRequest
Swap	consensus/raft/raft.pb.cc	/^void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {$/;"	f	class:floyd::raft::AppendEntriesResponse
Swap	consensus/raft/raft.pb.cc	/^void Entry::Swap(Entry* other) {$/;"	f	class:floyd::raft::Entry
Swap	consensus/raft/raft.pb.cc	/^void RequestVote::Swap(RequestVote* other) {$/;"	f	class:floyd::raft::RequestVote
Swap	consensus/raft/raft.pb.cc	/^void ResponseVote::Swap(ResponseVote* other) {$/;"	f	class:floyd::raft::ResponseVote
Swap	consensus/raft/simplelog_meta.pb.cc	/^void MetaData::Swap(MetaData* other) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
Swap	meta.pb.cc	/^void Meta::Swap(Meta* other) {$/;"	f	class:meta::Meta
Swap	meta.pb.cc	/^void MetaRes::Swap(MetaRes* other) {$/;"	f	class:meta::MetaRes
Swap	meta.pb.cc	/^void MetaRes_Node::Swap(MetaRes_Node* other) {$/;"	f	class:meta::MetaRes_Node
Swap	meta.pb.cc	/^void Meta_Node::Swap(Meta_Node* other) {$/;"	f	class:meta::Meta_Node
Sync	consensus/raft/log.cc	/^Log::Sync::Sync(uint64_t lastindex)$/;"	f	class:floyd::raft::Log::Sync
Sync	consensus/raft/log.h	/^	class Sync {$/;"	c	class:floyd::raft::Log
Sync	consensus/raft/simplefile_log.cc	/^SimpleFileLog::Sync::Sync(uint64_t lastindex)$/;"	f	class:floyd::raft::SimpleFileLog::Sync
Sync	consensus/raft/simplefile_log.h	/^	class Sync : public Log::Sync {$/;"	c	class:floyd::raft::SimpleFileLog
SyncComplete	consensus/raft/log.h	/^	void SyncComplete(std::unique_ptr<Sync> sync) {$/;"	f	class:floyd::raft::Log
TakeSync	consensus/raft/memory_log.cc	/^std::unique_ptr<Log::Sync> MemoryLog::TakeSync() {$/;"	f	class:floyd::raft::MemoryLog
TakeSync	consensus/raft/simplefile_log.cc	/^SimpleFileLog::TakeSync() {$/;"	f	class:floyd::raft::SimpleFileLog
ThreadMain	consensus/raft/raft.cc	/^void* RaftConsensus::ElectLeaderThread::ThreadMain() {$/;"	f	class:floyd::raft::RaftConsensus::ElectLeaderThread
ThreadMain	consensus/raft/raft.cc	/^void* RaftConsensus::LeaderDiskThread::ThreadMain() {$/;"	f	class:floyd::raft::RaftConsensus::LeaderDiskThread
ThreadMain	consensus/raft/raft.cc	/^void* RaftConsensus::PeerThread::ThreadMain() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
ThreadMain	consensus/raft/state_machine.cc	/^void* StateMachine::ApplyThread::ThreadMain() {$/;"	f	class:floyd::raft::StateMachine::ApplyThread
ThreadMain	floyd_hb.cc	/^void* FloydHeartBeatThread::ThreadMain() {$/;"	f	class:floyd::FloydHeartBeatThread
ToString	status.cc	/^std::string Status::ToString() const {$/;"	f	class:floyd::Status
TruncatePrefix	consensus/raft/memory_log.cc	/^void MemoryLog::TruncatePrefix(uint64_t first_index) {$/;"	f	class:floyd::raft::MemoryLog
TruncatePrefix	consensus/raft/simplefile_log.cc	/^void SimpleFileLog::TruncatePrefix(uint64_t first_index) {$/;"	f	class:floyd::raft::SimpleFileLog
TruncateSuffix	consensus/raft/memory_log.cc	/^void MemoryLog::TruncateSuffix(uint64_t last_index) {$/;"	f	class:floyd::raft::MemoryLog
TruncateSuffix	consensus/raft/simplefile_log.cc	/^void SimpleFileLog::TruncateSuffix(uint64_t last_index) {$/;"	f	class:floyd::raft::SimpleFileLog
Type	command.pb.h	/^  typedef CommandRes_Type Type;$/;"	t	class:command::CommandRes
Type	command.pb.h	/^  typedef Command_Type Type;$/;"	t	class:command::Command
Type	meta.pb.h	/^  typedef Meta_Type Type;$/;"	t	class:meta::Meta
Type_ARRAYSIZE	command.pb.cc	/^const int Command::Type_ARRAYSIZE;$/;"	m	class:command::Command	file:
Type_ARRAYSIZE	command.pb.cc	/^const int CommandRes::Type_ARRAYSIZE;$/;"	m	class:command::CommandRes	file:
Type_ARRAYSIZE	command.pb.h	/^  static const int Type_ARRAYSIZE =$/;"	m	class:command::Command
Type_ARRAYSIZE	command.pb.h	/^  static const int Type_ARRAYSIZE =$/;"	m	class:command::CommandRes
Type_ARRAYSIZE	meta.pb.cc	/^const int Meta::Type_ARRAYSIZE;$/;"	m	class:meta::Meta	file:
Type_ARRAYSIZE	meta.pb.h	/^  static const int Type_ARRAYSIZE =$/;"	m	class:meta::Meta
Type_IsValid	command.pb.h	/^  static inline bool Type_IsValid(int value) {$/;"	f	class:command::Command
Type_IsValid	command.pb.h	/^  static inline bool Type_IsValid(int value) {$/;"	f	class:command::CommandRes
Type_IsValid	meta.pb.h	/^  static inline bool Type_IsValid(int value) {$/;"	f	class:meta::Meta
Type_MAX	command.pb.cc	/^const CommandRes_Type CommandRes::Type_MAX;$/;"	m	class:command::CommandRes	file:
Type_MAX	command.pb.cc	/^const Command_Type Command::Type_MAX;$/;"	m	class:command::Command	file:
Type_MAX	command.pb.h	/^  static const Type Type_MAX =$/;"	m	class:command::Command
Type_MAX	command.pb.h	/^  static const Type Type_MAX =$/;"	m	class:command::CommandRes
Type_MAX	meta.pb.cc	/^const Meta_Type Meta::Type_MAX;$/;"	m	class:meta::Meta	file:
Type_MAX	meta.pb.h	/^  static const Type Type_MAX =$/;"	m	class:meta::Meta
Type_MIN	command.pb.cc	/^const CommandRes_Type CommandRes::Type_MIN;$/;"	m	class:command::CommandRes	file:
Type_MIN	command.pb.cc	/^const Command_Type Command::Type_MIN;$/;"	m	class:command::Command	file:
Type_MIN	command.pb.h	/^  static const Type Type_MIN =$/;"	m	class:command::Command
Type_MIN	command.pb.h	/^  static const Type Type_MIN =$/;"	m	class:command::CommandRes
Type_MIN	meta.pb.cc	/^const Meta_Type Meta::Type_MIN;$/;"	m	class:meta::Meta	file:
Type_MIN	meta.pb.h	/^  static const Type Type_MIN =$/;"	m	class:meta::Meta
Type_Name	command.pb.h	/^  static inline const ::std::string& Type_Name(Type value) {$/;"	f	class:command::Command
Type_Name	command.pb.h	/^  static inline const ::std::string& Type_Name(Type value) {$/;"	f	class:command::CommandRes
Type_Name	meta.pb.h	/^  static inline const ::std::string& Type_Name(Type value) {$/;"	f	class:meta::Meta
Type_Parse	command.pb.h	/^  static inline bool Type_Parse(const ::std::string& name,$/;"	f	class:command::Command
Type_Parse	command.pb.h	/^  static inline bool Type_Parse(const ::std::string& name,$/;"	f	class:command::CommandRes
Type_Parse	meta.pb.h	/^  static inline bool Type_Parse(const ::std::string& name,$/;"	f	class:meta::Meta
Type_descriptor	command.pb.h	/^  Type_descriptor() {$/;"	f	class:command::Command
Type_descriptor	command.pb.h	/^  Type_descriptor() {$/;"	f	class:command::CommandRes
Type_descriptor	meta.pb.h	/^  Type_descriptor() {$/;"	f	class:meta::Meta
Unlock	floyd_mutex.cc	/^void Mutex::Unlock() { $/;"	f	class:Mutex
UpHoldWorkerCliConn	floyd.cc	/^Status Floyd::UpHoldWorkerCliConn(NodeInfo *ni){$/;"	f	class:floyd::Floyd
UpdateLogMetadata	consensus/raft/raft.cc	/^void RaftConsensus::UpdateLogMetadata() {$/;"	f	class:floyd::raft::RaftConsensus
UpdateMetadata	consensus/raft/memory_log.cc	/^void MemoryLog::UpdateMetadata() {$/;"	f	class:floyd::raft::MemoryLog
UpdateMetadata	consensus/raft/simplefile_log.cc	/^void SimpleFileLog::UpdateMetadata() {$/;"	f	class:floyd::raft::SimpleFileLog
V	csapp.cc	/^void V(sem_t *sem) $/;"	f
Wait	consensus/raft/log.h	/^		virtual void Wait() {}$/;"	f	class:floyd::raft::Log::Sync
Wait	consensus/raft/simplefile_log.cc	/^void SimpleFileLog::Sync::Wait() {$/;"	f	class:floyd::raft::SimpleFileLog::Sync
Wait	csapp.cc	/^pid_t Wait(int *status) $/;"	f
Wait	floyd_mutex.cc	/^void CondVar::Wait() {$/;"	f	class:CondVar
WaitForResponse	consensus/raft/state_machine.cc	/^bool StateMachine::WaitForResponse(uint64_t log_index) {$/;"	f	class:floyd::raft::StateMachine
WaitUntil	floyd_mutex.cc	/^void CondVar::WaitUntil(struct timespec ts) {$/;"	f	class:CondVar
Waitpid	csapp.cc	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	command.pb.cc	/^const CommandRes_Type CommandRes::Write;$/;"	m	class:command::CommandRes	file:
Write	command.pb.cc	/^const Command_Type Command::Write;$/;"	m	class:command::Command	file:
Write	command.pb.h	/^  static const Type Write = CommandRes_Type_Write;$/;"	m	class:command::CommandRes
Write	command.pb.h	/^  static const Type Write = Command_Type_Write;$/;"	m	class:command::Command
Write	csapp.cc	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
Write	floyd.cc	/^Status Floyd::Write(std::string& key, std::string& value) {$/;"	f	class:floyd::Floyd
__FLOYD_CONSENSUS_MEMORY_LOG_H__	consensus/raft/memory_log.h	2;"	d
__FLOYD_CONSENSUS_RAFT_H__	consensus/raft/raft.h	2;"	d
__FLOYD_CONSENSUS_RAFT_LOG_H__	consensus/raft/log.h	2;"	d
__FLOYD_CONSENSUS_SIMPLEFILE_LOG_H__	consensus/raft/simplefile_log.h	2;"	d
__FLOYD_CONSENSUS_STATE_MACHINE_H__	consensus/raft/state_machine.h	2;"	d
_cached_size_	command.pb.h	/^  mutable int _cached_size_;$/;"	m	class:command::Command
_cached_size_	command.pb.h	/^  mutable int _cached_size_;$/;"	m	class:command::CommandRes
_cached_size_	command.pb.h	/^  mutable int _cached_size_;$/;"	m	class:command::CommandRes_KvRet
_cached_size_	command.pb.h	/^  mutable int _cached_size_;$/;"	m	class:command::Command_Kv
_cached_size_	consensus/raft/log_meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::log::MetaData
_cached_size_	consensus/raft/raft.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::AppendEntriesRequest
_cached_size_	consensus/raft/raft.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::AppendEntriesResponse
_cached_size_	consensus/raft/raft.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::Entry
_cached_size_	consensus/raft/raft.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::RequestVote
_cached_size_	consensus/raft/raft.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::ResponseVote
_cached_size_	consensus/raft/simplelog_meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
_cached_size_	meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:meta::Meta
_cached_size_	meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:meta::MetaRes
_cached_size_	meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:meta::MetaRes_Node
_cached_size_	meta.pb.h	/^  mutable int _cached_size_;$/;"	m	class:meta::Meta_Node
_has_bits_	command.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:command::CommandRes_KvRet
_has_bits_	command.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:command::Command_Kv
_has_bits_	command.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(4 + 31) \/ 32];$/;"	m	class:command::Command
_has_bits_	command.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(4 + 31) \/ 32];$/;"	m	class:command::CommandRes
_has_bits_	consensus/raft/log_meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(3 + 31) \/ 32];$/;"	m	class:floyd::raft::log::MetaData
_has_bits_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:floyd::raft::AppendEntriesResponse
_has_bits_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:floyd::raft::Entry
_has_bits_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:floyd::raft::ResponseVote
_has_bits_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(5 + 31) \/ 32];$/;"	m	class:floyd::raft::RequestVote
_has_bits_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(7 + 31) \/ 32];$/;"	m	class:floyd::raft::AppendEntriesRequest
_has_bits_	consensus/raft/simplelog_meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(3 + 31) \/ 32];$/;"	m	class:floyd::raft::simplefilelog::MetaData
_has_bits_	meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(1 + 31) \/ 32];$/;"	m	class:meta::MetaRes
_has_bits_	meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:meta::Meta
_has_bits_	meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:meta::MetaRes_Node
_has_bits_	meta.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:meta::Meta_Node
_unknown_fields_	command.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:command::Command
_unknown_fields_	command.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:command::CommandRes
_unknown_fields_	command.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:command::CommandRes_KvRet
_unknown_fields_	command.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:command::Command_Kv
_unknown_fields_	consensus/raft/log_meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::log::MetaData
_unknown_fields_	consensus/raft/raft.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::AppendEntriesRequest
_unknown_fields_	consensus/raft/raft.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::AppendEntriesResponse
_unknown_fields_	consensus/raft/raft.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::Entry
_unknown_fields_	consensus/raft/raft.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::RequestVote
_unknown_fields_	consensus/raft/raft.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::ResponseVote
_unknown_fields_	consensus/raft/simplelog_meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
_unknown_fields_	meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:meta::Meta
_unknown_fields_	meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:meta::MetaRes
_unknown_fields_	meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:meta::MetaRes_Node
_unknown_fields_	meta.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:meta::Meta_Node
add_entries	consensus/raft/raft.pb.h	/^inline ::floyd::raft::Entry* AppendEntriesRequest::add_entries() {$/;"	f	class:floyd::raft::AppendEntriesRequest
add_nodes	meta.pb.h	/^inline ::meta::MetaRes_Node* MetaRes::add_nodes() {$/;"	f	class:meta::MetaRes
add_nodes	meta.pb.h	/^inline ::meta::Meta_Node* Meta::add_nodes() {$/;"	f	class:meta::Meta
aerq	command.pb.h	/^inline const ::floyd::raft::AppendEntriesRequest& Command::aerq() const {$/;"	f	class:command::Command
aerq_	command.pb.h	/^  ::floyd::raft::AppendEntriesRequest* aerq_;$/;"	m	class:command::Command
aers	command.pb.h	/^inline const ::floyd::raft::AppendEntriesResponse& CommandRes::aers() const {$/;"	f	class:command::CommandRes
aers_	command.pb.h	/^  ::floyd::raft::AppendEntriesResponse* aers_;$/;"	m	class:command::CommandRes
app_error	csapp.cc	/^void app_error(const char *msg) \/* application error *\/$/;"	f
apply_	consensus/raft/state_machine.h	/^	ApplyThread* apply_;$/;"	m	class:floyd::raft::StateMachine
apply_state_	consensus/raft/state_machine.h	/^	mutable CondVar apply_state_;$/;"	m	class:floyd::raft::StateMachine
clear_aerq	command.pb.h	/^inline void Command::clear_aerq() {$/;"	f	class:command::Command
clear_aers	command.pb.h	/^inline void CommandRes::clear_aers() {$/;"	f	class:command::CommandRes
clear_cmd	consensus/raft/raft.pb.h	/^inline void Entry::clear_cmd() {$/;"	f	class:floyd::raft::Entry
clear_commit_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_commit_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_current_term	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_current_term() {$/;"	f	class:floyd::raft::log::MetaData
clear_entries	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_entries() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_entries_end	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_entries_end() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_entries_start	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_entries_start() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_granted	consensus/raft/raft.pb.h	/^inline void ResponseVote::clear_granted() {$/;"	f	class:floyd::raft::ResponseVote
clear_has_aerq	command.pb.h	/^inline void Command::clear_has_aerq() {$/;"	f	class:command::Command
clear_has_aers	command.pb.h	/^inline void CommandRes::clear_has_aers() {$/;"	f	class:command::CommandRes
clear_has_cmd	consensus/raft/raft.pb.h	/^inline void Entry::clear_has_cmd() {$/;"	f	class:floyd::raft::Entry
clear_has_commit_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_commit_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_current_term	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_has_current_term() {$/;"	f	class:floyd::raft::log::MetaData
clear_has_entries_end	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_has_entries_end() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_has_entries_start	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_has_entries_start() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_has_granted	consensus/raft/raft.pb.h	/^inline void ResponseVote::clear_has_granted() {$/;"	f	class:floyd::raft::ResponseVote
clear_has_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_ip() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_has_ip() {$/;"	f	class:floyd::raft::RequestVote
clear_has_ip	meta.pb.h	/^inline void MetaRes_Node::clear_has_ip() {$/;"	f	class:meta::MetaRes_Node
clear_has_ip	meta.pb.h	/^inline void Meta_Node::clear_has_ip() {$/;"	f	class:meta::Meta_Node
clear_has_key	command.pb.h	/^inline void Command_Kv::clear_has_key() {$/;"	f	class:command::Command_Kv
clear_has_kv	command.pb.h	/^inline void Command::clear_has_kv() {$/;"	f	class:command::Command
clear_has_kvr	command.pb.h	/^inline void CommandRes::clear_has_kvr() {$/;"	f	class:command::CommandRes
clear_has_last_log_index	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_has_last_log_index() {$/;"	f	class:floyd::raft::RequestVote
clear_has_last_log_term	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_has_last_log_term() {$/;"	f	class:floyd::raft::RequestVote
clear_has_port	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_port() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_port	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_has_port() {$/;"	f	class:floyd::raft::RequestVote
clear_has_port	meta.pb.h	/^inline void MetaRes_Node::clear_has_port() {$/;"	f	class:meta::MetaRes_Node
clear_has_port	meta.pb.h	/^inline void Meta_Node::clear_has_port() {$/;"	f	class:meta::Meta_Node
clear_has_prev_log_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_prev_log_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_prev_log_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_prev_log_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_has_raft_metadata() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_has_rqv	command.pb.h	/^inline void Command::clear_has_rqv() {$/;"	f	class:command::Command
clear_has_rsv	command.pb.h	/^inline void CommandRes::clear_has_rsv() {$/;"	f	class:command::CommandRes
clear_has_status	command.pb.h	/^inline void CommandRes_KvRet::clear_has_status() {$/;"	f	class:command::CommandRes_KvRet
clear_has_status	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::clear_has_status() {$/;"	f	class:floyd::raft::AppendEntriesResponse
clear_has_t	meta.pb.h	/^inline void Meta::clear_has_t() {$/;"	f	class:meta::Meta
clear_has_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_has_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_has_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::clear_has_term() {$/;"	f	class:floyd::raft::AppendEntriesResponse
clear_has_term	consensus/raft/raft.pb.h	/^inline void Entry::clear_has_term() {$/;"	f	class:floyd::raft::Entry
clear_has_term	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_has_term() {$/;"	f	class:floyd::raft::RequestVote
clear_has_term	consensus/raft/raft.pb.h	/^inline void ResponseVote::clear_has_term() {$/;"	f	class:floyd::raft::ResponseVote
clear_has_type	command.pb.h	/^inline void Command::clear_has_type() {$/;"	f	class:command::Command
clear_has_type	command.pb.h	/^inline void CommandRes::clear_has_type() {$/;"	f	class:command::CommandRes
clear_has_value	command.pb.h	/^inline void CommandRes_KvRet::clear_has_value() {$/;"	f	class:command::CommandRes_KvRet
clear_has_value	command.pb.h	/^inline void Command_Kv::clear_has_value() {$/;"	f	class:command::Command_Kv
clear_has_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_has_voted_for_ip() {$/;"	f	class:floyd::raft::log::MetaData
clear_has_voted_for_port	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_has_voted_for_port() {$/;"	f	class:floyd::raft::log::MetaData
clear_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_ip() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_ip() {$/;"	f	class:floyd::raft::RequestVote
clear_ip	meta.pb.h	/^inline void MetaRes_Node::clear_ip() {$/;"	f	class:meta::MetaRes_Node
clear_ip	meta.pb.h	/^inline void Meta_Node::clear_ip() {$/;"	f	class:meta::Meta_Node
clear_key	command.pb.h	/^inline void Command_Kv::clear_key() {$/;"	f	class:command::Command_Kv
clear_kv	command.pb.h	/^inline void Command::clear_kv() {$/;"	f	class:command::Command
clear_kvr	command.pb.h	/^inline void CommandRes::clear_kvr() {$/;"	f	class:command::CommandRes
clear_last_log_index	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_last_log_index() {$/;"	f	class:floyd::raft::RequestVote
clear_last_log_term	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_last_log_term() {$/;"	f	class:floyd::raft::RequestVote
clear_nodes	meta.pb.h	/^inline void Meta::clear_nodes() {$/;"	f	class:meta::Meta
clear_nodes	meta.pb.h	/^inline void MetaRes::clear_nodes() {$/;"	f	class:meta::MetaRes
clear_port	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_port() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_port	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_port() {$/;"	f	class:floyd::raft::RequestVote
clear_port	meta.pb.h	/^inline void MetaRes_Node::clear_port() {$/;"	f	class:meta::MetaRes_Node
clear_port	meta.pb.h	/^inline void Meta_Node::clear_port() {$/;"	f	class:meta::Meta_Node
clear_prev_log_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_prev_log_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_prev_log_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_prev_log_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::clear_raft_metadata() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
clear_rqv	command.pb.h	/^inline void Command::clear_rqv() {$/;"	f	class:command::Command
clear_rsv	command.pb.h	/^inline void CommandRes::clear_rsv() {$/;"	f	class:command::CommandRes
clear_status	command.pb.h	/^inline void CommandRes_KvRet::clear_status() {$/;"	f	class:command::CommandRes_KvRet
clear_status	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::clear_status() {$/;"	f	class:floyd::raft::AppendEntriesResponse
clear_t	meta.pb.h	/^inline void Meta::clear_t() {$/;"	f	class:meta::Meta
clear_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::clear_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
clear_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::clear_term() {$/;"	f	class:floyd::raft::AppendEntriesResponse
clear_term	consensus/raft/raft.pb.h	/^inline void Entry::clear_term() {$/;"	f	class:floyd::raft::Entry
clear_term	consensus/raft/raft.pb.h	/^inline void RequestVote::clear_term() {$/;"	f	class:floyd::raft::RequestVote
clear_term	consensus/raft/raft.pb.h	/^inline void ResponseVote::clear_term() {$/;"	f	class:floyd::raft::ResponseVote
clear_type	command.pb.h	/^inline void Command::clear_type() {$/;"	f	class:command::Command
clear_type	command.pb.h	/^inline void CommandRes::clear_type() {$/;"	f	class:command::CommandRes
clear_value	command.pb.h	/^inline void CommandRes_KvRet::clear_value() {$/;"	f	class:command::CommandRes_KvRet
clear_value	command.pb.h	/^inline void Command_Kv::clear_value() {$/;"	f	class:command::Command_Kv
clear_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_voted_for_ip() {$/;"	f	class:floyd::raft::log::MetaData
clear_voted_for_port	consensus/raft/log_meta.pb.h	/^inline void MetaData::clear_voted_for_port() {$/;"	f	class:floyd::raft::log::MetaData
cmd	consensus/raft/raft.pb.h	/^inline const ::std::string& Entry::cmd() const {$/;"	f	class:floyd::raft::Entry
cmd_	consensus/raft/raft.pb.h	/^  ::std::string* cmd_;$/;"	m	class:floyd::raft::Entry
command	command.pb.cc	/^namespace command {$/;"	n	file:
command	command.pb.h	/^namespace command {$/;"	n
commit_index	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 AppendEntriesRequest::commit_index() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
commit_index_	consensus/raft/raft.h	/^	uint64_t commit_index_;$/;"	m	class:floyd::raft::RaftConsensus
commit_index_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 commit_index_;$/;"	m	class:floyd::raft::AppendEntriesRequest
completed	consensus/raft/log.h	/^		bool completed;$/;"	m	class:floyd::raft::Log::Sync
current_sync_	consensus/raft/memory_log.h	/^	std::unique_ptr<Sync> current_sync_;$/;"	m	class:floyd::raft::MemoryLog
current_sync_	consensus/raft/simplefile_log.h	/^	std::unique_ptr<Sync> current_sync_;$/;"	m	class:floyd::raft::SimpleFileLog
current_term	consensus/raft/log_meta.pb.h	/^inline ::google::protobuf::uint64 MetaData::current_term() const {$/;"	f	class:floyd::raft::log::MetaData
current_term_	consensus/raft/log_meta.pb.h	/^  ::google::protobuf::uint64 current_term_;$/;"	m	class:floyd::raft::log::MetaData
current_term_	consensus/raft/raft.h	/^	uint64_t current_term_;$/;"	m	class:floyd::raft::RaftConsensus
db	floyd.cc	/^DbBackend * Floyd::db;$/;"	m	class:floyd::Floyd	file:
default_instance	command.pb.cc	/^const Command& Command::default_instance() {$/;"	f	class:command::Command
default_instance	command.pb.cc	/^const CommandRes& CommandRes::default_instance() {$/;"	f	class:command::CommandRes
default_instance	command.pb.cc	/^const CommandRes_KvRet& CommandRes_KvRet::default_instance() {$/;"	f	class:command::CommandRes_KvRet
default_instance	command.pb.cc	/^const Command_Kv& Command_Kv::default_instance() {$/;"	f	class:command::Command_Kv
default_instance	consensus/raft/log_meta.pb.cc	/^const MetaData& MetaData::default_instance() {$/;"	f	class:floyd::raft::log::MetaData
default_instance	consensus/raft/raft.pb.cc	/^const AppendEntriesRequest& AppendEntriesRequest::default_instance() {$/;"	f	class:floyd::raft::AppendEntriesRequest
default_instance	consensus/raft/raft.pb.cc	/^const AppendEntriesResponse& AppendEntriesResponse::default_instance() {$/;"	f	class:floyd::raft::AppendEntriesResponse
default_instance	consensus/raft/raft.pb.cc	/^const Entry& Entry::default_instance() {$/;"	f	class:floyd::raft::Entry
default_instance	consensus/raft/raft.pb.cc	/^const RequestVote& RequestVote::default_instance() {$/;"	f	class:floyd::raft::RequestVote
default_instance	consensus/raft/raft.pb.cc	/^const ResponseVote& ResponseVote::default_instance() {$/;"	f	class:floyd::raft::ResponseVote
default_instance	consensus/raft/simplelog_meta.pb.cc	/^const MetaData& MetaData::default_instance() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
default_instance	meta.pb.cc	/^const Meta& Meta::default_instance() {$/;"	f	class:meta::Meta
default_instance	meta.pb.cc	/^const MetaRes& MetaRes::default_instance() {$/;"	f	class:meta::MetaRes
default_instance	meta.pb.cc	/^const MetaRes_Node& MetaRes_Node::default_instance() {$/;"	f	class:meta::MetaRes_Node
default_instance	meta.pb.cc	/^const Meta_Node& Meta_Node::default_instance() {$/;"	f	class:meta::Meta_Node
default_instance_	command.pb.cc	/^Command* Command::default_instance_ = NULL;$/;"	m	class:command::Command	file:
default_instance_	command.pb.cc	/^CommandRes* CommandRes::default_instance_ = NULL;$/;"	m	class:command::CommandRes	file:
default_instance_	command.pb.cc	/^CommandRes_KvRet* CommandRes_KvRet::default_instance_ = NULL;$/;"	m	class:command::CommandRes_KvRet	file:
default_instance_	command.pb.cc	/^Command_Kv* Command_Kv::default_instance_ = NULL;$/;"	m	class:command::Command_Kv	file:
default_instance_	command.pb.h	/^  static Command* default_instance_;$/;"	m	class:command::Command
default_instance_	command.pb.h	/^  static CommandRes* default_instance_;$/;"	m	class:command::CommandRes
default_instance_	command.pb.h	/^  static CommandRes_KvRet* default_instance_;$/;"	m	class:command::CommandRes_KvRet
default_instance_	command.pb.h	/^  static Command_Kv* default_instance_;$/;"	m	class:command::Command_Kv
default_instance_	consensus/raft/log_meta.pb.cc	/^MetaData* MetaData::default_instance_ = NULL;$/;"	m	class:floyd::raft::log::MetaData	file:
default_instance_	consensus/raft/log_meta.pb.h	/^  static MetaData* default_instance_;$/;"	m	class:floyd::raft::log::MetaData
default_instance_	consensus/raft/raft.pb.cc	/^AppendEntriesRequest* AppendEntriesRequest::default_instance_ = NULL;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
default_instance_	consensus/raft/raft.pb.cc	/^AppendEntriesResponse* AppendEntriesResponse::default_instance_ = NULL;$/;"	m	class:floyd::raft::AppendEntriesResponse	file:
default_instance_	consensus/raft/raft.pb.cc	/^Entry* Entry::default_instance_ = NULL;$/;"	m	class:floyd::raft::Entry	file:
default_instance_	consensus/raft/raft.pb.cc	/^RequestVote* RequestVote::default_instance_ = NULL;$/;"	m	class:floyd::raft::RequestVote	file:
default_instance_	consensus/raft/raft.pb.cc	/^ResponseVote* ResponseVote::default_instance_ = NULL;$/;"	m	class:floyd::raft::ResponseVote	file:
default_instance_	consensus/raft/raft.pb.h	/^  static AppendEntriesRequest* default_instance_;$/;"	m	class:floyd::raft::AppendEntriesRequest
default_instance_	consensus/raft/raft.pb.h	/^  static AppendEntriesResponse* default_instance_;$/;"	m	class:floyd::raft::AppendEntriesResponse
default_instance_	consensus/raft/raft.pb.h	/^  static Entry* default_instance_;$/;"	m	class:floyd::raft::Entry
default_instance_	consensus/raft/raft.pb.h	/^  static RequestVote* default_instance_;$/;"	m	class:floyd::raft::RequestVote
default_instance_	consensus/raft/raft.pb.h	/^  static ResponseVote* default_instance_;$/;"	m	class:floyd::raft::ResponseVote
default_instance_	consensus/raft/simplelog_meta.pb.cc	/^MetaData* MetaData::default_instance_ = NULL;$/;"	m	class:floyd::raft::simplefilelog::MetaData	file:
default_instance_	consensus/raft/simplelog_meta.pb.h	/^  static MetaData* default_instance_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
default_instance_	meta.pb.cc	/^Meta* Meta::default_instance_ = NULL;$/;"	m	class:meta::Meta	file:
default_instance_	meta.pb.cc	/^MetaRes* MetaRes::default_instance_ = NULL;$/;"	m	class:meta::MetaRes	file:
default_instance_	meta.pb.cc	/^MetaRes_Node* MetaRes_Node::default_instance_ = NULL;$/;"	m	class:meta::MetaRes_Node	file:
default_instance_	meta.pb.cc	/^Meta_Node* Meta_Node::default_instance_ = NULL;$/;"	m	class:meta::Meta_Node	file:
default_instance_	meta.pb.h	/^  static Meta* default_instance_;$/;"	m	class:meta::Meta
default_instance_	meta.pb.h	/^  static MetaRes* default_instance_;$/;"	m	class:meta::MetaRes
default_instance_	meta.pb.h	/^  static MetaRes_Node* default_instance_;$/;"	m	class:meta::MetaRes_Node
default_instance_	meta.pb.h	/^  static Meta_Node* default_instance_;$/;"	m	class:meta::Meta_Node
descriptor	command.pb.cc	/^const ::google::protobuf::Descriptor* Command::descriptor() {$/;"	f	class:command::Command
descriptor	command.pb.cc	/^const ::google::protobuf::Descriptor* CommandRes::descriptor() {$/;"	f	class:command::CommandRes
descriptor	command.pb.cc	/^const ::google::protobuf::Descriptor* CommandRes_KvRet::descriptor() {$/;"	f	class:command::CommandRes_KvRet
descriptor	command.pb.cc	/^const ::google::protobuf::Descriptor* Command_Kv::descriptor() {$/;"	f	class:command::Command_Kv
descriptor	consensus/raft/log_meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaData::descriptor() {$/;"	f	class:floyd::raft::log::MetaData
descriptor	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {$/;"	f	class:floyd::raft::AppendEntriesRequest
descriptor	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {$/;"	f	class:floyd::raft::AppendEntriesResponse
descriptor	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* Entry::descriptor() {$/;"	f	class:floyd::raft::Entry
descriptor	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* RequestVote::descriptor() {$/;"	f	class:floyd::raft::RequestVote
descriptor	consensus/raft/raft.pb.cc	/^const ::google::protobuf::Descriptor* ResponseVote::descriptor() {$/;"	f	class:floyd::raft::ResponseVote
descriptor	consensus/raft/simplelog_meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaData::descriptor() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
descriptor	meta.pb.cc	/^const ::google::protobuf::Descriptor* Meta::descriptor() {$/;"	f	class:meta::Meta
descriptor	meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaRes::descriptor() {$/;"	f	class:meta::MetaRes
descriptor	meta.pb.cc	/^const ::google::protobuf::Descriptor* MetaRes_Node::descriptor() {$/;"	f	class:meta::MetaRes_Node
descriptor	meta.pb.cc	/^const ::google::protobuf::Descriptor* Meta_Node::descriptor() {$/;"	f	class:meta::Meta_Node
dns_error	csapp.cc	/^void dns_error(const char *msg) \/* dns-style error *\/$/;"	f
elect_leader_	consensus/raft/raft.h	/^	ElectLeaderThread* elect_leader_;$/;"	m	class:floyd::raft::RaftConsensus
entries	consensus/raft/raft.pb.h	/^AppendEntriesRequest::entries() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
entries	consensus/raft/raft.pb.h	/^inline const ::floyd::raft::Entry& AppendEntriesRequest::entries(int index) const {$/;"	f	class:floyd::raft::AppendEntriesRequest
entries_	consensus/raft/memory_log.h	/^	std::deque<Entry> entries_;$/;"	m	class:floyd::raft::MemoryLog
entries_	consensus/raft/raft.pb.h	/^  ::google::protobuf::RepeatedPtrField< ::floyd::raft::Entry > entries_;$/;"	m	class:floyd::raft::AppendEntriesRequest
entries_end	consensus/raft/simplelog_meta.pb.h	/^inline ::google::protobuf::uint64 MetaData::entries_end() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
entries_end_	consensus/raft/simplelog_meta.pb.h	/^  ::google::protobuf::uint64 entries_end_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
entries_size	consensus/raft/raft.pb.h	/^inline int AppendEntriesRequest::entries_size() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
entries_start	consensus/raft/simplelog_meta.pb.h	/^inline ::google::protobuf::uint64 MetaData::entries_start() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
entries_start_	consensus/raft/simplelog_meta.pb.h	/^  ::google::protobuf::uint64 entries_start_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
fds	consensus/raft/simplefile_log.h	/^		std::vector<std::pair<int, bool>> fds;$/;"	m	class:floyd::raft::SimpleFileLog::Sync
floyd	consensus/raft/log.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/log.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/log_meta.pb.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/log_meta.pb.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/memory_log.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/memory_log.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/raft.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/raft.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/raft.pb.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/raft.pb.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/simplefile_log.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/simplefile_log.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/simplelog_meta.pb.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/simplelog_meta.pb.h	/^namespace floyd {$/;"	n
floyd	consensus/raft/state_machine.cc	/^namespace floyd {$/;"	n	file:
floyd	consensus/raft/state_machine.h	/^namespace floyd {$/;"	n
floyd	floyd.cc	/^namespace floyd {$/;"	n	file:
floyd	floyd_conn.cc	/^namespace floyd{$/;"	n	file:
floyd	floyd_db.cc	/^namespace floyd{$/;"	n	file:
floyd	floyd_hb.cc	/^namespace floyd{$/;"	n	file:
floyd	floyd_meta.cc	/^namespace floyd {$/;"	n	file:
floyd	floyd_util.cc	/^namespace floyd {$/;"	n	file:
floyd	floyd_worker.cc	/^namespace floyd{$/;"	n	file:
floyd	status.cc	/^namespace floyd{$/;"	n	file:
format	csapp.cc	/^std::string format(const char* format, ...)$/;"	f
get_next_index	consensus/raft/raft.cc	/^uint64_t RaftConsensus::PeerThread::get_next_index() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
google	command.pb.h	/^namespace google {$/;"	n
google	consensus/raft/log_meta.pb.h	/^namespace google {$/;"	n
google	consensus/raft/raft.pb.h	/^namespace google {$/;"	n
google	consensus/raft/simplelog_meta.pb.h	/^namespace google {$/;"	n
google	meta.pb.h	/^namespace google {$/;"	n
granted	consensus/raft/raft.pb.h	/^inline bool ResponseVote::granted() const {$/;"	f	class:floyd::raft::ResponseVote
granted_	consensus/raft/raft.pb.h	/^  bool granted_;$/;"	m	class:floyd::raft::ResponseVote
has_aerq	command.pb.h	/^inline bool Command::has_aerq() const {$/;"	f	class:command::Command
has_aers	command.pb.h	/^inline bool CommandRes::has_aers() const {$/;"	f	class:command::CommandRes
has_cmd	consensus/raft/raft.pb.h	/^inline bool Entry::has_cmd() const {$/;"	f	class:floyd::raft::Entry
has_commit_index	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_commit_index() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_current_term	consensus/raft/log_meta.pb.h	/^inline bool MetaData::has_current_term() const {$/;"	f	class:floyd::raft::log::MetaData
has_entries_end	consensus/raft/simplelog_meta.pb.h	/^inline bool MetaData::has_entries_end() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
has_entries_start	consensus/raft/simplelog_meta.pb.h	/^inline bool MetaData::has_entries_start() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
has_granted	consensus/raft/raft.pb.h	/^inline bool ResponseVote::has_granted() const {$/;"	f	class:floyd::raft::ResponseVote
has_ip	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_ip() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_ip	consensus/raft/raft.pb.h	/^inline bool RequestVote::has_ip() const {$/;"	f	class:floyd::raft::RequestVote
has_ip	meta.pb.h	/^inline bool MetaRes_Node::has_ip() const {$/;"	f	class:meta::MetaRes_Node
has_ip	meta.pb.h	/^inline bool Meta_Node::has_ip() const {$/;"	f	class:meta::Meta_Node
has_key	command.pb.h	/^inline bool Command_Kv::has_key() const {$/;"	f	class:command::Command_Kv
has_kv	command.pb.h	/^inline bool Command::has_kv() const {$/;"	f	class:command::Command
has_kvr	command.pb.h	/^inline bool CommandRes::has_kvr() const {$/;"	f	class:command::CommandRes
has_last_log_index	consensus/raft/raft.pb.h	/^inline bool RequestVote::has_last_log_index() const {$/;"	f	class:floyd::raft::RequestVote
has_last_log_term	consensus/raft/raft.pb.h	/^inline bool RequestVote::has_last_log_term() const {$/;"	f	class:floyd::raft::RequestVote
has_port	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_port() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_port	consensus/raft/raft.pb.h	/^inline bool RequestVote::has_port() const {$/;"	f	class:floyd::raft::RequestVote
has_port	meta.pb.h	/^inline bool MetaRes_Node::has_port() const {$/;"	f	class:meta::MetaRes_Node
has_port	meta.pb.h	/^inline bool Meta_Node::has_port() const {$/;"	f	class:meta::Meta_Node
has_prev_log_index	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_prev_log_index() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_prev_log_term	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_prev_log_term() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline bool MetaData::has_raft_metadata() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
has_rqv	command.pb.h	/^inline bool Command::has_rqv() const {$/;"	f	class:command::Command
has_rsv	command.pb.h	/^inline bool CommandRes::has_rsv() const {$/;"	f	class:command::CommandRes
has_status	command.pb.h	/^inline bool CommandRes_KvRet::has_status() const {$/;"	f	class:command::CommandRes_KvRet
has_status	consensus/raft/raft.pb.h	/^inline bool AppendEntriesResponse::has_status() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
has_t	meta.pb.h	/^inline bool Meta::has_t() const {$/;"	f	class:meta::Meta
has_term	consensus/raft/raft.pb.h	/^inline bool AppendEntriesRequest::has_term() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
has_term	consensus/raft/raft.pb.h	/^inline bool AppendEntriesResponse::has_term() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
has_term	consensus/raft/raft.pb.h	/^inline bool Entry::has_term() const {$/;"	f	class:floyd::raft::Entry
has_term	consensus/raft/raft.pb.h	/^inline bool RequestVote::has_term() const {$/;"	f	class:floyd::raft::RequestVote
has_term	consensus/raft/raft.pb.h	/^inline bool ResponseVote::has_term() const {$/;"	f	class:floyd::raft::ResponseVote
has_type	command.pb.h	/^inline bool Command::has_type() const {$/;"	f	class:command::Command
has_type	command.pb.h	/^inline bool CommandRes::has_type() const {$/;"	f	class:command::CommandRes
has_value	command.pb.h	/^inline bool CommandRes_KvRet::has_value() const {$/;"	f	class:command::CommandRes_KvRet
has_value	command.pb.h	/^inline bool Command_Kv::has_value() const {$/;"	f	class:command::Command_Kv
has_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline bool MetaData::has_voted_for_ip() const {$/;"	f	class:floyd::raft::log::MetaData
has_voted_for_port	consensus/raft/log_meta.pb.h	/^inline bool MetaData::has_voted_for_port() const {$/;"	f	class:floyd::raft::log::MetaData
have_vote_	consensus/raft/raft.h	/^		bool have_vote_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
index	consensus/raft/state_machine.h	/^		uint64_t index;$/;"	m	struct:floyd::raft::StateMachine::Entry
init_by_code	status.cc	/^void Status::init_by_code(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:floyd::Status
ip	consensus/raft/raft.pb.h	/^inline const ::std::string& AppendEntriesRequest::ip() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
ip	consensus/raft/raft.pb.h	/^inline const ::std::string& RequestVote::ip() const {$/;"	f	class:floyd::raft::RequestVote
ip	meta.pb.h	/^inline const ::std::string& MetaRes_Node::ip() const {$/;"	f	class:meta::MetaRes_Node
ip	meta.pb.h	/^inline const ::std::string& Meta_Node::ip() const {$/;"	f	class:meta::Meta_Node
ip_	consensus/raft/raft.pb.h	/^  ::std::string* ip_;$/;"	m	class:floyd::raft::AppendEntriesRequest
ip_	consensus/raft/raft.pb.h	/^  ::std::string* ip_;$/;"	m	class:floyd::raft::RequestVote
ip_	meta.pb.h	/^  ::std::string* ip_;$/;"	m	class:meta::MetaRes_Node
ip_	meta.pb.h	/^  ::std::string* ip_;$/;"	m	class:meta::Meta_Node
kAerqFieldNumber	command.pb.cc	/^const int Command::kAerqFieldNumber;$/;"	m	class:command::Command	file:
kAerqFieldNumber	command.pb.h	/^  static const int kAerqFieldNumber = 4;$/;"	m	class:command::Command
kAersFieldNumber	command.pb.cc	/^const int CommandRes::kAersFieldNumber;$/;"	m	class:command::CommandRes	file:
kAersFieldNumber	command.pb.h	/^  static const int kAersFieldNumber = 4;$/;"	m	class:command::CommandRes
kCmdFieldNumber	consensus/raft/raft.pb.cc	/^const int Entry::kCmdFieldNumber;$/;"	m	class:floyd::raft::Entry	file:
kCmdFieldNumber	consensus/raft/raft.pb.h	/^  static const int kCmdFieldNumber = 2;$/;"	m	class:floyd::raft::Entry
kCommitIndexFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kCommitIndexFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kCommitIndexFieldNumber	consensus/raft/raft.pb.h	/^  static const int kCommitIndexFieldNumber = 6;$/;"	m	class:floyd::raft::AppendEntriesRequest
kCurrentTermFieldNumber	consensus/raft/log_meta.pb.cc	/^const int MetaData::kCurrentTermFieldNumber;$/;"	m	class:floyd::raft::log::MetaData	file:
kCurrentTermFieldNumber	consensus/raft/log_meta.pb.h	/^  static const int kCurrentTermFieldNumber = 1;$/;"	m	class:floyd::raft::log::MetaData
kEntriesEndFieldNumber	consensus/raft/simplelog_meta.pb.cc	/^const int MetaData::kEntriesEndFieldNumber;$/;"	m	class:floyd::raft::simplefilelog::MetaData	file:
kEntriesEndFieldNumber	consensus/raft/simplelog_meta.pb.h	/^  static const int kEntriesEndFieldNumber = 3;$/;"	m	class:floyd::raft::simplefilelog::MetaData
kEntriesFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kEntriesFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kEntriesFieldNumber	consensus/raft/raft.pb.h	/^  static const int kEntriesFieldNumber = 7;$/;"	m	class:floyd::raft::AppendEntriesRequest
kEntriesStartFieldNumber	consensus/raft/simplelog_meta.pb.cc	/^const int MetaData::kEntriesStartFieldNumber;$/;"	m	class:floyd::raft::simplefilelog::MetaData	file:
kEntriesStartFieldNumber	consensus/raft/simplelog_meta.pb.h	/^  static const int kEntriesStartFieldNumber = 2;$/;"	m	class:floyd::raft::simplefilelog::MetaData
kGrantedFieldNumber	consensus/raft/raft.pb.cc	/^const int ResponseVote::kGrantedFieldNumber;$/;"	m	class:floyd::raft::ResponseVote	file:
kGrantedFieldNumber	consensus/raft/raft.pb.h	/^  static const int kGrantedFieldNumber = 2;$/;"	m	class:floyd::raft::ResponseVote
kIpFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kIpFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kIpFieldNumber	consensus/raft/raft.pb.cc	/^const int RequestVote::kIpFieldNumber;$/;"	m	class:floyd::raft::RequestVote	file:
kIpFieldNumber	consensus/raft/raft.pb.h	/^  static const int kIpFieldNumber = 1;$/;"	m	class:floyd::raft::AppendEntriesRequest
kIpFieldNumber	consensus/raft/raft.pb.h	/^  static const int kIpFieldNumber = 1;$/;"	m	class:floyd::raft::RequestVote
kIpFieldNumber	meta.pb.cc	/^const int MetaRes_Node::kIpFieldNumber;$/;"	m	class:meta::MetaRes_Node	file:
kIpFieldNumber	meta.pb.cc	/^const int Meta_Node::kIpFieldNumber;$/;"	m	class:meta::Meta_Node	file:
kIpFieldNumber	meta.pb.h	/^  static const int kIpFieldNumber = 1;$/;"	m	class:meta::MetaRes_Node
kIpFieldNumber	meta.pb.h	/^  static const int kIpFieldNumber = 1;$/;"	m	class:meta::Meta_Node
kKeyFieldNumber	command.pb.cc	/^const int Command_Kv::kKeyFieldNumber;$/;"	m	class:command::Command_Kv	file:
kKeyFieldNumber	command.pb.h	/^  static const int kKeyFieldNumber = 1;$/;"	m	class:command::Command_Kv
kKvFieldNumber	command.pb.cc	/^const int Command::kKvFieldNumber;$/;"	m	class:command::Command	file:
kKvFieldNumber	command.pb.h	/^  static const int kKvFieldNumber = 2;$/;"	m	class:command::Command
kKvrFieldNumber	command.pb.cc	/^const int CommandRes::kKvrFieldNumber;$/;"	m	class:command::CommandRes	file:
kKvrFieldNumber	command.pb.h	/^  static const int kKvrFieldNumber = 2;$/;"	m	class:command::CommandRes
kLastLogIndexFieldNumber	consensus/raft/raft.pb.cc	/^const int RequestVote::kLastLogIndexFieldNumber;$/;"	m	class:floyd::raft::RequestVote	file:
kLastLogIndexFieldNumber	consensus/raft/raft.pb.h	/^  static const int kLastLogIndexFieldNumber = 5;$/;"	m	class:floyd::raft::RequestVote
kLastLogTermFieldNumber	consensus/raft/raft.pb.cc	/^const int RequestVote::kLastLogTermFieldNumber;$/;"	m	class:floyd::raft::RequestVote	file:
kLastLogTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kLastLogTermFieldNumber = 4;$/;"	m	class:floyd::raft::RequestVote
kNodesFieldNumber	meta.pb.cc	/^const int Meta::kNodesFieldNumber;$/;"	m	class:meta::Meta	file:
kNodesFieldNumber	meta.pb.cc	/^const int MetaRes::kNodesFieldNumber;$/;"	m	class:meta::MetaRes	file:
kNodesFieldNumber	meta.pb.h	/^  static const int kNodesFieldNumber = 1;$/;"	m	class:meta::MetaRes
kNodesFieldNumber	meta.pb.h	/^  static const int kNodesFieldNumber = 2;$/;"	m	class:meta::Meta
kPortFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kPortFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kPortFieldNumber	consensus/raft/raft.pb.cc	/^const int RequestVote::kPortFieldNumber;$/;"	m	class:floyd::raft::RequestVote	file:
kPortFieldNumber	consensus/raft/raft.pb.h	/^  static const int kPortFieldNumber = 2;$/;"	m	class:floyd::raft::AppendEntriesRequest
kPortFieldNumber	consensus/raft/raft.pb.h	/^  static const int kPortFieldNumber = 2;$/;"	m	class:floyd::raft::RequestVote
kPortFieldNumber	meta.pb.cc	/^const int MetaRes_Node::kPortFieldNumber;$/;"	m	class:meta::MetaRes_Node	file:
kPortFieldNumber	meta.pb.cc	/^const int Meta_Node::kPortFieldNumber;$/;"	m	class:meta::Meta_Node	file:
kPortFieldNumber	meta.pb.h	/^  static const int kPortFieldNumber = 2;$/;"	m	class:meta::MetaRes_Node
kPortFieldNumber	meta.pb.h	/^  static const int kPortFieldNumber = 2;$/;"	m	class:meta::Meta_Node
kPrevLogIndexFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kPrevLogIndexFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kPrevLogIndexFieldNumber	consensus/raft/raft.pb.h	/^  static const int kPrevLogIndexFieldNumber = 4;$/;"	m	class:floyd::raft::AppendEntriesRequest
kPrevLogTermFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kPrevLogTermFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kPrevLogTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kPrevLogTermFieldNumber = 5;$/;"	m	class:floyd::raft::AppendEntriesRequest
kRaftMetadataFieldNumber	consensus/raft/simplelog_meta.pb.cc	/^const int MetaData::kRaftMetadataFieldNumber;$/;"	m	class:floyd::raft::simplefilelog::MetaData	file:
kRaftMetadataFieldNumber	consensus/raft/simplelog_meta.pb.h	/^  static const int kRaftMetadataFieldNumber = 1;$/;"	m	class:floyd::raft::simplefilelog::MetaData
kRqvFieldNumber	command.pb.cc	/^const int Command::kRqvFieldNumber;$/;"	m	class:command::Command	file:
kRqvFieldNumber	command.pb.h	/^  static const int kRqvFieldNumber = 3;$/;"	m	class:command::Command
kRsvFieldNumber	command.pb.cc	/^const int CommandRes::kRsvFieldNumber;$/;"	m	class:command::CommandRes	file:
kRsvFieldNumber	command.pb.h	/^  static const int kRsvFieldNumber = 3;$/;"	m	class:command::CommandRes
kStatusFieldNumber	command.pb.cc	/^const int CommandRes_KvRet::kStatusFieldNumber;$/;"	m	class:command::CommandRes_KvRet	file:
kStatusFieldNumber	command.pb.h	/^  static const int kStatusFieldNumber = 1;$/;"	m	class:command::CommandRes_KvRet
kStatusFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesResponse::kStatusFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesResponse	file:
kStatusFieldNumber	consensus/raft/raft.pb.h	/^  static const int kStatusFieldNumber = 1;$/;"	m	class:floyd::raft::AppendEntriesResponse
kTFieldNumber	meta.pb.cc	/^const int Meta::kTFieldNumber;$/;"	m	class:meta::Meta	file:
kTFieldNumber	meta.pb.h	/^  static const int kTFieldNumber = 1;$/;"	m	class:meta::Meta
kTermFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesRequest::kTermFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesRequest	file:
kTermFieldNumber	consensus/raft/raft.pb.cc	/^const int AppendEntriesResponse::kTermFieldNumber;$/;"	m	class:floyd::raft::AppendEntriesResponse	file:
kTermFieldNumber	consensus/raft/raft.pb.cc	/^const int Entry::kTermFieldNumber;$/;"	m	class:floyd::raft::Entry	file:
kTermFieldNumber	consensus/raft/raft.pb.cc	/^const int RequestVote::kTermFieldNumber;$/;"	m	class:floyd::raft::RequestVote	file:
kTermFieldNumber	consensus/raft/raft.pb.cc	/^const int ResponseVote::kTermFieldNumber;$/;"	m	class:floyd::raft::ResponseVote	file:
kTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kTermFieldNumber = 1;$/;"	m	class:floyd::raft::Entry
kTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kTermFieldNumber = 1;$/;"	m	class:floyd::raft::ResponseVote
kTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kTermFieldNumber = 2;$/;"	m	class:floyd::raft::AppendEntriesResponse
kTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kTermFieldNumber = 3;$/;"	m	class:floyd::raft::AppendEntriesRequest
kTermFieldNumber	consensus/raft/raft.pb.h	/^  static const int kTermFieldNumber = 3;$/;"	m	class:floyd::raft::RequestVote
kTypeFieldNumber	command.pb.cc	/^const int Command::kTypeFieldNumber;$/;"	m	class:command::Command	file:
kTypeFieldNumber	command.pb.cc	/^const int CommandRes::kTypeFieldNumber;$/;"	m	class:command::CommandRes	file:
kTypeFieldNumber	command.pb.h	/^  static const int kTypeFieldNumber = 1;$/;"	m	class:command::Command
kTypeFieldNumber	command.pb.h	/^  static const int kTypeFieldNumber = 1;$/;"	m	class:command::CommandRes
kValueFieldNumber	command.pb.cc	/^const int CommandRes_KvRet::kValueFieldNumber;$/;"	m	class:command::CommandRes_KvRet	file:
kValueFieldNumber	command.pb.cc	/^const int Command_Kv::kValueFieldNumber;$/;"	m	class:command::Command_Kv	file:
kValueFieldNumber	command.pb.h	/^  static const int kValueFieldNumber = 2;$/;"	m	class:command::CommandRes_KvRet
kValueFieldNumber	command.pb.h	/^  static const int kValueFieldNumber = 2;$/;"	m	class:command::Command_Kv
kVotedForIpFieldNumber	consensus/raft/log_meta.pb.cc	/^const int MetaData::kVotedForIpFieldNumber;$/;"	m	class:floyd::raft::log::MetaData	file:
kVotedForIpFieldNumber	consensus/raft/log_meta.pb.h	/^  static const int kVotedForIpFieldNumber = 2;$/;"	m	class:floyd::raft::log::MetaData
kVotedForPortFieldNumber	consensus/raft/log_meta.pb.cc	/^const int MetaData::kVotedForPortFieldNumber;$/;"	m	class:floyd::raft::log::MetaData	file:
kVotedForPortFieldNumber	consensus/raft/log_meta.pb.h	/^  static const int kVotedForPortFieldNumber = 3;$/;"	m	class:floyd::raft::log::MetaData
key	command.pb.h	/^inline const ::std::string& Command_Kv::key() const {$/;"	f	class:command::Command_Kv
key_	command.pb.h	/^  ::std::string* key_;$/;"	m	class:command::Command_Kv
kv	command.pb.h	/^inline const ::command::Command_Kv& Command::kv() const {$/;"	f	class:command::Command
kv_	command.pb.h	/^  ::command::Command_Kv* kv_;$/;"	m	class:command::Command
kvr	command.pb.h	/^inline const ::command::CommandRes_KvRet& CommandRes::kvr() const {$/;"	f	class:command::CommandRes
kvr_	command.pb.h	/^  ::command::CommandRes_KvRet* kvr_;$/;"	m	class:command::CommandRes
last_agree_index_	consensus/raft/raft.h	/^		uint64_t last_agree_index_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
last_apply_index_	consensus/raft/state_machine.h	/^	uint64_t last_apply_index_;$/;"	m	class:floyd::raft::StateMachine
last_index	consensus/raft/log.h	/^		uint64_t last_index;$/;"	m	class:floyd::raft::Log::Sync
last_log_index	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 RequestVote::last_log_index() const {$/;"	f	class:floyd::raft::RequestVote
last_log_index_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 last_log_index_;$/;"	m	class:floyd::raft::RequestVote
last_log_term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 RequestVote::last_log_term() const {$/;"	f	class:floyd::raft::RequestVote
last_log_term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 last_log_term_;$/;"	m	class:floyd::raft::RequestVote
leader_disk_	consensus/raft/raft.h	/^	LeaderDiskThread* leader_disk_;$/;"	m	class:floyd::raft::RaftConsensus
leader_ip_	consensus/raft/raft.h	/^	std::string leader_ip_;$/;"	m	class:floyd::raft::RaftConsensus
leader_port_	consensus/raft/raft.h	/^	int leader_port_;$/;"	m	class:floyd::raft::RaftConsensus
log	consensus/raft/log_meta.pb.cc	/^namespace log {$/;"	n	namespace:floyd::raft	file:
log	consensus/raft/log_meta.pb.h	/^namespace log {$/;"	n	namespace:floyd::raft
log_	consensus/raft/raft.h	/^	std::unique_ptr<Log> log_;$/;"	m	class:floyd::raft::RaftConsensus
log_entry	consensus/raft/state_machine.h	/^		Log::Entry log_entry;$/;"	m	struct:floyd::raft::StateMachine::Entry
log_sync_queued_	consensus/raft/raft.h	/^	bool log_sync_queued_;$/;"	m	class:floyd::raft::RaftConsensus
memory_log_	consensus/raft/simplefile_log.h	/^	MemoryLog memory_log_;$/;"	m	class:floyd::raft::SimpleFileLog
meta	meta.pb.cc	/^namespace meta {$/;"	n	file:
meta	meta.pb.h	/^namespace meta {$/;"	n
metadata	consensus/raft/log.h	/^	floyd::raft::log::MetaData metadata;$/;"	m	class:floyd::raft::Log
metadata_	consensus/raft/simplefile_log.h	/^	floyd::raft::simplefilelog::MetaData metadata_;$/;"	m	class:floyd::raft::SimpleFileLog
mutable_aerq	command.pb.h	/^inline ::floyd::raft::AppendEntriesRequest* Command::mutable_aerq() {$/;"	f	class:command::Command
mutable_aers	command.pb.h	/^inline ::floyd::raft::AppendEntriesResponse* CommandRes::mutable_aers() {$/;"	f	class:command::CommandRes
mutable_cmd	consensus/raft/raft.pb.h	/^inline ::std::string* Entry::mutable_cmd() {$/;"	f	class:floyd::raft::Entry
mutable_entries	consensus/raft/raft.pb.h	/^AppendEntriesRequest::mutable_entries() {$/;"	f	class:floyd::raft::AppendEntriesRequest
mutable_entries	consensus/raft/raft.pb.h	/^inline ::floyd::raft::Entry* AppendEntriesRequest::mutable_entries(int index) {$/;"	f	class:floyd::raft::AppendEntriesRequest
mutable_ip	consensus/raft/raft.pb.h	/^inline ::std::string* AppendEntriesRequest::mutable_ip() {$/;"	f	class:floyd::raft::AppendEntriesRequest
mutable_ip	consensus/raft/raft.pb.h	/^inline ::std::string* RequestVote::mutable_ip() {$/;"	f	class:floyd::raft::RequestVote
mutable_ip	meta.pb.h	/^inline ::std::string* MetaRes_Node::mutable_ip() {$/;"	f	class:meta::MetaRes_Node
mutable_ip	meta.pb.h	/^inline ::std::string* Meta_Node::mutable_ip() {$/;"	f	class:meta::Meta_Node
mutable_key	command.pb.h	/^inline ::std::string* Command_Kv::mutable_key() {$/;"	f	class:command::Command_Kv
mutable_kv	command.pb.h	/^inline ::command::Command_Kv* Command::mutable_kv() {$/;"	f	class:command::Command
mutable_kvr	command.pb.h	/^inline ::command::CommandRes_KvRet* CommandRes::mutable_kvr() {$/;"	f	class:command::CommandRes
mutable_nodes	meta.pb.h	/^Meta::mutable_nodes() {$/;"	f	class:meta::Meta
mutable_nodes	meta.pb.h	/^MetaRes::mutable_nodes() {$/;"	f	class:meta::MetaRes
mutable_nodes	meta.pb.h	/^inline ::meta::MetaRes_Node* MetaRes::mutable_nodes(int index) {$/;"	f	class:meta::MetaRes
mutable_nodes	meta.pb.h	/^inline ::meta::Meta_Node* Meta::mutable_nodes(int index) {$/;"	f	class:meta::Meta
mutable_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline ::floyd::raft::log::MetaData* MetaData::mutable_raft_metadata() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
mutable_rqv	command.pb.h	/^inline ::floyd::raft::RequestVote* Command::mutable_rqv() {$/;"	f	class:command::Command
mutable_rsv	command.pb.h	/^inline ::floyd::raft::ResponseVote* CommandRes::mutable_rsv() {$/;"	f	class:command::CommandRes
mutable_unknown_fields	command.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:command::Command
mutable_unknown_fields	command.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:command::CommandRes
mutable_unknown_fields	command.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:command::CommandRes_KvRet
mutable_unknown_fields	command.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:command::Command_Kv
mutable_unknown_fields	consensus/raft/log_meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::log::MetaData
mutable_unknown_fields	consensus/raft/raft.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::AppendEntriesRequest
mutable_unknown_fields	consensus/raft/raft.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::AppendEntriesResponse
mutable_unknown_fields	consensus/raft/raft.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::Entry
mutable_unknown_fields	consensus/raft/raft.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::RequestVote
mutable_unknown_fields	consensus/raft/raft.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::ResponseVote
mutable_unknown_fields	consensus/raft/simplelog_meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
mutable_unknown_fields	meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:meta::Meta
mutable_unknown_fields	meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:meta::MetaRes
mutable_unknown_fields	meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:meta::MetaRes_Node
mutable_unknown_fields	meta.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:meta::Meta_Node
mutable_value	command.pb.h	/^inline ::std::string* CommandRes_KvRet::mutable_value() {$/;"	f	class:command::CommandRes_KvRet
mutable_value	command.pb.h	/^inline ::std::string* Command_Kv::mutable_value() {$/;"	f	class:command::Command_Kv
mutable_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline ::std::string* MetaData::mutable_voted_for_ip() {$/;"	f	class:floyd::raft::log::MetaData
mutex_	consensus/raft/raft.h	/^	mutable Mutex mutex_;$/;"	m	class:floyd::raft::RaftConsensus
mutex_	consensus/raft/state_machine.h	/^	mutable Mutex mutex_;$/;"	m	class:floyd::raft::StateMachine
next_heartbeat_time_	consensus/raft/raft.h	/^		struct timespec next_heartbeat_time_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread	typeref:struct:floyd::raft::RaftConsensus::PeerThread::timespec
next_index_	consensus/raft/raft.h	/^		uint64_t next_index_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
ni_	consensus/raft/raft.h	/^		NodeInfo* ni_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
nodes	meta.pb.h	/^Meta::nodes() const {$/;"	f	class:meta::Meta
nodes	meta.pb.h	/^MetaRes::nodes() const {$/;"	f	class:meta::MetaRes
nodes	meta.pb.h	/^inline const ::meta::MetaRes_Node& MetaRes::nodes(int index) const {$/;"	f	class:meta::MetaRes
nodes	meta.pb.h	/^inline const ::meta::Meta_Node& Meta::nodes(int index) const {$/;"	f	class:meta::Meta
nodes_	meta.pb.h	/^  ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node > nodes_;$/;"	m	class:meta::MetaRes
nodes_	meta.pb.h	/^  ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node > nodes_;$/;"	m	class:meta::Meta
nodes_info	floyd.cc	/^std::vector<NodeInfo*> Floyd::nodes_info;$/;"	m	class:floyd::Floyd	file:
nodes_mutex	floyd.cc	/^Mutex Floyd::nodes_mutex;$/;"	m	class:floyd::Floyd	file:
nodes_size	meta.pb.h	/^inline int Meta::nodes_size() const {$/;"	f	class:meta::Meta
nodes_size	meta.pb.h	/^inline int MetaRes::nodes_size() const {$/;"	f	class:meta::MetaRes
open_clientfd	csapp.cc	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	csapp.cc	/^int open_listenfd(int port) $/;"	f
operator =	command.pb.h	/^  inline Command& operator=(const Command& from) {$/;"	f	class:command::Command
operator =	command.pb.h	/^  inline CommandRes& operator=(const CommandRes& from) {$/;"	f	class:command::CommandRes
operator =	command.pb.h	/^  inline CommandRes_KvRet& operator=(const CommandRes_KvRet& from) {$/;"	f	class:command::CommandRes_KvRet
operator =	command.pb.h	/^  inline Command_Kv& operator=(const Command_Kv& from) {$/;"	f	class:command::Command_Kv
operator =	consensus/raft/log_meta.pb.h	/^  inline MetaData& operator=(const MetaData& from) {$/;"	f	class:floyd::raft::log::MetaData
operator =	consensus/raft/raft.pb.h	/^  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {$/;"	f	class:floyd::raft::AppendEntriesRequest
operator =	consensus/raft/raft.pb.h	/^  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {$/;"	f	class:floyd::raft::AppendEntriesResponse
operator =	consensus/raft/raft.pb.h	/^  inline Entry& operator=(const Entry& from) {$/;"	f	class:floyd::raft::Entry
operator =	consensus/raft/raft.pb.h	/^  inline RequestVote& operator=(const RequestVote& from) {$/;"	f	class:floyd::raft::RequestVote
operator =	consensus/raft/raft.pb.h	/^  inline ResponseVote& operator=(const ResponseVote& from) {$/;"	f	class:floyd::raft::ResponseVote
operator =	consensus/raft/simplelog_meta.pb.h	/^  inline MetaData& operator=(const MetaData& from) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
operator =	meta.pb.h	/^  inline Meta& operator=(const Meta& from) {$/;"	f	class:meta::Meta
operator =	meta.pb.h	/^  inline MetaRes& operator=(const MetaRes& from) {$/;"	f	class:meta::MetaRes
operator =	meta.pb.h	/^  inline MetaRes_Node& operator=(const MetaRes_Node& from) {$/;"	f	class:meta::MetaRes_Node
operator =	meta.pb.h	/^  inline Meta_Node& operator=(const Meta_Node& from) {$/;"	f	class:meta::Meta_Node
operator ==	floyd_meta.cc	/^bool NodeInfo::operator == (NodeInfo& node) {$/;"	f	class:floyd::NodeInfo
options_	consensus/raft/raft.h	/^	Options options_;$/;"	m	class:floyd::raft::RaftConsensus
parent_dir_	consensus/raft/simplefile_log.h	/^	std::string parent_dir_;$/;"	m	class:floyd::raft::SimpleFileLog
peers_	consensus/raft/raft.h	/^	std::vector<PeerThread*> peers_;$/;"	m	class:floyd::raft::RaftConsensus
period_	consensus/raft/raft.h	/^	struct timespec period_;$/;"	m	class:floyd::raft::RaftConsensus	typeref:struct:floyd::raft::RaftConsensus::timespec
port	consensus/raft/raft.pb.h	/^inline ::google::protobuf::int32 AppendEntriesRequest::port() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
port	consensus/raft/raft.pb.h	/^inline ::google::protobuf::int32 RequestVote::port() const {$/;"	f	class:floyd::raft::RequestVote
port	meta.pb.h	/^inline ::google::protobuf::int32 MetaRes_Node::port() const {$/;"	f	class:meta::MetaRes_Node
port	meta.pb.h	/^inline ::google::protobuf::int32 Meta_Node::port() const {$/;"	f	class:meta::Meta_Node
port_	consensus/raft/raft.pb.h	/^  ::google::protobuf::int32 port_;$/;"	m	class:floyd::raft::AppendEntriesRequest
port_	consensus/raft/raft.pb.h	/^  ::google::protobuf::int32 port_;$/;"	m	class:floyd::raft::RequestVote
port_	meta.pb.h	/^  ::google::protobuf::int32 port_;$/;"	m	class:meta::MetaRes_Node
port_	meta.pb.h	/^  ::google::protobuf::int32 port_;$/;"	m	class:meta::Meta_Node
posix_error	csapp.cc	/^void posix_error(int code, const char *msg) \/* posix-style error *\/$/;"	f
prev_log_index	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 AppendEntriesRequest::prev_log_index() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
prev_log_index_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 prev_log_index_;$/;"	m	class:floyd::raft::AppendEntriesRequest
prev_log_term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 AppendEntriesRequest::prev_log_term() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
prev_log_term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 prev_log_term_;$/;"	m	class:floyd::raft::AppendEntriesRequest
protobuf	command.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf	consensus/raft/log_meta.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf	consensus/raft/raft.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf	consensus/raft/simplelog_meta.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf	meta.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf_AddDesc_command_2eproto	command.pb.cc	/^void protobuf_AddDesc_command_2eproto() {$/;"	f	namespace:command
protobuf_AddDesc_meta_2eproto	meta.pb.cc	/^void protobuf_AddDesc_meta_2eproto() {$/;"	f	namespace:meta
protobuf_AddDesc_raft_2flog_5fmeta_2eproto	consensus/raft/log_meta.pb.cc	/^void protobuf_AddDesc_raft_2flog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::log
protobuf_AddDesc_raft_2fraft_2eproto	consensus/raft/raft.pb.cc	/^void protobuf_AddDesc_raft_2fraft_2eproto() {$/;"	f	namespace:floyd::raft
protobuf_AddDesc_raft_2fsimplelog_5fmeta_2eproto	consensus/raft/simplelog_meta.pb.cc	/^void protobuf_AddDesc_raft_2fsimplelog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::simplefilelog
protobuf_AssignDesc_command_2eproto	command.pb.cc	/^void protobuf_AssignDesc_command_2eproto() {$/;"	f	namespace:command
protobuf_AssignDesc_meta_2eproto	meta.pb.cc	/^void protobuf_AssignDesc_meta_2eproto() {$/;"	f	namespace:meta
protobuf_AssignDesc_raft_2flog_5fmeta_2eproto	consensus/raft/log_meta.pb.cc	/^void protobuf_AssignDesc_raft_2flog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::log
protobuf_AssignDesc_raft_2fraft_2eproto	consensus/raft/raft.pb.cc	/^void protobuf_AssignDesc_raft_2fraft_2eproto() {$/;"	f	namespace:floyd::raft
protobuf_AssignDesc_raft_2fsimplelog_5fmeta_2eproto	consensus/raft/simplelog_meta.pb.cc	/^void protobuf_AssignDesc_raft_2fsimplelog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::simplefilelog
protobuf_AssignDescriptorsOnce	command.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:command::__anon2
protobuf_AssignDescriptorsOnce	consensus/raft/log_meta.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:floyd::raft::log::__anon4
protobuf_AssignDescriptorsOnce	consensus/raft/raft.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:floyd::raft::__anon6
protobuf_AssignDescriptorsOnce	consensus/raft/simplelog_meta.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:floyd::raft::simplefilelog::__anon8
protobuf_AssignDescriptorsOnce	meta.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:meta::__anon10
protobuf_RegisterTypes	command.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:command::__anon2
protobuf_RegisterTypes	consensus/raft/log_meta.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:floyd::raft::log::__anon4
protobuf_RegisterTypes	consensus/raft/raft.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:floyd::raft::__anon6
protobuf_RegisterTypes	consensus/raft/simplelog_meta.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:floyd::raft::simplefilelog::__anon8
protobuf_RegisterTypes	meta.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:meta::__anon10
protobuf_ShutdownFile_command_2eproto	command.pb.cc	/^void protobuf_ShutdownFile_command_2eproto() {$/;"	f	namespace:command
protobuf_ShutdownFile_meta_2eproto	meta.pb.cc	/^void protobuf_ShutdownFile_meta_2eproto() {$/;"	f	namespace:meta
protobuf_ShutdownFile_raft_2flog_5fmeta_2eproto	consensus/raft/log_meta.pb.cc	/^void protobuf_ShutdownFile_raft_2flog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::log
protobuf_ShutdownFile_raft_2fraft_2eproto	consensus/raft/raft.pb.cc	/^void protobuf_ShutdownFile_raft_2fraft_2eproto() {$/;"	f	namespace:floyd::raft
protobuf_ShutdownFile_raft_2fsimplelog_5fmeta_2eproto	consensus/raft/simplelog_meta.pb.cc	/^void protobuf_ShutdownFile_raft_2fsimplelog_5fmeta_2eproto() {$/;"	f	namespace:floyd::raft::simplefilelog
raft	consensus/raft/log.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/log.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/log_meta.pb.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/log_meta.pb.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/memory_log.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/memory_log.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/raft.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/raft.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/raft.pb.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/raft.pb.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/simplefile_log.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/simplefile_log.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/simplelog_meta.pb.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/simplelog_meta.pb.h	/^namespace raft {$/;"	n	namespace:floyd
raft	consensus/raft/state_machine.cc	/^namespace raft {$/;"	n	namespace:floyd	file:
raft	consensus/raft/state_machine.h	/^namespace raft {$/;"	n	namespace:floyd
raft_con	floyd.cc	/^floyd::raft::RaftConsensus* Floyd::raft_con;$/;"	m	class:floyd::Floyd	file:
raft_con_	consensus/raft/raft.h	/^		RaftConsensus* raft_con_;$/;"	m	class:floyd::raft::RaftConsensus::ElectLeaderThread
raft_con_	consensus/raft/raft.h	/^		RaftConsensus* raft_con_;$/;"	m	class:floyd::raft::RaftConsensus::LeaderDiskThread
raft_con_	consensus/raft/raft.h	/^		RaftConsensus* raft_con_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
raft_con_	consensus/raft/state_machine.h	/^	RaftConsensus* raft_con_;$/;"	m	class:floyd::raft::StateMachine
raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline const ::floyd::raft::log::MetaData& MetaData::raft_metadata() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
raft_metadata_	consensus/raft/simplelog_meta.pb.h	/^  ::floyd::raft::log::MetaData* raft_metadata_;$/;"	m	class:floyd::raft::simplefilelog::MetaData
release_aerq	command.pb.h	/^inline ::floyd::raft::AppendEntriesRequest* Command::release_aerq() {$/;"	f	class:command::Command
release_aers	command.pb.h	/^inline ::floyd::raft::AppendEntriesResponse* CommandRes::release_aers() {$/;"	f	class:command::CommandRes
release_cmd	consensus/raft/raft.pb.h	/^inline ::std::string* Entry::release_cmd() {$/;"	f	class:floyd::raft::Entry
release_ip	consensus/raft/raft.pb.h	/^inline ::std::string* AppendEntriesRequest::release_ip() {$/;"	f	class:floyd::raft::AppendEntriesRequest
release_ip	consensus/raft/raft.pb.h	/^inline ::std::string* RequestVote::release_ip() {$/;"	f	class:floyd::raft::RequestVote
release_ip	meta.pb.h	/^inline ::std::string* MetaRes_Node::release_ip() {$/;"	f	class:meta::MetaRes_Node
release_ip	meta.pb.h	/^inline ::std::string* Meta_Node::release_ip() {$/;"	f	class:meta::Meta_Node
release_key	command.pb.h	/^inline ::std::string* Command_Kv::release_key() {$/;"	f	class:command::Command_Kv
release_kv	command.pb.h	/^inline ::command::Command_Kv* Command::release_kv() {$/;"	f	class:command::Command
release_kvr	command.pb.h	/^inline ::command::CommandRes_KvRet* CommandRes::release_kvr() {$/;"	f	class:command::CommandRes
release_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline ::floyd::raft::log::MetaData* MetaData::release_raft_metadata() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
release_rqv	command.pb.h	/^inline ::floyd::raft::RequestVote* Command::release_rqv() {$/;"	f	class:command::Command
release_rsv	command.pb.h	/^inline ::floyd::raft::ResponseVote* CommandRes::release_rsv() {$/;"	f	class:command::CommandRes
release_value	command.pb.h	/^inline ::std::string* CommandRes_KvRet::release_value() {$/;"	f	class:command::CommandRes_KvRet
release_value	command.pb.h	/^inline ::std::string* Command_Kv::release_value() {$/;"	f	class:command::Command_Kv
release_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline ::std::string* MetaData::release_voted_for_ip() {$/;"	f	class:floyd::raft::log::MetaData
rio_read	csapp.cc	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	csapp.cc	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	csapp.cc	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	csapp.cc	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	csapp.cc	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_writen	csapp.cc	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
rqv	command.pb.h	/^inline const ::floyd::raft::RequestVote& Command::rqv() const {$/;"	f	class:command::Command
rqv_	command.pb.h	/^  ::floyd::raft::RequestVote* rqv_;$/;"	m	class:command::Command
rsv	command.pb.h	/^inline const ::floyd::raft::ResponseVote& CommandRes::rsv() const {$/;"	f	class:command::CommandRes
rsv_	command.pb.h	/^  ::floyd::raft::ResponseVote* rsv_;$/;"	m	class:command::CommandRes
set_allocated_aerq	command.pb.h	/^inline void Command::set_allocated_aerq(::floyd::raft::AppendEntriesRequest* aerq) {$/;"	f	class:command::Command
set_allocated_aers	command.pb.h	/^inline void CommandRes::set_allocated_aers(::floyd::raft::AppendEntriesResponse* aers) {$/;"	f	class:command::CommandRes
set_allocated_cmd	consensus/raft/raft.pb.h	/^inline void Entry::set_allocated_cmd(::std::string* cmd) {$/;"	f	class:floyd::raft::Entry
set_allocated_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_allocated_ip(::std::string* ip) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_allocated_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::set_allocated_ip(::std::string* ip) {$/;"	f	class:floyd::raft::RequestVote
set_allocated_ip	meta.pb.h	/^inline void MetaRes_Node::set_allocated_ip(::std::string* ip) {$/;"	f	class:meta::MetaRes_Node
set_allocated_ip	meta.pb.h	/^inline void Meta_Node::set_allocated_ip(::std::string* ip) {$/;"	f	class:meta::Meta_Node
set_allocated_key	command.pb.h	/^inline void Command_Kv::set_allocated_key(::std::string* key) {$/;"	f	class:command::Command_Kv
set_allocated_kv	command.pb.h	/^inline void Command::set_allocated_kv(::command::Command_Kv* kv) {$/;"	f	class:command::Command
set_allocated_kvr	command.pb.h	/^inline void CommandRes::set_allocated_kvr(::command::CommandRes_KvRet* kvr) {$/;"	f	class:command::CommandRes
set_allocated_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_allocated_raft_metadata(::floyd::raft::log::MetaData* raft_metadata) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_allocated_rqv	command.pb.h	/^inline void Command::set_allocated_rqv(::floyd::raft::RequestVote* rqv) {$/;"	f	class:command::Command
set_allocated_rsv	command.pb.h	/^inline void CommandRes::set_allocated_rsv(::floyd::raft::ResponseVote* rsv) {$/;"	f	class:command::CommandRes
set_allocated_value	command.pb.h	/^inline void CommandRes_KvRet::set_allocated_value(::std::string* value) {$/;"	f	class:command::CommandRes_KvRet
set_allocated_value	command.pb.h	/^inline void Command_Kv::set_allocated_value(::std::string* value) {$/;"	f	class:command::Command_Kv
set_allocated_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_allocated_voted_for_ip(::std::string* voted_for_ip) {$/;"	f	class:floyd::raft::log::MetaData
set_cmd	consensus/raft/raft.pb.h	/^inline void Entry::set_cmd(const ::std::string& value) {$/;"	f	class:floyd::raft::Entry
set_cmd	consensus/raft/raft.pb.h	/^inline void Entry::set_cmd(const char* value) {$/;"	f	class:floyd::raft::Entry
set_cmd	consensus/raft/raft.pb.h	/^inline void Entry::set_cmd(const void* value, size_t size) {$/;"	f	class:floyd::raft::Entry
set_commit_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_commit_index(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_current_term	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_current_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::log::MetaData
set_entries_end	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_entries_end(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_entries_start	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_entries_start(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_granted	consensus/raft/raft.pb.h	/^inline void ResponseVote::set_granted(bool value) {$/;"	f	class:floyd::raft::ResponseVote
set_has_aerq	command.pb.h	/^inline void Command::set_has_aerq() {$/;"	f	class:command::Command
set_has_aers	command.pb.h	/^inline void CommandRes::set_has_aers() {$/;"	f	class:command::CommandRes
set_has_cmd	consensus/raft/raft.pb.h	/^inline void Entry::set_has_cmd() {$/;"	f	class:floyd::raft::Entry
set_has_commit_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_commit_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_current_term	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_has_current_term() {$/;"	f	class:floyd::raft::log::MetaData
set_has_entries_end	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_has_entries_end() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_has_entries_start	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_has_entries_start() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_has_granted	consensus/raft/raft.pb.h	/^inline void ResponseVote::set_has_granted() {$/;"	f	class:floyd::raft::ResponseVote
set_has_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_ip() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::set_has_ip() {$/;"	f	class:floyd::raft::RequestVote
set_has_ip	meta.pb.h	/^inline void MetaRes_Node::set_has_ip() {$/;"	f	class:meta::MetaRes_Node
set_has_ip	meta.pb.h	/^inline void Meta_Node::set_has_ip() {$/;"	f	class:meta::Meta_Node
set_has_key	command.pb.h	/^inline void Command_Kv::set_has_key() {$/;"	f	class:command::Command_Kv
set_has_kv	command.pb.h	/^inline void Command::set_has_kv() {$/;"	f	class:command::Command
set_has_kvr	command.pb.h	/^inline void CommandRes::set_has_kvr() {$/;"	f	class:command::CommandRes
set_has_last_log_index	consensus/raft/raft.pb.h	/^inline void RequestVote::set_has_last_log_index() {$/;"	f	class:floyd::raft::RequestVote
set_has_last_log_term	consensus/raft/raft.pb.h	/^inline void RequestVote::set_has_last_log_term() {$/;"	f	class:floyd::raft::RequestVote
set_has_port	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_port() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_port	consensus/raft/raft.pb.h	/^inline void RequestVote::set_has_port() {$/;"	f	class:floyd::raft::RequestVote
set_has_port	meta.pb.h	/^inline void MetaRes_Node::set_has_port() {$/;"	f	class:meta::MetaRes_Node
set_has_port	meta.pb.h	/^inline void Meta_Node::set_has_port() {$/;"	f	class:meta::Meta_Node
set_has_prev_log_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_prev_log_index() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_prev_log_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_prev_log_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_raft_metadata	consensus/raft/simplelog_meta.pb.h	/^inline void MetaData::set_has_raft_metadata() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
set_has_rqv	command.pb.h	/^inline void Command::set_has_rqv() {$/;"	f	class:command::Command
set_has_rsv	command.pb.h	/^inline void CommandRes::set_has_rsv() {$/;"	f	class:command::CommandRes
set_has_status	command.pb.h	/^inline void CommandRes_KvRet::set_has_status() {$/;"	f	class:command::CommandRes_KvRet
set_has_status	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::set_has_status() {$/;"	f	class:floyd::raft::AppendEntriesResponse
set_has_t	meta.pb.h	/^inline void Meta::set_has_t() {$/;"	f	class:meta::Meta
set_has_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_has_term() {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_has_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::set_has_term() {$/;"	f	class:floyd::raft::AppendEntriesResponse
set_has_term	consensus/raft/raft.pb.h	/^inline void Entry::set_has_term() {$/;"	f	class:floyd::raft::Entry
set_has_term	consensus/raft/raft.pb.h	/^inline void RequestVote::set_has_term() {$/;"	f	class:floyd::raft::RequestVote
set_has_term	consensus/raft/raft.pb.h	/^inline void ResponseVote::set_has_term() {$/;"	f	class:floyd::raft::ResponseVote
set_has_type	command.pb.h	/^inline void Command::set_has_type() {$/;"	f	class:command::Command
set_has_type	command.pb.h	/^inline void CommandRes::set_has_type() {$/;"	f	class:command::CommandRes
set_has_value	command.pb.h	/^inline void CommandRes_KvRet::set_has_value() {$/;"	f	class:command::CommandRes_KvRet
set_has_value	command.pb.h	/^inline void Command_Kv::set_has_value() {$/;"	f	class:command::Command_Kv
set_has_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_has_voted_for_ip() {$/;"	f	class:floyd::raft::log::MetaData
set_has_voted_for_port	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_has_voted_for_port() {$/;"	f	class:floyd::raft::log::MetaData
set_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_ip(const ::std::string& value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_ip(const char* value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_ip	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_ip(const void* value, size_t size) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::set_ip(const ::std::string& value) {$/;"	f	class:floyd::raft::RequestVote
set_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::set_ip(const char* value) {$/;"	f	class:floyd::raft::RequestVote
set_ip	consensus/raft/raft.pb.h	/^inline void RequestVote::set_ip(const void* value, size_t size) {$/;"	f	class:floyd::raft::RequestVote
set_ip	meta.pb.h	/^inline void MetaRes_Node::set_ip(const ::std::string& value) {$/;"	f	class:meta::MetaRes_Node
set_ip	meta.pb.h	/^inline void MetaRes_Node::set_ip(const char* value) {$/;"	f	class:meta::MetaRes_Node
set_ip	meta.pb.h	/^inline void MetaRes_Node::set_ip(const void* value, size_t size) {$/;"	f	class:meta::MetaRes_Node
set_ip	meta.pb.h	/^inline void Meta_Node::set_ip(const ::std::string& value) {$/;"	f	class:meta::Meta_Node
set_ip	meta.pb.h	/^inline void Meta_Node::set_ip(const char* value) {$/;"	f	class:meta::Meta_Node
set_ip	meta.pb.h	/^inline void Meta_Node::set_ip(const void* value, size_t size) {$/;"	f	class:meta::Meta_Node
set_key	command.pb.h	/^inline void Command_Kv::set_key(const ::std::string& value) {$/;"	f	class:command::Command_Kv
set_key	command.pb.h	/^inline void Command_Kv::set_key(const char* value) {$/;"	f	class:command::Command_Kv
set_key	command.pb.h	/^inline void Command_Kv::set_key(const void* value, size_t size) {$/;"	f	class:command::Command_Kv
set_last_log_index	consensus/raft/raft.pb.h	/^inline void RequestVote::set_last_log_index(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::RequestVote
set_last_log_term	consensus/raft/raft.pb.h	/^inline void RequestVote::set_last_log_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::RequestVote
set_next_index	consensus/raft/raft.cc	/^void RaftConsensus::PeerThread::set_next_index(uint64_t next_index) {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
set_port	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_port(::google::protobuf::int32 value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_port	consensus/raft/raft.pb.h	/^inline void RequestVote::set_port(::google::protobuf::int32 value) {$/;"	f	class:floyd::raft::RequestVote
set_port	meta.pb.h	/^inline void MetaRes_Node::set_port(::google::protobuf::int32 value) {$/;"	f	class:meta::MetaRes_Node
set_port	meta.pb.h	/^inline void Meta_Node::set_port(::google::protobuf::int32 value) {$/;"	f	class:meta::Meta_Node
set_prev_log_index	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_prev_log_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_status	command.pb.h	/^inline void CommandRes_KvRet::set_status(bool value) {$/;"	f	class:command::CommandRes_KvRet
set_status	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::set_status(bool value) {$/;"	f	class:floyd::raft::AppendEntriesResponse
set_t	meta.pb.h	/^inline void Meta::set_t(::meta::Meta_Type value) {$/;"	f	class:meta::Meta
set_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesRequest::set_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::AppendEntriesRequest
set_term	consensus/raft/raft.pb.h	/^inline void AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::AppendEntriesResponse
set_term	consensus/raft/raft.pb.h	/^inline void Entry::set_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::Entry
set_term	consensus/raft/raft.pb.h	/^inline void RequestVote::set_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::RequestVote
set_term	consensus/raft/raft.pb.h	/^inline void ResponseVote::set_term(::google::protobuf::uint64 value) {$/;"	f	class:floyd::raft::ResponseVote
set_type	command.pb.h	/^inline void Command::set_type(::command::Command_Type value) {$/;"	f	class:command::Command
set_type	command.pb.h	/^inline void CommandRes::set_type(::command::CommandRes_Type value) {$/;"	f	class:command::CommandRes
set_value	command.pb.h	/^inline void CommandRes_KvRet::set_value(const ::std::string& value) {$/;"	f	class:command::CommandRes_KvRet
set_value	command.pb.h	/^inline void CommandRes_KvRet::set_value(const char* value) {$/;"	f	class:command::CommandRes_KvRet
set_value	command.pb.h	/^inline void CommandRes_KvRet::set_value(const void* value, size_t size) {$/;"	f	class:command::CommandRes_KvRet
set_value	command.pb.h	/^inline void Command_Kv::set_value(const ::std::string& value) {$/;"	f	class:command::Command_Kv
set_value	command.pb.h	/^inline void Command_Kv::set_value(const char* value) {$/;"	f	class:command::Command_Kv
set_value	command.pb.h	/^inline void Command_Kv::set_value(const void* value, size_t size) {$/;"	f	class:command::Command_Kv
set_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_voted_for_ip(const ::std::string& value) {$/;"	f	class:floyd::raft::log::MetaData
set_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_voted_for_ip(const char* value) {$/;"	f	class:floyd::raft::log::MetaData
set_voted_for_ip	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_voted_for_ip(const void* value, size_t size) {$/;"	f	class:floyd::raft::log::MetaData
set_voted_for_port	consensus/raft/log_meta.pb.h	/^inline void MetaData::set_voted_for_port(::google::protobuf::int32 value) {$/;"	f	class:floyd::raft::log::MetaData
simplefilelog	consensus/raft/simplelog_meta.pb.cc	/^namespace simplefilelog {$/;"	n	namespace:floyd::raft	file:
simplefilelog	consensus/raft/simplelog_meta.pb.h	/^namespace simplefilelog {$/;"	n	namespace:floyd::raft
sm_	consensus/raft/raft.h	/^	StateMachine* sm_;$/;"	m	class:floyd::raft::RaftConsensus
sm_	consensus/raft/state_machine.h	/^		StateMachine* sm_;$/;"	m	class:floyd::raft::StateMachine::ApplyThread
start_election_at_	consensus/raft/raft.h	/^	struct timespec start_election_at_;$/;"	m	class:floyd::raft::RaftConsensus	typeref:struct:floyd::raft::RaftConsensus::timespec
start_index_	consensus/raft/memory_log.h	/^	uint64_t start_index_;$/;"	m	class:floyd::raft::MemoryLog
state_	consensus/raft/raft.h	/^	State state_;$/;"	m	class:floyd::raft::RaftConsensus
state_changed_	consensus/raft/raft.h	/^	mutable CondVar state_changed_;$/;"	m	class:floyd::raft::RaftConsensus
static_descriptor_initializer_command_2eproto_	command.pb.cc	/^} static_descriptor_initializer_command_2eproto_;$/;"	m	namespace:command	typeref:struct:command::StaticDescriptorInitializer_command_2eproto	file:
static_descriptor_initializer_meta_2eproto_	meta.pb.cc	/^} static_descriptor_initializer_meta_2eproto_;$/;"	m	namespace:meta	typeref:struct:meta::StaticDescriptorInitializer_meta_2eproto	file:
static_descriptor_initializer_raft_2flog_5fmeta_2eproto_	consensus/raft/log_meta.pb.cc	/^} static_descriptor_initializer_raft_2flog_5fmeta_2eproto_;$/;"	m	namespace:floyd::raft::log	typeref:struct:floyd::raft::log::StaticDescriptorInitializer_raft_2flog_5fmeta_2eproto	file:
static_descriptor_initializer_raft_2fraft_2eproto_	consensus/raft/raft.pb.cc	/^} static_descriptor_initializer_raft_2fraft_2eproto_;$/;"	m	namespace:floyd::raft	typeref:struct:floyd::raft::StaticDescriptorInitializer_raft_2fraft_2eproto	file:
static_descriptor_initializer_raft_2fsimplelog_5fmeta_2eproto_	consensus/raft/simplelog_meta.pb.cc	/^} static_descriptor_initializer_raft_2fsimplelog_5fmeta_2eproto_;$/;"	m	namespace:floyd::raft::simplefilelog	typeref:struct:floyd::raft::simplefilelog::StaticDescriptorInitializer_raft_2fsimplelog_5fmeta_2eproto	file:
status	command.pb.h	/^inline bool CommandRes_KvRet::status() const {$/;"	f	class:command::CommandRes_KvRet
status	consensus/raft/raft.pb.h	/^inline bool AppendEntriesResponse::status() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
status_	command.pb.h	/^  bool status_;$/;"	m	class:command::CommandRes_KvRet
status_	consensus/raft/raft.pb.h	/^  bool status_;$/;"	m	class:floyd::raft::AppendEntriesResponse
t	meta.pb.h	/^inline ::meta::Meta_Type Meta::t() const {$/;"	f	class:meta::Meta
t_	meta.pb.h	/^  int t_;$/;"	m	class:meta::Meta
term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 AppendEntriesRequest::term() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 AppendEntriesResponse::term() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 Entry::term() const {$/;"	f	class:floyd::raft::Entry
term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 RequestVote::term() const {$/;"	f	class:floyd::raft::RequestVote
term	consensus/raft/raft.pb.h	/^inline ::google::protobuf::uint64 ResponseVote::term() const {$/;"	f	class:floyd::raft::ResponseVote
term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 term_;$/;"	m	class:floyd::raft::AppendEntriesRequest
term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 term_;$/;"	m	class:floyd::raft::AppendEntriesResponse
term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 term_;$/;"	m	class:floyd::raft::Entry
term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 term_;$/;"	m	class:floyd::raft::RequestVote
term_	consensus/raft/raft.pb.h	/^  ::google::protobuf::uint64 term_;$/;"	m	class:floyd::raft::ResponseVote
type	command.pb.h	/^inline ::command::CommandRes_Type CommandRes::type() const {$/;"	f	class:command::CommandRes
type	command.pb.h	/^inline ::command::Command_Type Command::type() const {$/;"	f	class:command::Command
type_	command.pb.h	/^  int type_;$/;"	m	class:command::Command
type_	command.pb.h	/^  int type_;$/;"	m	class:command::CommandRes
unix_error	csapp.cc	/^void unix_error(const char *msg) \/* unix-style error *\/$/;"	f
unknown_fields	command.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:command::Command
unknown_fields	command.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:command::CommandRes
unknown_fields	command.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:command::CommandRes_KvRet
unknown_fields	command.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:command::Command_Kv
unknown_fields	consensus/raft/log_meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::log::MetaData
unknown_fields	consensus/raft/raft.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::AppendEntriesRequest
unknown_fields	consensus/raft/raft.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::AppendEntriesResponse
unknown_fields	consensus/raft/raft.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::Entry
unknown_fields	consensus/raft/raft.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::RequestVote
unknown_fields	consensus/raft/raft.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::ResponseVote
unknown_fields	consensus/raft/simplelog_meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:floyd::raft::simplefilelog::MetaData
unknown_fields	meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:meta::Meta
unknown_fields	meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:meta::MetaRes
unknown_fields	meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:meta::MetaRes_Node
unknown_fields	meta.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:meta::Meta_Node
value	command.pb.h	/^inline const ::std::string& CommandRes_KvRet::value() const {$/;"	f	class:command::CommandRes_KvRet
value	command.pb.h	/^inline const ::std::string& Command_Kv::value() const {$/;"	f	class:command::Command_Kv
value_	command.pb.h	/^  ::std::string* value_;$/;"	m	class:command::CommandRes_KvRet
value_	command.pb.h	/^  ::std::string* value_;$/;"	m	class:command::Command_Kv
vote_done_	consensus/raft/raft.h	/^		bool vote_done_;$/;"	m	class:floyd::raft::RaftConsensus::PeerThread
voted_for_ip	consensus/raft/log_meta.pb.h	/^inline const ::std::string& MetaData::voted_for_ip() const {$/;"	f	class:floyd::raft::log::MetaData
voted_for_ip_	consensus/raft/log_meta.pb.h	/^  ::std::string* voted_for_ip_;$/;"	m	class:floyd::raft::log::MetaData
voted_for_ip_	consensus/raft/raft.h	/^	std::string voted_for_ip_;$/;"	m	class:floyd::raft::RaftConsensus
voted_for_port	consensus/raft/log_meta.pb.h	/^inline ::google::protobuf::int32 MetaData::voted_for_port() const {$/;"	f	class:floyd::raft::log::MetaData
voted_for_port_	consensus/raft/log_meta.pb.h	/^  ::google::protobuf::int32 voted_for_port_;$/;"	m	class:floyd::raft::log::MetaData
voted_for_port_	consensus/raft/raft.h	/^	int voted_for_port_;$/;"	m	class:floyd::raft::RaftConsensus
~AppendEntriesRequest	consensus/raft/raft.pb.cc	/^AppendEntriesRequest::~AppendEntriesRequest() {$/;"	f	class:floyd::raft::AppendEntriesRequest
~AppendEntriesResponse	consensus/raft/raft.pb.cc	/^AppendEntriesResponse::~AppendEntriesResponse() {$/;"	f	class:floyd::raft::AppendEntriesResponse
~ApplyThread	consensus/raft/state_machine.cc	/^StateMachine::ApplyThread::~ApplyThread() {$/;"	f	class:floyd::raft::StateMachine::ApplyThread
~Command	command.pb.cc	/^Command::~Command() {$/;"	f	class:command::Command
~CommandRes	command.pb.cc	/^CommandRes::~CommandRes() {$/;"	f	class:command::CommandRes
~CommandRes_KvRet	command.pb.cc	/^CommandRes_KvRet::~CommandRes_KvRet() {$/;"	f	class:command::CommandRes_KvRet
~Command_Kv	command.pb.cc	/^Command_Kv::~Command_Kv() {$/;"	f	class:command::Command_Kv
~CondVar	floyd_mutex.cc	/^CondVar::~CondVar() { $/;"	f	class:CondVar
~ElectLeaderThread	consensus/raft/raft.cc	/^RaftConsensus::ElectLeaderThread::~ElectLeaderThread() {$/;"	f	class:floyd::raft::RaftConsensus::ElectLeaderThread
~Entry	consensus/raft/raft.pb.cc	/^Entry::~Entry() {$/;"	f	class:floyd::raft::Entry
~Floyd	floyd.cc	/^Floyd::~Floyd() {$/;"	f	class:floyd::Floyd
~FloydCliConn	floyd_conn.cc	/^FloydCliConn::~FloydCliConn() {$/;"	f	class:floyd::FloydCliConn
~FloydHeartBeatThread	floyd_hb.cc	/^FloydHeartBeatThread::~FloydHeartBeatThread() {$/;"	f	class:floyd::FloydHeartBeatThread
~FloydMetaCliConn	floyd_meta.cc	/^FloydMetaCliConn::~FloydMetaCliConn() {$/;"	f	class:floyd::FloydMetaCliConn
~FloydMetaConn	floyd_meta.cc	/^FloydMetaConn::~FloydMetaConn() {$/;"	f	class:floyd::FloydMetaConn
~FloydMetaThread	floyd_meta.cc	/^FloydMetaThread::~FloydMetaThread() {$/;"	f	class:floyd::FloydMetaThread
~FloydWorkerCliConn	floyd_worker.cc	/^FloydWorkerCliConn::~FloydWorkerCliConn() {$/;"	f	class:floyd::FloydWorkerCliConn
~FloydWorkerConn	floyd_worker.cc	/^FloydWorkerConn::~FloydWorkerConn() {$/;"	f	class:floyd::FloydWorkerConn
~FloydWorkerThread	floyd_worker.cc	/^FloydWorkerThread::~FloydWorkerThread() {$/;"	f	class:floyd::FloydWorkerThread
~LeaderDiskThread	consensus/raft/raft.cc	/^RaftConsensus::LeaderDiskThread::~LeaderDiskThread() {$/;"	f	class:floyd::raft::RaftConsensus::LeaderDiskThread
~Log	consensus/raft/log.cc	/^Log::~Log() {$/;"	f	class:floyd::raft::Log
~MemoryLog	consensus/raft/memory_log.cc	/^MemoryLog::~MemoryLog() {$/;"	f	class:floyd::raft::MemoryLog
~Meta	meta.pb.cc	/^Meta::~Meta() {$/;"	f	class:meta::Meta
~MetaData	consensus/raft/log_meta.pb.cc	/^MetaData::~MetaData() {$/;"	f	class:floyd::raft::log::MetaData
~MetaData	consensus/raft/simplelog_meta.pb.cc	/^MetaData::~MetaData() {$/;"	f	class:floyd::raft::simplefilelog::MetaData
~MetaRes	meta.pb.cc	/^MetaRes::~MetaRes() {$/;"	f	class:meta::MetaRes
~MetaRes_Node	meta.pb.cc	/^MetaRes_Node::~MetaRes_Node() {$/;"	f	class:meta::MetaRes_Node
~Meta_Node	meta.pb.cc	/^Meta_Node::~Meta_Node() {$/;"	f	class:meta::Meta_Node
~Mutex	floyd_mutex.cc	/^Mutex::~Mutex() { $/;"	f	class:Mutex
~PeerThread	consensus/raft/raft.cc	/^RaftConsensus::PeerThread::~PeerThread() {$/;"	f	class:floyd::raft::RaftConsensus::PeerThread
~RaftConsensus	consensus/raft/raft.cc	/^RaftConsensus::~RaftConsensus() {$/;"	f	class:floyd::raft::RaftConsensus
~RequestVote	consensus/raft/raft.pb.cc	/^RequestVote::~RequestVote() {$/;"	f	class:floyd::raft::RequestVote
~ResponseVote	consensus/raft/raft.pb.cc	/^ResponseVote::~ResponseVote() {$/;"	f	class:floyd::raft::ResponseVote
~SimpleFileLog	consensus/raft/simplefile_log.cc	/^SimpleFileLog::~SimpleFileLog() {$/;"	f	class:floyd::raft::SimpleFileLog
~StateMachine	consensus/raft/state_machine.cc	/^StateMachine::~StateMachine() {$/;"	f	class:floyd::raft::StateMachine
~Sync	consensus/raft/log.cc	/^Log::Sync::~Sync() {$/;"	f	class:floyd::raft::Log::Sync
